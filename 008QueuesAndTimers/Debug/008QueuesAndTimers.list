
008QueuesAndTimers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085b0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08008750  08008750  00018750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b5c  08008b5c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08008b5c  08008b5c  00018b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b64  08008b64  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b64  08008b64  00018b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b68  08008b68  00018b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08008b6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013044  20000080  08008bec  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200130c4  08008bec  000230c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016461  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a49  00000000  00000000  00036554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001450  00000000  00000000  00039fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fb4  00000000  00000000  0003b3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a522  00000000  00000000  0003c3a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019a05  00000000  00000000  000568c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ec74  00000000  00000000  000702cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005cf4  00000000  00000000  0010ef40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00114c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008738 	.word	0x08008738

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08008738 	.word	0x08008738

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <led_effect_stop>:


#include "main.h"

void led_effect_stop(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af02      	add	r7, sp, #8
	xTimerStop(handle_led_timer,portMAX_DELAY);
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <led_effect_stop+0x20>)
 80005b4:	6818      	ldr	r0, [r3, #0]
 80005b6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ba:	9300      	str	r3, [sp, #0]
 80005bc:	2300      	movs	r3, #0
 80005be:	2200      	movs	r2, #0
 80005c0:	2103      	movs	r1, #3
 80005c2:	f006 f851 	bl	8006668 <xTimerGenericCommand>
}
 80005c6:	bf00      	nop
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20000124 	.word	0x20000124

080005d0 <led_effect>:

void led_effect()
{
 80005d0:	b590      	push	{r4, r7, lr}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af02      	add	r7, sp, #8
	led_effect_stop();
 80005d6:	f7ff ffe9 	bl	80005ac <led_effect_stop>
	xTimerStart(handle_led_timer,portMAX_DELAY);
 80005da:	4b08      	ldr	r3, [pc, #32]	; (80005fc <led_effect+0x2c>)
 80005dc:	681c      	ldr	r4, [r3, #0]
 80005de:	f005 f97b 	bl	80058d8 <xTaskGetTickCount>
 80005e2:	4602      	mov	r2, r0
 80005e4:	f04f 33ff 	mov.w	r3, #4294967295
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2300      	movs	r3, #0
 80005ec:	2101      	movs	r1, #1
 80005ee:	4620      	mov	r0, r4
 80005f0:	f006 f83a 	bl	8006668 <xTimerGenericCommand>
}
 80005f4:	bf00      	nop
 80005f6:	3704      	adds	r7, #4
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd90      	pop	{r4, r7, pc}
 80005fc:	20000124 	.word	0x20000124

08000600 <turn_on_led>:

void turn_on_led()
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000604:	2201      	movs	r2, #1
 8000606:	2120      	movs	r1, #32
 8000608:	4802      	ldr	r0, [pc, #8]	; (8000614 <turn_on_led+0x14>)
 800060a:	f001 fd5d 	bl	80020c8 <HAL_GPIO_WritePin>
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40020000 	.word	0x40020000

08000618 <turn_off_led>:

void turn_off_led()
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	2120      	movs	r1, #32
 8000620:	4802      	ldr	r0, [pc, #8]	; (800062c <turn_off_led+0x14>)
 8000622:	f001 fd51 	bl	80020c8 <HAL_GPIO_WritePin>
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40020000 	.word	0x40020000

08000630 <LED_effect1>:

void LED_effect1()
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	static int flag = 1;
	(flag ^= 1) ? turn_off_led() : turn_on_led();
 8000634:	4b08      	ldr	r3, [pc, #32]	; (8000658 <LED_effect1+0x28>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f083 0301 	eor.w	r3, r3, #1
 800063c:	4a06      	ldr	r2, [pc, #24]	; (8000658 <LED_effect1+0x28>)
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4b05      	ldr	r3, [pc, #20]	; (8000658 <LED_effect1+0x28>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d002      	beq.n	800064e <LED_effect1+0x1e>
 8000648:	f7ff ffe6 	bl	8000618 <turn_off_led>
}
 800064c:	e001      	b.n	8000652 <LED_effect1+0x22>
	(flag ^= 1) ? turn_off_led() : turn_on_led();
 800064e:	f7ff ffd7 	bl	8000600 <turn_on_led>
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000000 	.word	0x20000000

0800065c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08a      	sub	sp, #40	; 0x28
 8000660:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000662:	f001 f9f7 	bl	8001a54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000666:	f000 f903 	bl	8000870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800066a:	f000 f9bd 	bl	80009e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800066e:	f000 f991 	bl	8000994 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000672:	f000 f969 	bl	8000948 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */


  status = xTaskCreate(menu_task, "menu_task", 250,NULL, 2, &handle_menu_task);
 8000676:	4b65      	ldr	r3, [pc, #404]	; (800080c <main+0x1b0>)
 8000678:	9301      	str	r3, [sp, #4]
 800067a:	2302      	movs	r3, #2
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	2300      	movs	r3, #0
 8000680:	22fa      	movs	r2, #250	; 0xfa
 8000682:	4963      	ldr	r1, [pc, #396]	; (8000810 <main+0x1b4>)
 8000684:	4863      	ldr	r0, [pc, #396]	; (8000814 <main+0x1b8>)
 8000686:	f004 ff01 	bl	800548c <xTaskCreate>
 800068a:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 800068c:	69fb      	ldr	r3, [r7, #28]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d00a      	beq.n	80006a8 <main+0x4c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000696:	f383 8811 	msr	BASEPRI, r3
 800069a:	f3bf 8f6f 	isb	sy
 800069e:	f3bf 8f4f 	dsb	sy
 80006a2:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80006a4:	bf00      	nop
 80006a6:	e7fe      	b.n	80006a6 <main+0x4a>

  status = xTaskCreate(cmd_task, "cmd_task", 250,NULL, 2, &handle_cmd_task);
 80006a8:	4b5b      	ldr	r3, [pc, #364]	; (8000818 <main+0x1bc>)
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	2302      	movs	r3, #2
 80006ae:	9300      	str	r3, [sp, #0]
 80006b0:	2300      	movs	r3, #0
 80006b2:	22fa      	movs	r2, #250	; 0xfa
 80006b4:	4959      	ldr	r1, [pc, #356]	; (800081c <main+0x1c0>)
 80006b6:	485a      	ldr	r0, [pc, #360]	; (8000820 <main+0x1c4>)
 80006b8:	f004 fee8 	bl	800548c <xTaskCreate>
 80006bc:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d00a      	beq.n	80006da <main+0x7e>
        __asm volatile
 80006c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006c8:	f383 8811 	msr	BASEPRI, r3
 80006cc:	f3bf 8f6f 	isb	sy
 80006d0:	f3bf 8f4f 	dsb	sy
 80006d4:	617b      	str	r3, [r7, #20]
    }
 80006d6:	bf00      	nop
 80006d8:	e7fe      	b.n	80006d8 <main+0x7c>

  status = xTaskCreate(print_task, "print_task", 250,NULL, 2, &handle_print_task);
 80006da:	4b52      	ldr	r3, [pc, #328]	; (8000824 <main+0x1c8>)
 80006dc:	9301      	str	r3, [sp, #4]
 80006de:	2302      	movs	r3, #2
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	2300      	movs	r3, #0
 80006e4:	22fa      	movs	r2, #250	; 0xfa
 80006e6:	4950      	ldr	r1, [pc, #320]	; (8000828 <main+0x1cc>)
 80006e8:	4850      	ldr	r0, [pc, #320]	; (800082c <main+0x1d0>)
 80006ea:	f004 fecf 	bl	800548c <xTaskCreate>
 80006ee:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 80006f0:	69fb      	ldr	r3, [r7, #28]
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d00a      	beq.n	800070c <main+0xb0>
        __asm volatile
 80006f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006fa:	f383 8811 	msr	BASEPRI, r3
 80006fe:	f3bf 8f6f 	isb	sy
 8000702:	f3bf 8f4f 	dsb	sy
 8000706:	613b      	str	r3, [r7, #16]
    }
 8000708:	bf00      	nop
 800070a:	e7fe      	b.n	800070a <main+0xae>

  status = xTaskCreate(led_task, "led_task", 250,NULL, 2, &handle_led_task);
 800070c:	4b48      	ldr	r3, [pc, #288]	; (8000830 <main+0x1d4>)
 800070e:	9301      	str	r3, [sp, #4]
 8000710:	2302      	movs	r3, #2
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	2300      	movs	r3, #0
 8000716:	22fa      	movs	r2, #250	; 0xfa
 8000718:	4946      	ldr	r1, [pc, #280]	; (8000834 <main+0x1d8>)
 800071a:	4847      	ldr	r0, [pc, #284]	; (8000838 <main+0x1dc>)
 800071c:	f004 feb6 	bl	800548c <xTaskCreate>
 8000720:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	2b01      	cmp	r3, #1
 8000726:	d00a      	beq.n	800073e <main+0xe2>
        __asm volatile
 8000728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800072c:	f383 8811 	msr	BASEPRI, r3
 8000730:	f3bf 8f6f 	isb	sy
 8000734:	f3bf 8f4f 	dsb	sy
 8000738:	60fb      	str	r3, [r7, #12]
    }
 800073a:	bf00      	nop
 800073c:	e7fe      	b.n	800073c <main+0xe0>

  status = xTaskCreate(rtc_task, "rtc_task", 250,NULL, 2, &handle_rtc_task);
 800073e:	4b3f      	ldr	r3, [pc, #252]	; (800083c <main+0x1e0>)
 8000740:	9301      	str	r3, [sp, #4]
 8000742:	2302      	movs	r3, #2
 8000744:	9300      	str	r3, [sp, #0]
 8000746:	2300      	movs	r3, #0
 8000748:	22fa      	movs	r2, #250	; 0xfa
 800074a:	493d      	ldr	r1, [pc, #244]	; (8000840 <main+0x1e4>)
 800074c:	483d      	ldr	r0, [pc, #244]	; (8000844 <main+0x1e8>)
 800074e:	f004 fe9d 	bl	800548c <xTaskCreate>
 8000752:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 8000754:	69fb      	ldr	r3, [r7, #28]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d00a      	beq.n	8000770 <main+0x114>
        __asm volatile
 800075a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800075e:	f383 8811 	msr	BASEPRI, r3
 8000762:	f3bf 8f6f 	isb	sy
 8000766:	f3bf 8f4f 	dsb	sy
 800076a:	60bb      	str	r3, [r7, #8]
    }
 800076c:	bf00      	nop
 800076e:	e7fe      	b.n	800076e <main+0x112>

  q_data = xQueueCreate(10,sizeof(char));
 8000770:	2200      	movs	r2, #0
 8000772:	2101      	movs	r1, #1
 8000774:	200a      	movs	r0, #10
 8000776:	f004 f960 	bl	8004a3a <xQueueGenericCreate>
 800077a:	4603      	mov	r3, r0
 800077c:	4a32      	ldr	r2, [pc, #200]	; (8000848 <main+0x1ec>)
 800077e:	6013      	str	r3, [r2, #0]
  configASSERT(q_data != NULL);
 8000780:	4b31      	ldr	r3, [pc, #196]	; (8000848 <main+0x1ec>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d10a      	bne.n	800079e <main+0x142>
        __asm volatile
 8000788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800078c:	f383 8811 	msr	BASEPRI, r3
 8000790:	f3bf 8f6f 	isb	sy
 8000794:	f3bf 8f4f 	dsb	sy
 8000798:	607b      	str	r3, [r7, #4]
    }
 800079a:	bf00      	nop
 800079c:	e7fe      	b.n	800079c <main+0x140>

  q_print = xQueueCreate(10,sizeof(size_t));
 800079e:	2200      	movs	r2, #0
 80007a0:	2104      	movs	r1, #4
 80007a2:	200a      	movs	r0, #10
 80007a4:	f004 f949 	bl	8004a3a <xQueueGenericCreate>
 80007a8:	4603      	mov	r3, r0
 80007aa:	4a28      	ldr	r2, [pc, #160]	; (800084c <main+0x1f0>)
 80007ac:	6013      	str	r3, [r2, #0]
  configASSERT(q_print != NULL);
 80007ae:	4b27      	ldr	r3, [pc, #156]	; (800084c <main+0x1f0>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d10a      	bne.n	80007cc <main+0x170>
        __asm volatile
 80007b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007ba:	f383 8811 	msr	BASEPRI, r3
 80007be:	f3bf 8f6f 	isb	sy
 80007c2:	f3bf 8f4f 	dsb	sy
 80007c6:	603b      	str	r3, [r7, #0]
    }
 80007c8:	bf00      	nop
 80007ca:	e7fe      	b.n	80007ca <main+0x16e>


  handle_led_timer = xTimerCreate("led_timer",pdMS_TO_TICKS(500),pdTRUE,NULL,led_effect_callback );
 80007cc:	4b20      	ldr	r3, [pc, #128]	; (8000850 <main+0x1f4>)
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	2300      	movs	r3, #0
 80007d2:	2201      	movs	r2, #1
 80007d4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80007d8:	481e      	ldr	r0, [pc, #120]	; (8000854 <main+0x1f8>)
 80007da:	f005 fee9 	bl	80065b0 <xTimerCreate>
 80007de:	4603      	mov	r3, r0
 80007e0:	4a1d      	ldr	r2, [pc, #116]	; (8000858 <main+0x1fc>)
 80007e2:	6013      	str	r3, [r2, #0]

  rtc_timer = xTimerCreate ("rtc_report_timer",pdMS_TO_TICKS(1000),pdTRUE,NULL,rtc_report_callback);
 80007e4:	4b1d      	ldr	r3, [pc, #116]	; (800085c <main+0x200>)
 80007e6:	9300      	str	r3, [sp, #0]
 80007e8:	2300      	movs	r3, #0
 80007ea:	2201      	movs	r2, #1
 80007ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007f0:	481b      	ldr	r0, [pc, #108]	; (8000860 <main+0x204>)
 80007f2:	f005 fedd 	bl	80065b0 <xTimerCreate>
 80007f6:	4603      	mov	r3, r0
 80007f8:	4a1a      	ldr	r2, [pc, #104]	; (8000864 <main+0x208>)
 80007fa:	6013      	str	r3, [r2, #0]

  HAL_UART_Receive_IT(&huart2, &user_data,1);
 80007fc:	2201      	movs	r2, #1
 80007fe:	491a      	ldr	r1, [pc, #104]	; (8000868 <main+0x20c>)
 8000800:	481a      	ldr	r0, [pc, #104]	; (800086c <main+0x210>)
 8000802:	f003 f890 	bl	8003926 <HAL_UART_Receive_IT>

  vTaskStartScheduler();
 8000806:	f004 ff79 	bl	80056fc <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800080a:	e7fe      	b.n	800080a <main+0x1ae>
 800080c:	20000104 	.word	0x20000104
 8000810:	08008750 	.word	0x08008750
 8000814:	08001231 	.word	0x08001231
 8000818:	20000108 	.word	0x20000108
 800081c:	0800875c 	.word	0x0800875c
 8000820:	08001319 	.word	0x08001319
 8000824:	2000010c 	.word	0x2000010c
 8000828:	08008768 	.word	0x08008768
 800082c:	08001801 	.word	0x08001801
 8000830:	20000110 	.word	0x20000110
 8000834:	08008774 	.word	0x08008774
 8000838:	08001841 	.word	0x08001841
 800083c:	20000114 	.word	0x20000114
 8000840:	08008780 	.word	0x08008780
 8000844:	08001391 	.word	0x08001391
 8000848:	20000118 	.word	0x20000118
 800084c:	2000011c 	.word	0x2000011c
 8000850:	08000b6d 	.word	0x08000b6d
 8000854:	0800878c 	.word	0x0800878c
 8000858:	20000124 	.word	0x20000124
 800085c:	08000b81 	.word	0x08000b81
 8000860:	08008798 	.word	0x08008798
 8000864:	20000128 	.word	0x20000128
 8000868:	20000120 	.word	0x20000120
 800086c:	200000bc 	.word	0x200000bc

08000870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b094      	sub	sp, #80	; 0x50
 8000874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000876:	f107 0320 	add.w	r3, r7, #32
 800087a:	2230      	movs	r2, #48	; 0x30
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f006 ff81 	bl	8007786 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	4b29      	ldr	r3, [pc, #164]	; (8000940 <SystemClock_Config+0xd0>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089c:	4a28      	ldr	r2, [pc, #160]	; (8000940 <SystemClock_Config+0xd0>)
 800089e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a2:	6413      	str	r3, [r2, #64]	; 0x40
 80008a4:	4b26      	ldr	r3, [pc, #152]	; (8000940 <SystemClock_Config+0xd0>)
 80008a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008b0:	2300      	movs	r3, #0
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	4b23      	ldr	r3, [pc, #140]	; (8000944 <SystemClock_Config+0xd4>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a22      	ldr	r2, [pc, #136]	; (8000944 <SystemClock_Config+0xd4>)
 80008ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008be:	6013      	str	r3, [r2, #0]
 80008c0:	4b20      	ldr	r3, [pc, #128]	; (8000944 <SystemClock_Config+0xd4>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80008cc:	230a      	movs	r3, #10
 80008ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008d0:	2301      	movs	r3, #1
 80008d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008d4:	2310      	movs	r3, #16
 80008d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008d8:	2301      	movs	r3, #1
 80008da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008dc:	2302      	movs	r3, #2
 80008de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008e0:	2300      	movs	r3, #0
 80008e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008e4:	2310      	movs	r3, #16
 80008e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008e8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008ee:	2304      	movs	r3, #4
 80008f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008f2:	2304      	movs	r3, #4
 80008f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f6:	f107 0320 	add.w	r3, r7, #32
 80008fa:	4618      	mov	r0, r3
 80008fc:	f001 fbfe 	bl	80020fc <HAL_RCC_OscConfig>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000906:	f000 f957 	bl	8000bb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800090a:	230f      	movs	r3, #15
 800090c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800090e:	2302      	movs	r3, #2
 8000910:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000912:	2300      	movs	r3, #0
 8000914:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000916:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800091a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000920:	f107 030c 	add.w	r3, r7, #12
 8000924:	2102      	movs	r1, #2
 8000926:	4618      	mov	r0, r3
 8000928:	f001 fe60 	bl	80025ec <HAL_RCC_ClockConfig>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000932:	f000 f941 	bl	8000bb8 <Error_Handler>
  }
}
 8000936:	bf00      	nop
 8000938:	3750      	adds	r7, #80	; 0x50
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800
 8000944:	40007000 	.word	0x40007000

08000948 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800094c:	4b0f      	ldr	r3, [pc, #60]	; (800098c <MX_RTC_Init+0x44>)
 800094e:	4a10      	ldr	r2, [pc, #64]	; (8000990 <MX_RTC_Init+0x48>)
 8000950:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <MX_RTC_Init+0x44>)
 8000954:	2240      	movs	r2, #64	; 0x40
 8000956:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <MX_RTC_Init+0x44>)
 800095a:	227f      	movs	r2, #127	; 0x7f
 800095c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <MX_RTC_Init+0x44>)
 8000960:	22ff      	movs	r2, #255	; 0xff
 8000962:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000964:	4b09      	ldr	r3, [pc, #36]	; (800098c <MX_RTC_Init+0x44>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <MX_RTC_Init+0x44>)
 800096c:	2200      	movs	r2, #0
 800096e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <MX_RTC_Init+0x44>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <MX_RTC_Init+0x44>)
 8000978:	f002 f97a 	bl	8002c70 <HAL_RTC_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000982:	f000 f919 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	2000009c 	.word	0x2000009c
 8000990:	40002800 	.word	0x40002800

08000994 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000998:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 800099a:	4a12      	ldr	r2, [pc, #72]	; (80009e4 <MX_USART2_UART_Init+0x50>)
 800099c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009b8:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009ba:	220c      	movs	r2, #12
 80009bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_USART2_UART_Init+0x4c>)
 80009cc:	f002 fed0 	bl	8003770 <HAL_UART_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009d6:	f000 f8ef 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200000bc 	.word	0x200000bc
 80009e4:	40004400 	.word	0x40004400

080009e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	; 0x28
 80009ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
 80009fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	4b2d      	ldr	r3, [pc, #180]	; (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a2c      	ldr	r2, [pc, #176]	; (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a08:	f043 0304 	orr.w	r3, r3, #4
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b2a      	ldr	r3, [pc, #168]	; (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0304 	and.w	r3, r3, #4
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	4b26      	ldr	r3, [pc, #152]	; (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a25      	ldr	r2, [pc, #148]	; (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b23      	ldr	r3, [pc, #140]	; (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	60bb      	str	r3, [r7, #8]
 8000a3a:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a1e      	ldr	r2, [pc, #120]	; (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a17      	ldr	r2, [pc, #92]	; (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a5c:	f043 0302 	orr.w	r3, r3, #2
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <MX_GPIO_Init+0xd0>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0302 	and.w	r3, r3, #2
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2120      	movs	r1, #32
 8000a72:	4812      	ldr	r0, [pc, #72]	; (8000abc <MX_GPIO_Init+0xd4>)
 8000a74:	f001 fb28 	bl	80020c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a7e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	480c      	ldr	r0, [pc, #48]	; (8000ac0 <MX_GPIO_Init+0xd8>)
 8000a90:	f001 f996 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a94:	2320      	movs	r3, #32
 8000a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4804      	ldr	r0, [pc, #16]	; (8000abc <MX_GPIO_Init+0xd4>)
 8000aac:	f001 f988 	bl	8001dc0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ab0:	bf00      	nop
 8000ab2:	3728      	adds	r7, #40	; 0x28
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020000 	.word	0x40020000
 8000ac0:	40020800 	.word	0x40020800

08000ac4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af02      	add	r7, sp, #8
 8000aca:	6078      	str	r0, [r7, #4]
	uint8_t dummy;
	for(uint32_t i = 0 ; i < 4000 ; i++);
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	e002      	b.n	8000ad8 <HAL_UART_RxCpltCallback+0x14>
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000ade:	d3f8      	bcc.n	8000ad2 <HAL_UART_RxCpltCallback+0xe>
	if(!xQueueIsQueueFullFromISR(q_data))
 8000ae0:	4b1e      	ldr	r3, [pc, #120]	; (8000b5c <HAL_UART_RxCpltCallback+0x98>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f004 fc4c 	bl	8005382 <xQueueIsQueueFullFromISR>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d107      	bne.n	8000b00 <HAL_UART_RxCpltCallback+0x3c>
	{
		xQueueSendFromISR(q_data,(void *)&user_data,NULL);
 8000af0:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <HAL_UART_RxCpltCallback+0x98>)
 8000af2:	6818      	ldr	r0, [r3, #0]
 8000af4:	2300      	movs	r3, #0
 8000af6:	2200      	movs	r2, #0
 8000af8:	4919      	ldr	r1, [pc, #100]	; (8000b60 <HAL_UART_RxCpltCallback+0x9c>)
 8000afa:	f004 f907 	bl	8004d0c <xQueueGenericSendFromISR>
 8000afe:	e013      	b.n	8000b28 <HAL_UART_RxCpltCallback+0x64>
	}
	else
	{
		if(user_data == '\n')
 8000b00:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <HAL_UART_RxCpltCallback+0x9c>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	2b0a      	cmp	r3, #10
 8000b08:	d10e      	bne.n	8000b28 <HAL_UART_RxCpltCallback+0x64>
		{
			xQueueReceiveFromISR(q_data,(void *)&dummy,NULL);
 8000b0a:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <HAL_UART_RxCpltCallback+0x98>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f107 010b 	add.w	r1, r7, #11
 8000b12:	2200      	movs	r2, #0
 8000b14:	4618      	mov	r0, r3
 8000b16:	f004 fa77 	bl	8005008 <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data,(void *)&user_data,NULL);
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <HAL_UART_RxCpltCallback+0x98>)
 8000b1c:	6818      	ldr	r0, [r3, #0]
 8000b1e:	2300      	movs	r3, #0
 8000b20:	2200      	movs	r2, #0
 8000b22:	490f      	ldr	r1, [pc, #60]	; (8000b60 <HAL_UART_RxCpltCallback+0x9c>)
 8000b24:	f004 f8f2 	bl	8004d0c <xQueueGenericSendFromISR>
		}
	}

	if(user_data == '\n')
 8000b28:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <HAL_UART_RxCpltCallback+0x9c>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	2b0a      	cmp	r3, #10
 8000b30:	d10a      	bne.n	8000b48 <HAL_UART_RxCpltCallback+0x84>
	{
		xTaskNotifyFromISR(handle_cmd_task,0,eNoAction,NULL);
 8000b32:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <HAL_UART_RxCpltCallback+0xa0>)
 8000b34:	6818      	ldr	r0, [r3, #0]
 8000b36:	2300      	movs	r3, #0
 8000b38:	9301      	str	r3, [sp, #4]
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	9300      	str	r3, [sp, #0]
 8000b3e:	2300      	movs	r3, #0
 8000b40:	2200      	movs	r2, #0
 8000b42:	2100      	movs	r1, #0
 8000b44:	f005 fb9a 	bl	800627c <xTaskGenericNotifyFromISR>
	}
	HAL_UART_Receive_IT(&huart2, &user_data,1);
 8000b48:	2201      	movs	r2, #1
 8000b4a:	4905      	ldr	r1, [pc, #20]	; (8000b60 <HAL_UART_RxCpltCallback+0x9c>)
 8000b4c:	4806      	ldr	r0, [pc, #24]	; (8000b68 <HAL_UART_RxCpltCallback+0xa4>)
 8000b4e:	f002 feea 	bl	8003926 <HAL_UART_Receive_IT>
}
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000118 	.word	0x20000118
 8000b60:	20000120 	.word	0x20000120
 8000b64:	20000108 	.word	0x20000108
 8000b68:	200000bc 	.word	0x200000bc

08000b6c <led_effect_callback>:

void led_effect_callback(TimerHandle_t xTimer)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
	LED_effect1();
 8000b74:	f7ff fd5c 	bl	8000630 <LED_effect1>
}
 8000b78:	bf00      	nop
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <rtc_report_callback>:

void rtc_report_callback( TimerHandle_t xTimer )
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	 show_time_date_itm();
 8000b88:	f000 f81c 	bl	8000bc4 <show_time_date_itm>

}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d101      	bne.n	8000baa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ba6:	f000 ff77 	bl	8001a98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40000c00 	.word	0x40000c00

08000bb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bbc:	b672      	cpsid	i
}
 8000bbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <Error_Handler+0x8>
	...

08000bc4 <show_time_date_itm>:
 */

#include "main.h"

 void show_time_date_itm(void)
 {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08a      	sub	sp, #40	; 0x28
 8000bc8:	af02      	add	r7, sp, #8
	RTC_DateTypeDef rtc_date;
	RTC_TimeTypeDef rtc_time;

	memset(&rtc_date,0,sizeof(rtc_date));
 8000bca:	f107 0318 	add.w	r3, r7, #24
 8000bce:	2204      	movs	r2, #4
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f006 fdd7 	bl	8007786 <memset>
	memset(&rtc_time,0,sizeof(rtc_time));
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	2214      	movs	r2, #20
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f006 fdd1 	bl	8007786 <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	2200      	movs	r2, #0
 8000be8:	4619      	mov	r1, r3
 8000bea:	4815      	ldr	r0, [pc, #84]	; (8000c40 <show_time_date_itm+0x7c>)
 8000bec:	f002 f95d 	bl	8002eaa <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8000bf0:	f107 0318 	add.w	r3, r7, #24
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4811      	ldr	r0, [pc, #68]	; (8000c40 <show_time_date_itm+0x7c>)
 8000bfa:	f002 fa38 	bl	800306e <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d101      	bne.n	8000c08 <show_time_date_itm+0x44>
 8000c04:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <show_time_date_itm+0x80>)
 8000c06:	e000      	b.n	8000c0a <show_time_date_itm+0x46>
 8000c08:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <show_time_date_itm+0x84>)
 8000c0a:	61fb      	str	r3, [r7, #28]


	printf("%02d:%02d:%02d [%s]",rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds,format);
 8000c0c:	793b      	ldrb	r3, [r7, #4]
 8000c0e:	4619      	mov	r1, r3
 8000c10:	797b      	ldrb	r3, [r7, #5]
 8000c12:	461a      	mov	r2, r3
 8000c14:	79bb      	ldrb	r3, [r7, #6]
 8000c16:	4618      	mov	r0, r3
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	9300      	str	r3, [sp, #0]
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	480b      	ldr	r0, [pc, #44]	; (8000c4c <show_time_date_itm+0x88>)
 8000c20:	f006 fd3c 	bl	800769c <iprintf>
	printf("\t%02d-%02d-%2d\n",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 8000c24:	7e7b      	ldrb	r3, [r7, #25]
 8000c26:	4619      	mov	r1, r3
 8000c28:	7ebb      	ldrb	r3, [r7, #26]
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	7efb      	ldrb	r3, [r7, #27]
 8000c2e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000c32:	4807      	ldr	r0, [pc, #28]	; (8000c50 <show_time_date_itm+0x8c>)
 8000c34:	f006 fd32 	bl	800769c <iprintf>

 }
 8000c38:	bf00      	nop
 8000c3a:	3720      	adds	r7, #32
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	2000009c 	.word	0x2000009c
 8000c44:	080087ac 	.word	0x080087ac
 8000c48:	080087b0 	.word	0x080087b0
 8000c4c:	080087b4 	.word	0x080087b4
 8000c50:	080087c8 	.word	0x080087c8

08000c54 <show_time_date>:

void show_time_date(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08c      	sub	sp, #48	; 0x30
 8000c58:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef rtc_time;

	static char *time = showtime;
	static char *date = showdate;

	memset(&rtc_date,0,sizeof(rtc_date));
 8000c5a:	f107 0318 	add.w	r3, r7, #24
 8000c5e:	2204      	movs	r2, #4
 8000c60:	2100      	movs	r1, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f006 fd8f 	bl	8007786 <memset>
	memset(&rtc_time,0,sizeof(rtc_time));
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	2214      	movs	r2, #20
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f006 fd89 	bl	8007786 <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	2200      	movs	r2, #0
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4821      	ldr	r0, [pc, #132]	; (8000d00 <show_time_date+0xac>)
 8000c7c:	f002 f915 	bl	8002eaa <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8000c80:	f107 0318 	add.w	r3, r7, #24
 8000c84:	2200      	movs	r2, #0
 8000c86:	4619      	mov	r1, r3
 8000c88:	481d      	ldr	r0, [pc, #116]	; (8000d00 <show_time_date+0xac>)
 8000c8a:	f002 f9f0 	bl	800306e <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d101      	bne.n	8000c98 <show_time_date+0x44>
 8000c94:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <show_time_date+0xb0>)
 8000c96:	e000      	b.n	8000c9a <show_time_date+0x46>
 8000c98:	4b1b      	ldr	r3, [pc, #108]	; (8000d08 <show_time_date+0xb4>)
 8000c9a:	61fb      	str	r3, [r7, #28]

	/* Display time Format : hh:mm:ss [AM/PM] */
	sprintf((char*)showtime,"%s:\t%02d:%02d:%02d [%s]","\nCurrent Time&Date",rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds,format);
 8000c9c:	793b      	ldrb	r3, [r7, #4]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	797b      	ldrb	r3, [r7, #5]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	79bb      	ldrb	r3, [r7, #6]
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	9302      	str	r3, [sp, #8]
 8000cac:	9101      	str	r1, [sp, #4]
 8000cae:	9200      	str	r2, [sp, #0]
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	4a16      	ldr	r2, [pc, #88]	; (8000d0c <show_time_date+0xb8>)
 8000cb4:	4916      	ldr	r1, [pc, #88]	; (8000d10 <show_time_date+0xbc>)
 8000cb6:	4817      	ldr	r0, [pc, #92]	; (8000d14 <show_time_date+0xc0>)
 8000cb8:	f006 fd02 	bl	80076c0 <siprintf>
	xQueueSend(q_print,&time,portMAX_DELAY);
 8000cbc:	4b16      	ldr	r3, [pc, #88]	; (8000d18 <show_time_date+0xc4>)
 8000cbe:	6818      	ldr	r0, [r3, #0]
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8000cc6:	4915      	ldr	r1, [pc, #84]	; (8000d1c <show_time_date+0xc8>)
 8000cc8:	f003 ff3a 	bl	8004b40 <xQueueGenericSend>

	/* Display date Format : date-month-year */
	sprintf((char*)showdate,"\t%02d-%02d-%2d\n",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 8000ccc:	7e7b      	ldrb	r3, [r7, #25]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	7ebb      	ldrb	r3, [r7, #26]
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	7efb      	ldrb	r3, [r7, #27]
 8000cd6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000cda:	9300      	str	r3, [sp, #0]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	4910      	ldr	r1, [pc, #64]	; (8000d20 <show_time_date+0xcc>)
 8000ce0:	4810      	ldr	r0, [pc, #64]	; (8000d24 <show_time_date+0xd0>)
 8000ce2:	f006 fced 	bl	80076c0 <siprintf>
	xQueueSend(q_print,&date,portMAX_DELAY);
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <show_time_date+0xc4>)
 8000ce8:	6818      	ldr	r0, [r3, #0]
 8000cea:	2300      	movs	r3, #0
 8000cec:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf0:	490d      	ldr	r1, [pc, #52]	; (8000d28 <show_time_date+0xd4>)
 8000cf2:	f003 ff25 	bl	8004b40 <xQueueGenericSend>
}
 8000cf6:	bf00      	nop
 8000cf8:	3720      	adds	r7, #32
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	2000009c 	.word	0x2000009c
 8000d04:	080087ac 	.word	0x080087ac
 8000d08:	080087b0 	.word	0x080087b0
 8000d0c:	080087d8 	.word	0x080087d8
 8000d10:	080087ec 	.word	0x080087ec
 8000d14:	2000012c 	.word	0x2000012c
 8000d18:	2000011c 	.word	0x2000011c
 8000d1c:	20000004 	.word	0x20000004
 8000d20:	080087c8 	.word	0x080087c8
 8000d24:	20000154 	.word	0x20000154
 8000d28:	20000008 	.word	0x20000008

08000d2c <rtc_configure_time>:


void rtc_configure_time(RTC_TimeTypeDef *time)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]

	time->TimeFormat = RTC_HOURFORMAT12_AM;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2200      	movs	r2, #0
 8000d38:	70da      	strb	r2, [r3, #3]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	60da      	str	r2, [r3, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2200      	movs	r2, #0
 8000d44:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(&hrtc,time,RTC_FORMAT_BIN);
 8000d46:	2200      	movs	r2, #0
 8000d48:	6879      	ldr	r1, [r7, #4]
 8000d4a:	4803      	ldr	r0, [pc, #12]	; (8000d58 <rtc_configure_time+0x2c>)
 8000d4c:	f002 f813 	bl	8002d76 <HAL_RTC_SetTime>
}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	2000009c 	.word	0x2000009c

08000d5c <rtc_configure_date>:


void rtc_configure_date(RTC_DateTypeDef *date)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc,date,RTC_FORMAT_BIN);
 8000d64:	2200      	movs	r2, #0
 8000d66:	6879      	ldr	r1, [r7, #4]
 8000d68:	4803      	ldr	r0, [pc, #12]	; (8000d78 <rtc_configure_date+0x1c>)
 8000d6a:	f002 f8fc 	bl	8002f66 <HAL_RTC_SetDate>
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	2000009c 	.word	0x2000009c

08000d7c <validate_rtc_information>:


int validate_rtc_information(RTC_TimeTypeDef *time , RTC_DateTypeDef *date)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
	if(time){
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d00d      	beq.n	8000da8 <validate_rtc_information+0x2c>
		if( (time->Hours > 12) || (time->Minutes > 59) || (time->Seconds > 59) )
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b0c      	cmp	r3, #12
 8000d92:	d807      	bhi.n	8000da4 <validate_rtc_information+0x28>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	785b      	ldrb	r3, [r3, #1]
 8000d98:	2b3b      	cmp	r3, #59	; 0x3b
 8000d9a:	d803      	bhi.n	8000da4 <validate_rtc_information+0x28>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	789b      	ldrb	r3, [r3, #2]
 8000da0:	2b3b      	cmp	r3, #59	; 0x3b
 8000da2:	d901      	bls.n	8000da8 <validate_rtc_information+0x2c>
			return 1;
 8000da4:	2301      	movs	r3, #1
 8000da6:	e015      	b.n	8000dd4 <validate_rtc_information+0x58>
	}

	if(date){
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d011      	beq.n	8000dd2 <validate_rtc_information+0x56>
		if( (date->Date > 31) || (date->WeekDay > 7) || (date->Year > 99) || (date->Month > 12) )
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	789b      	ldrb	r3, [r3, #2]
 8000db2:	2b1f      	cmp	r3, #31
 8000db4:	d80b      	bhi.n	8000dce <validate_rtc_information+0x52>
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b07      	cmp	r3, #7
 8000dbc:	d807      	bhi.n	8000dce <validate_rtc_information+0x52>
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	78db      	ldrb	r3, [r3, #3]
 8000dc2:	2b63      	cmp	r3, #99	; 0x63
 8000dc4:	d803      	bhi.n	8000dce <validate_rtc_information+0x52>
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	785b      	ldrb	r3, [r3, #1]
 8000dca:	2b0c      	cmp	r3, #12
 8000dcc:	d901      	bls.n	8000dd2 <validate_rtc_information+0x56>
			return 1;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e000      	b.n	8000dd4 <validate_rtc_information+0x58>
	}

	return 0;
 8000dd2:	2300      	movs	r3, #0
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <HAL_MspInit+0x4c>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	4a0f      	ldr	r2, [pc, #60]	; (8000e2c <HAL_MspInit+0x4c>)
 8000df0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df4:	6453      	str	r3, [r2, #68]	; 0x44
 8000df6:	4b0d      	ldr	r3, [pc, #52]	; (8000e2c <HAL_MspInit+0x4c>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	603b      	str	r3, [r7, #0]
 8000e06:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <HAL_MspInit+0x4c>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	4a08      	ldr	r2, [pc, #32]	; (8000e2c <HAL_MspInit+0x4c>)
 8000e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e10:	6413      	str	r3, [r2, #64]	; 0x40
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_MspInit+0x4c>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1a:	603b      	str	r3, [r7, #0]
 8000e1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	40023800 	.word	0x40023800

08000e30 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e38:	f107 0308 	add.w	r3, r7, #8
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
 8000e48:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a0c      	ldr	r2, [pc, #48]	; (8000e80 <HAL_RTC_MspInit+0x50>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d111      	bne.n	8000e78 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e54:	2302      	movs	r3, #2
 8000e56:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e5c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e5e:	f107 0308 	add.w	r3, r7, #8
 8000e62:	4618      	mov	r0, r3
 8000e64:	f001 fe14 	bl	8002a90 <HAL_RCCEx_PeriphCLKConfig>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000e6e:	f7ff fea3 	bl	8000bb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e72:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <HAL_RTC_MspInit+0x54>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000e78:	bf00      	nop
 8000e7a:	3720      	adds	r7, #32
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40002800 	.word	0x40002800
 8000e84:	42470e3c 	.word	0x42470e3c

08000e88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	; 0x28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a1d      	ldr	r2, [pc, #116]	; (8000f1c <HAL_UART_MspInit+0x94>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d133      	bne.n	8000f12 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <HAL_UART_MspInit+0x98>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	4a1b      	ldr	r2, [pc, #108]	; (8000f20 <HAL_UART_MspInit+0x98>)
 8000eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eba:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <HAL_UART_MspInit+0x98>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <HAL_UART_MspInit+0x98>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a14      	ldr	r2, [pc, #80]	; (8000f20 <HAL_UART_MspInit+0x98>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <HAL_UART_MspInit+0x98>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ee2:	230c      	movs	r3, #12
 8000ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ef2:	2307      	movs	r3, #7
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	4619      	mov	r1, r3
 8000efc:	4809      	ldr	r0, [pc, #36]	; (8000f24 <HAL_UART_MspInit+0x9c>)
 8000efe:	f000 ff5f 	bl	8001dc0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2106      	movs	r1, #6
 8000f06:	2026      	movs	r0, #38	; 0x26
 8000f08:	f000 fe9e 	bl	8001c48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f0c:	2026      	movs	r0, #38	; 0x26
 8000f0e:	f000 feb7 	bl	8001c80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f12:	bf00      	nop
 8000f14:	3728      	adds	r7, #40	; 0x28
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40004400 	.word	0x40004400
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40020000 	.word	0x40020000

08000f28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08e      	sub	sp, #56	; 0x38
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000f30:	2300      	movs	r3, #0
 8000f32:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000f34:	2300      	movs	r3, #0
 8000f36:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	4b33      	ldr	r3, [pc, #204]	; (800100c <HAL_InitTick+0xe4>)
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f40:	4a32      	ldr	r2, [pc, #200]	; (800100c <HAL_InitTick+0xe4>)
 8000f42:	f043 0308 	orr.w	r3, r3, #8
 8000f46:	6413      	str	r3, [r2, #64]	; 0x40
 8000f48:	4b30      	ldr	r3, [pc, #192]	; (800100c <HAL_InitTick+0xe4>)
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4c:	f003 0308 	and.w	r3, r3, #8
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f54:	f107 0210 	add.w	r2, r7, #16
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	4611      	mov	r1, r2
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f001 fd64 	bl	8002a2c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f64:	6a3b      	ldr	r3, [r7, #32]
 8000f66:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d103      	bne.n	8000f76 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f6e:	f001 fd35 	bl	80029dc <HAL_RCC_GetPCLK1Freq>
 8000f72:	6378      	str	r0, [r7, #52]	; 0x34
 8000f74:	e004      	b.n	8000f80 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f76:	f001 fd31 	bl	80029dc <HAL_RCC_GetPCLK1Freq>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f82:	4a23      	ldr	r2, [pc, #140]	; (8001010 <HAL_InitTick+0xe8>)
 8000f84:	fba2 2303 	umull	r2, r3, r2, r3
 8000f88:	0c9b      	lsrs	r3, r3, #18
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000f8e:	4b21      	ldr	r3, [pc, #132]	; (8001014 <HAL_InitTick+0xec>)
 8000f90:	4a21      	ldr	r2, [pc, #132]	; (8001018 <HAL_InitTick+0xf0>)
 8000f92:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000f94:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <HAL_InitTick+0xec>)
 8000f96:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f9a:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000f9c:	4a1d      	ldr	r2, [pc, #116]	; (8001014 <HAL_InitTick+0xec>)
 8000f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fa0:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000fa2:	4b1c      	ldr	r3, [pc, #112]	; (8001014 <HAL_InitTick+0xec>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa8:	4b1a      	ldr	r3, [pc, #104]	; (8001014 <HAL_InitTick+0xec>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fae:	4b19      	ldr	r3, [pc, #100]	; (8001014 <HAL_InitTick+0xec>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000fb4:	4817      	ldr	r0, [pc, #92]	; (8001014 <HAL_InitTick+0xec>)
 8000fb6:	f002 f967 	bl	8003288 <HAL_TIM_Base_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000fc0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d11b      	bne.n	8001000 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000fc8:	4812      	ldr	r0, [pc, #72]	; (8001014 <HAL_InitTick+0xec>)
 8000fca:	f002 f9b7 	bl	800333c <HAL_TIM_Base_Start_IT>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000fd4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d111      	bne.n	8001000 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000fdc:	2032      	movs	r0, #50	; 0x32
 8000fde:	f000 fe4f 	bl	8001c80 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2b0f      	cmp	r3, #15
 8000fe6:	d808      	bhi.n	8000ffa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	2032      	movs	r0, #50	; 0x32
 8000fee:	f000 fe2b 	bl	8001c48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ff2:	4a0a      	ldr	r2, [pc, #40]	; (800101c <HAL_InitTick+0xf4>)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6013      	str	r3, [r2, #0]
 8000ff8:	e002      	b.n	8001000 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001000:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001004:	4618      	mov	r0, r3
 8001006:	3738      	adds	r7, #56	; 0x38
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40023800 	.word	0x40023800
 8001010:	431bde83 	.word	0x431bde83
 8001014:	2000017c 	.word	0x2000017c
 8001018:	40000c00 	.word	0x40000c00
 800101c:	20000014 	.word	0x20000014

08001020 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001024:	e7fe      	b.n	8001024 <NMI_Handler+0x4>

08001026 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800102a:	e7fe      	b.n	800102a <HardFault_Handler+0x4>

0800102c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <MemManage_Handler+0x4>

08001032 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001036:	e7fe      	b.n	8001036 <BusFault_Handler+0x4>

08001038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800103c:	e7fe      	b.n	800103c <UsageFault_Handler+0x4>

0800103e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001050:	4802      	ldr	r0, [pc, #8]	; (800105c <USART2_IRQHandler+0x10>)
 8001052:	f002 fc8d 	bl	8003970 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200000bc 	.word	0x200000bc

08001060 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001064:	4802      	ldr	r0, [pc, #8]	; (8001070 <TIM5_IRQHandler+0x10>)
 8001066:	f002 f9cb 	bl	8003400 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	2000017c 	.word	0x2000017c

08001074 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800107e:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <ITM_SendChar+0x48>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a0e      	ldr	r2, [pc, #56]	; (80010bc <ITM_SendChar+0x48>)
 8001084:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001088:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800108a:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <ITM_SendChar+0x4c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a0c      	ldr	r2, [pc, #48]	; (80010c0 <ITM_SendChar+0x4c>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001096:	bf00      	nop
 8001098:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d0f8      	beq.n	8001098 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80010a6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	6013      	str	r3, [r2, #0]
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000edfc 	.word	0xe000edfc
 80010c0:	e0000e00 	.word	0xe0000e00

080010c4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	e00a      	b.n	80010ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010d6:	f3af 8000 	nop.w
 80010da:	4601      	mov	r1, r0
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	1c5a      	adds	r2, r3, #1
 80010e0:	60ba      	str	r2, [r7, #8]
 80010e2:	b2ca      	uxtb	r2, r1
 80010e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	3301      	adds	r3, #1
 80010ea:	617b      	str	r3, [r7, #20]
 80010ec:	697a      	ldr	r2, [r7, #20]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	dbf0      	blt.n	80010d6 <_read+0x12>
  }

  return len;
 80010f4:	687b      	ldr	r3, [r7, #4]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3718      	adds	r7, #24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b086      	sub	sp, #24
 8001102:	af00      	add	r7, sp, #0
 8001104:	60f8      	str	r0, [r7, #12]
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
 800110e:	e009      	b.n	8001124 <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	1c5a      	adds	r2, r3, #1
 8001114:	60ba      	str	r2, [r7, #8]
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ffab 	bl	8001074 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	3301      	adds	r3, #1
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	697a      	ldr	r2, [r7, #20]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	429a      	cmp	r2, r3
 800112a:	dbf1      	blt.n	8001110 <_write+0x12>
  }
  return len;
 800112c:	687b      	ldr	r3, [r7, #4]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <_close>:

int _close(int file)
{
 8001136:	b480      	push	{r7}
 8001138:	b083      	sub	sp, #12
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800113e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001142:	4618      	mov	r0, r3
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800114e:	b480      	push	{r7}
 8001150:	b083      	sub	sp, #12
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
 8001156:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800115e:	605a      	str	r2, [r3, #4]
  return 0;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <_isatty>:

int _isatty(int file)
{
 800116e:	b480      	push	{r7}
 8001170:	b083      	sub	sp, #12
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001176:	2301      	movs	r3, #1
}
 8001178:	4618      	mov	r0, r3
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
	...

080011a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011a8:	4a14      	ldr	r2, [pc, #80]	; (80011fc <_sbrk+0x5c>)
 80011aa:	4b15      	ldr	r3, [pc, #84]	; (8001200 <_sbrk+0x60>)
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011b4:	4b13      	ldr	r3, [pc, #76]	; (8001204 <_sbrk+0x64>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d102      	bne.n	80011c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <_sbrk+0x64>)
 80011be:	4a12      	ldr	r2, [pc, #72]	; (8001208 <_sbrk+0x68>)
 80011c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <_sbrk+0x64>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d207      	bcs.n	80011e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011d0:	f006 fb28 	bl	8007824 <__errno>
 80011d4:	4603      	mov	r3, r0
 80011d6:	220c      	movs	r2, #12
 80011d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011da:	f04f 33ff 	mov.w	r3, #4294967295
 80011de:	e009      	b.n	80011f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <_sbrk+0x64>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011e6:	4b07      	ldr	r3, [pc, #28]	; (8001204 <_sbrk+0x64>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	4a05      	ldr	r2, [pc, #20]	; (8001204 <_sbrk+0x64>)
 80011f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011f2:	68fb      	ldr	r3, [r7, #12]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20020000 	.word	0x20020000
 8001200:	00000400 	.word	0x00000400
 8001204:	200001c4 	.word	0x200001c4
 8001208:	200130c8 	.word	0x200130c8

0800120c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <SystemInit+0x20>)
 8001212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001216:	4a05      	ldr	r2, [pc, #20]	; (800122c <SystemInit+0x20>)
 8001218:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800121c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <menu_task>:
int extract_cmd(command_t * cmd);

const char * msg_inv = "////Invalid option////\n";

void menu_task(void * param)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af02      	add	r7, sp, #8
 8001236:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	int option;
	const char* msg_menu = "====================\n"
 8001238:	4b31      	ldr	r3, [pc, #196]	; (8001300 <menu_task+0xd0>)
 800123a:	60bb      	str	r3, [r7, #8]
			               " Date and time ---> 1\n"
			               " Exit          ---> 2\n"
			               " Enter your choice here:";
	while(1)
	{
		xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 800123c:	4b31      	ldr	r3, [pc, #196]	; (8001304 <menu_task+0xd4>)
 800123e:	6818      	ldr	r0, [r3, #0]
 8001240:	f107 0108 	add.w	r1, r7, #8
 8001244:	2300      	movs	r3, #0
 8001246:	f04f 32ff 	mov.w	r2, #4294967295
 800124a:	f003 fc79 	bl	8004b40 <xQueueGenericSend>
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 800124e:	f107 030c 	add.w	r3, r7, #12
 8001252:	f04f 32ff 	mov.w	r2, #4294967295
 8001256:	9200      	str	r2, [sp, #0]
 8001258:	2200      	movs	r2, #0
 800125a:	2100      	movs	r1, #0
 800125c:	2000      	movs	r0, #0
 800125e:	f004 febb 	bl	8005fd8 <xTaskGenericNotifyWait>
		cmd = (command_t *)cmd_addr;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	617b      	str	r3, [r7, #20]

		if(cmd->len == 1) //valid command
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d133      	bne.n	80012d6 <menu_task+0xa6>
		{
			option = cmd->payload[0]-48;
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	3b30      	subs	r3, #48	; 0x30
 8001274:	613b      	str	r3, [r7, #16]
			switch(option)
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	2b02      	cmp	r3, #2
 800127a:	d035      	beq.n	80012e8 <menu_task+0xb8>
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	2b02      	cmp	r3, #2
 8001280:	dc20      	bgt.n	80012c4 <menu_task+0x94>
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d003      	beq.n	8001290 <menu_task+0x60>
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d00d      	beq.n	80012aa <menu_task+0x7a>
 800128e:	e019      	b.n	80012c4 <menu_task+0x94>
			{
			case 0:
				curr_state = sLedEffect;
 8001290:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <menu_task+0xd8>)
 8001292:	2201      	movs	r2, #1
 8001294:	701a      	strb	r2, [r3, #0]
				xTaskNotify(handle_led_task,0,eNoAction);
 8001296:	4b1d      	ldr	r3, [pc, #116]	; (800130c <menu_task+0xdc>)
 8001298:	6818      	ldr	r0, [r3, #0]
 800129a:	2300      	movs	r3, #0
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	2300      	movs	r3, #0
 80012a0:	2200      	movs	r2, #0
 80012a2:	2100      	movs	r1, #0
 80012a4:	f004 ff18 	bl	80060d8 <xTaskGenericNotify>
				break;
 80012a8:	e01f      	b.n	80012ea <menu_task+0xba>
			case 1:
				curr_state = sRtcMenu;
 80012aa:	4b17      	ldr	r3, [pc, #92]	; (8001308 <menu_task+0xd8>)
 80012ac:	2202      	movs	r2, #2
 80012ae:	701a      	strb	r2, [r3, #0]
				xTaskNotify(handle_rtc_task,0,eNoAction);
 80012b0:	4b17      	ldr	r3, [pc, #92]	; (8001310 <menu_task+0xe0>)
 80012b2:	6818      	ldr	r0, [r3, #0]
 80012b4:	2300      	movs	r3, #0
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	2300      	movs	r3, #0
 80012ba:	2200      	movs	r2, #0
 80012bc:	2100      	movs	r1, #0
 80012be:	f004 ff0b 	bl	80060d8 <xTaskGenericNotify>
				break;
 80012c2:	e012      	b.n	80012ea <menu_task+0xba>
			case 2:
				break;
			default:
				xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80012c4:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <menu_task+0xd4>)
 80012c6:	6818      	ldr	r0, [r3, #0]
 80012c8:	2300      	movs	r3, #0
 80012ca:	f04f 32ff 	mov.w	r2, #4294967295
 80012ce:	4911      	ldr	r1, [pc, #68]	; (8001314 <menu_task+0xe4>)
 80012d0:	f003 fc36 	bl	8004b40 <xQueueGenericSend>
				continue;
 80012d4:	e012      	b.n	80012fc <menu_task+0xcc>
			}
		}
		else
		{
			//invalid entry
			xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80012d6:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <menu_task+0xd4>)
 80012d8:	6818      	ldr	r0, [r3, #0]
 80012da:	2300      	movs	r3, #0
 80012dc:	f04f 32ff 	mov.w	r2, #4294967295
 80012e0:	490c      	ldr	r1, [pc, #48]	; (8001314 <menu_task+0xe4>)
 80012e2:	f003 fc2d 	bl	8004b40 <xQueueGenericSend>
			continue;
 80012e6:	e009      	b.n	80012fc <menu_task+0xcc>
				break;
 80012e8:	bf00      	nop
		}
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	2300      	movs	r3, #0
 80012f2:	2200      	movs	r2, #0
 80012f4:	2100      	movs	r1, #0
 80012f6:	2000      	movs	r0, #0
 80012f8:	f004 fe6e 	bl	8005fd8 <xTaskGenericNotifyWait>
		xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 80012fc:	e79e      	b.n	800123c <menu_task+0xc>
 80012fe:	bf00      	nop
 8001300:	0800881c 	.word	0x0800881c
 8001304:	2000011c 	.word	0x2000011c
 8001308:	20000121 	.word	0x20000121
 800130c:	20000110 	.word	0x20000110
 8001310:	20000114 	.word	0x20000114
 8001314:	20000010 	.word	0x20000010

08001318 <cmd_task>:
	}
}

void cmd_task(void * param)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	; 0x28
 800131c:	af02      	add	r7, sp, #8
 800131e:	6078      	str	r0, [r7, #4]
	BaseType_t ret;
	command_t cmd;
	while(1)
	{
		ret = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001320:	f04f 33ff 	mov.w	r3, #4294967295
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	2300      	movs	r3, #0
 8001328:	2200      	movs	r2, #0
 800132a:	2100      	movs	r1, #0
 800132c:	2000      	movs	r0, #0
 800132e:	f004 fe53 	bl	8005fd8 <xTaskGenericNotifyWait>
 8001332:	61f8      	str	r0, [r7, #28]
		if(ret == pdTRUE)
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d1f2      	bne.n	8001320 <cmd_task+0x8>
		{
			process_cmd(&cmd);
 800133a:	f107 030c 	add.w	r3, r7, #12
 800133e:	4618      	mov	r0, r3
 8001340:	f000 fae8 	bl	8001914 <process_cmd>
		ret = xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001344:	e7ec      	b.n	8001320 <cmd_task+0x8>

08001346 <getnumber>:
		}
	}
}

uint8_t getnumber(uint8_t *p , int len)
{
 8001346:	b480      	push	{r7}
 8001348:	b085      	sub	sp, #20
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	6039      	str	r1, [r7, #0]

	int value ;

	if(len > 1)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	2b01      	cmp	r3, #1
 8001354:	dd0f      	ble.n	8001376 <getnumber+0x30>
	   value =  ( ((p[0]-48) * 10) + (p[1] - 48) );
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800135e:	4613      	mov	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	461a      	mov	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3301      	adds	r3, #1
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	3b30      	subs	r3, #48	; 0x30
 8001370:	4413      	add	r3, r2
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	e003      	b.n	800137e <getnumber+0x38>
	else
		value = p[0] - 48;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	3b30      	subs	r3, #48	; 0x30
 800137c:	60fb      	str	r3, [r7, #12]

	return value;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	b2db      	uxtb	r3, r3

}
 8001382:	4618      	mov	r0, r3
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
	...

08001390 <rtc_task>:

void rtc_task(void * param)
{
 8001390:	b590      	push	{r4, r7, lr}
 8001392:	b09b      	sub	sp, #108	; 0x6c
 8001394:	af02      	add	r7, sp, #8
 8001396:	6078      	str	r0, [r7, #4]
	const char* msg_rtc1 = "========================\n"
 8001398:	4bb2      	ldr	r3, [pc, #712]	; (8001664 <rtc_task+0x2d4>)
 800139a:	64fb      	str	r3, [r7, #76]	; 0x4c
							"|         RTC          |\n"
							"========================\n";

	const char* msg_rtc2 = "Configure Time            ----> 0\n"
 800139c:	4bb2      	ldr	r3, [pc, #712]	; (8001668 <rtc_task+0x2d8>)
 800139e:	64bb      	str	r3, [r7, #72]	; 0x48
							"Enable reporting          ----> 2\n"
							"Exit                      ----> 3\n"
							"Enter your choice here : ";


	const char *msg_rtc_hh = "Enter hour(1-12):";
 80013a0:	4bb2      	ldr	r3, [pc, #712]	; (800166c <rtc_task+0x2dc>)
 80013a2:	647b      	str	r3, [r7, #68]	; 0x44
	const char *msg_rtc_mm = "Enter minutes(0-59):";
 80013a4:	4bb2      	ldr	r3, [pc, #712]	; (8001670 <rtc_task+0x2e0>)
 80013a6:	643b      	str	r3, [r7, #64]	; 0x40
	const char *msg_rtc_ss = "Enter seconds(0-59):";
 80013a8:	4bb2      	ldr	r3, [pc, #712]	; (8001674 <rtc_task+0x2e4>)
 80013aa:	63fb      	str	r3, [r7, #60]	; 0x3c

	const char *msg_rtc_dd  = "Enter date(1-31):";
 80013ac:	4bb2      	ldr	r3, [pc, #712]	; (8001678 <rtc_task+0x2e8>)
 80013ae:	63bb      	str	r3, [r7, #56]	; 0x38
	const char *msg_rtc_mo  ="Enter month(1-12):";
 80013b0:	4bb2      	ldr	r3, [pc, #712]	; (800167c <rtc_task+0x2ec>)
 80013b2:	637b      	str	r3, [r7, #52]	; 0x34
	const char *msg_rtc_dow  = "Enter day(1-7 sun:1):";
 80013b4:	4bb2      	ldr	r3, [pc, #712]	; (8001680 <rtc_task+0x2f0>)
 80013b6:	633b      	str	r3, [r7, #48]	; 0x30
	const char *msg_rtc_yr  = "Enter year(0-99):";
 80013b8:	4bb2      	ldr	r3, [pc, #712]	; (8001684 <rtc_task+0x2f4>)
 80013ba:	62fb      	str	r3, [r7, #44]	; 0x2c

	const char *msg_conf = "Configuration successful\n";
 80013bc:	4bb2      	ldr	r3, [pc, #712]	; (8001688 <rtc_task+0x2f8>)
 80013be:	62bb      	str	r3, [r7, #40]	; 0x28
	const char *msg_rtc_report = "Enable time&date reporting(y/n)?: ";
 80013c0:	4bb2      	ldr	r3, [pc, #712]	; (800168c <rtc_task+0x2fc>)
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
#define DAY_CONFIG 		3


	while(1){
		/*Notify wait (wait till someone notifies) */
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80013c4:	f04f 33ff 	mov.w	r3, #4294967295
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	2300      	movs	r3, #0
 80013cc:	2200      	movs	r2, #0
 80013ce:	2100      	movs	r1, #0
 80013d0:	2000      	movs	r0, #0
 80013d2:	f004 fe01 	bl	8005fd8 <xTaskGenericNotifyWait>

		/*Print the menu and show current date and time information */
		xQueueSend(q_print,&msg_rtc1,portMAX_DELAY);
 80013d6:	4bae      	ldr	r3, [pc, #696]	; (8001690 <rtc_task+0x300>)
 80013d8:	6818      	ldr	r0, [r3, #0]
 80013da:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80013de:	2300      	movs	r3, #0
 80013e0:	f04f 32ff 	mov.w	r2, #4294967295
 80013e4:	f003 fbac 	bl	8004b40 <xQueueGenericSend>
		show_time_date();
 80013e8:	f7ff fc34 	bl	8000c54 <show_time_date>
		xQueueSend(q_print,&msg_rtc2,portMAX_DELAY);
 80013ec:	4ba8      	ldr	r3, [pc, #672]	; (8001690 <rtc_task+0x300>)
 80013ee:	6818      	ldr	r0, [r3, #0]
 80013f0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80013f4:	2300      	movs	r3, #0
 80013f6:	f04f 32ff 	mov.w	r2, #4294967295
 80013fa:	f003 fba1 	bl	8004b40 <xQueueGenericSend>


		while(curr_state != sMainMenu){
 80013fe:	bf00      	nop
 8001400:	e1e2      	b.n	80017c8 <rtc_task+0x438>

			/*Wait for command notification (Notify wait) */
			xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 8001402:	f107 0320 	add.w	r3, r7, #32
 8001406:	f04f 32ff 	mov.w	r2, #4294967295
 800140a:	9200      	str	r2, [sp, #0]
 800140c:	2200      	movs	r2, #0
 800140e:	2100      	movs	r1, #0
 8001410:	2000      	movs	r0, #0
 8001412:	f004 fde1 	bl	8005fd8 <xTaskGenericNotifyWait>
			cmd = (command_t*)cmd_addr;
 8001416:	6a3b      	ldr	r3, [r7, #32]
 8001418:	65fb      	str	r3, [r7, #92]	; 0x5c

			switch(curr_state)
 800141a:	4b9e      	ldr	r3, [pc, #632]	; (8001694 <rtc_task+0x304>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	3b02      	subs	r3, #2
 8001420:	2b03      	cmp	r3, #3
 8001422:	f200 81d1 	bhi.w	80017c8 <rtc_task+0x438>
 8001426:	a201      	add	r2, pc, #4	; (adr r2, 800142c <rtc_task+0x9c>)
 8001428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800142c:	0800143d 	.word	0x0800143d
 8001430:	080014ef 	.word	0x080014ef
 8001434:	080015dd 	.word	0x080015dd
 8001438:	08001745 	.word	0x08001745
			{
				case sRtcMenu:{
					/*process RTC menu commands */
					if(cmd->len == 1)
 800143c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d148      	bne.n	80014d6 <rtc_task+0x146>
					{
						menu_code = cmd->payload[0] - 48;
 8001444:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	3b30      	subs	r3, #48	; 0x30
 800144a:	653b      	str	r3, [r7, #80]	; 0x50
 800144c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800144e:	2b03      	cmp	r3, #3
 8001450:	d835      	bhi.n	80014be <rtc_task+0x12e>
 8001452:	a201      	add	r2, pc, #4	; (adr r2, 8001458 <rtc_task+0xc8>)
 8001454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001458:	08001469 	.word	0x08001469
 800145c:	08001483 	.word	0x08001483
 8001460:	0800149d 	.word	0x0800149d
 8001464:	080014b7 	.word	0x080014b7
						switch(menu_code)
						{
						case 0:
							curr_state = sRtcTimeConfig;
 8001468:	4b8a      	ldr	r3, [pc, #552]	; (8001694 <rtc_task+0x304>)
 800146a:	2203      	movs	r2, #3
 800146c:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_rtc_hh,portMAX_DELAY);
 800146e:	4b88      	ldr	r3, [pc, #544]	; (8001690 <rtc_task+0x300>)
 8001470:	6818      	ldr	r0, [r3, #0]
 8001472:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001476:	2300      	movs	r3, #0
 8001478:	f04f 32ff 	mov.w	r2, #4294967295
 800147c:	f003 fb60 	bl	8004b40 <xQueueGenericSend>
							break;
 8001480:	e034      	b.n	80014ec <rtc_task+0x15c>
						case 1:
							curr_state = sRtcDateConfig;
 8001482:	4b84      	ldr	r3, [pc, #528]	; (8001694 <rtc_task+0x304>)
 8001484:	2204      	movs	r2, #4
 8001486:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_rtc_dd,portMAX_DELAY);
 8001488:	4b81      	ldr	r3, [pc, #516]	; (8001690 <rtc_task+0x300>)
 800148a:	6818      	ldr	r0, [r3, #0]
 800148c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001490:	2300      	movs	r3, #0
 8001492:	f04f 32ff 	mov.w	r2, #4294967295
 8001496:	f003 fb53 	bl	8004b40 <xQueueGenericSend>
							break;
 800149a:	e027      	b.n	80014ec <rtc_task+0x15c>
						case 2 :
							curr_state = sRtcReport;
 800149c:	4b7d      	ldr	r3, [pc, #500]	; (8001694 <rtc_task+0x304>)
 800149e:	2205      	movs	r2, #5
 80014a0:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_rtc_report,portMAX_DELAY);
 80014a2:	4b7b      	ldr	r3, [pc, #492]	; (8001690 <rtc_task+0x300>)
 80014a4:	6818      	ldr	r0, [r3, #0]
 80014a6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80014aa:	2300      	movs	r3, #0
 80014ac:	f04f 32ff 	mov.w	r2, #4294967295
 80014b0:	f003 fb46 	bl	8004b40 <xQueueGenericSend>
							break;
 80014b4:	e01a      	b.n	80014ec <rtc_task+0x15c>
						case 3 :
							curr_state = sMainMenu;
 80014b6:	4b77      	ldr	r3, [pc, #476]	; (8001694 <rtc_task+0x304>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	701a      	strb	r2, [r3, #0]
							break;
 80014bc:	e016      	b.n	80014ec <rtc_task+0x15c>
						default:
							curr_state = sMainMenu;
 80014be:	4b75      	ldr	r3, [pc, #468]	; (8001694 <rtc_task+0x304>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80014c4:	4b72      	ldr	r3, [pc, #456]	; (8001690 <rtc_task+0x300>)
 80014c6:	6818      	ldr	r0, [r3, #0]
 80014c8:	2300      	movs	r3, #0
 80014ca:	f04f 32ff 	mov.w	r2, #4294967295
 80014ce:	4972      	ldr	r1, [pc, #456]	; (8001698 <rtc_task+0x308>)
 80014d0:	f003 fb36 	bl	8004b40 <xQueueGenericSend>
 80014d4:	e178      	b.n	80017c8 <rtc_task+0x438>
						}

					}else{
						curr_state = sMainMenu;
 80014d6:	4b6f      	ldr	r3, [pc, #444]	; (8001694 <rtc_task+0x304>)
 80014d8:	2200      	movs	r2, #0
 80014da:	701a      	strb	r2, [r3, #0]
						xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80014dc:	4b6c      	ldr	r3, [pc, #432]	; (8001690 <rtc_task+0x300>)
 80014de:	6818      	ldr	r0, [r3, #0]
 80014e0:	2300      	movs	r3, #0
 80014e2:	f04f 32ff 	mov.w	r2, #4294967295
 80014e6:	496c      	ldr	r1, [pc, #432]	; (8001698 <rtc_task+0x308>)
 80014e8:	f003 fb2a 	bl	8004b40 <xQueueGenericSend>
					}
					break;}
 80014ec:	e16c      	b.n	80017c8 <rtc_task+0x438>

				case sRtcTimeConfig:{
					/*get hh, mm, ss infor and configure RTC */
					/*take care of invalid entries */
					switch(rtc_state)
 80014ee:	4b6b      	ldr	r3, [pc, #428]	; (800169c <rtc_task+0x30c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d03b      	beq.n	800156e <rtc_task+0x1de>
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	f300 8166 	bgt.w	80017c8 <rtc_task+0x438>
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d002      	beq.n	8001506 <rtc_task+0x176>
 8001500:	2b01      	cmp	r3, #1
 8001502:	d01a      	beq.n	800153a <rtc_task+0x1aa>
 8001504:	e160      	b.n	80017c8 <rtc_task+0x438>
						{
							case HH_CONFIG:{
								uint8_t hour = getnumber(cmd->payload , cmd->len);
 8001506:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001508:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	4619      	mov	r1, r3
 800150e:	4610      	mov	r0, r2
 8001510:	f7ff ff19 	bl	8001346 <getnumber>
 8001514:	4603      	mov	r3, r0
 8001516:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
								time.Hours = hour;
 800151a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800151e:	733b      	strb	r3, [r7, #12]
								rtc_state = MM_CONFIG;
 8001520:	4b5e      	ldr	r3, [pc, #376]	; (800169c <rtc_task+0x30c>)
 8001522:	2201      	movs	r2, #1
 8001524:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_mm,portMAX_DELAY);
 8001526:	4b5a      	ldr	r3, [pc, #360]	; (8001690 <rtc_task+0x300>)
 8001528:	6818      	ldr	r0, [r3, #0]
 800152a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800152e:	2300      	movs	r3, #0
 8001530:	f04f 32ff 	mov.w	r2, #4294967295
 8001534:	f003 fb04 	bl	8004b40 <xQueueGenericSend>
								break;}
 8001538:	e04f      	b.n	80015da <rtc_task+0x24a>
							case MM_CONFIG:{
								uint8_t min = getnumber(cmd->payload , cmd->len);
 800153a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800153c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	4619      	mov	r1, r3
 8001542:	4610      	mov	r0, r2
 8001544:	f7ff feff 	bl	8001346 <getnumber>
 8001548:	4603      	mov	r3, r0
 800154a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
								time.Minutes = min;
 800154e:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001552:	737b      	strb	r3, [r7, #13]
								rtc_state = SS_CONFIG;
 8001554:	4b51      	ldr	r3, [pc, #324]	; (800169c <rtc_task+0x30c>)
 8001556:	2202      	movs	r2, #2
 8001558:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_ss,portMAX_DELAY);
 800155a:	4b4d      	ldr	r3, [pc, #308]	; (8001690 <rtc_task+0x300>)
 800155c:	6818      	ldr	r0, [r3, #0]
 800155e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001562:	2300      	movs	r3, #0
 8001564:	f04f 32ff 	mov.w	r2, #4294967295
 8001568:	f003 faea 	bl	8004b40 <xQueueGenericSend>
								break;}
 800156c:	e035      	b.n	80015da <rtc_task+0x24a>
							case SS_CONFIG:{
								uint8_t sec = getnumber(cmd->payload , cmd->len);
 800156e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001570:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	4619      	mov	r1, r3
 8001576:	4610      	mov	r0, r2
 8001578:	f7ff fee5 	bl	8001346 <getnumber>
 800157c:	4603      	mov	r3, r0
 800157e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
								time.Seconds = sec;
 8001582:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001586:	73bb      	strb	r3, [r7, #14]
								if(!validate_rtc_information(&time,NULL))
 8001588:	f107 030c 	add.w	r3, r7, #12
 800158c:	2100      	movs	r1, #0
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fbf4 	bl	8000d7c <validate_rtc_information>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d110      	bne.n	80015bc <rtc_task+0x22c>
								{
									rtc_configure_time(&time);
 800159a:	f107 030c 	add.w	r3, r7, #12
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fbc4 	bl	8000d2c <rtc_configure_time>
									xQueueSend(q_print,&msg_conf,portMAX_DELAY);
 80015a4:	4b3a      	ldr	r3, [pc, #232]	; (8001690 <rtc_task+0x300>)
 80015a6:	6818      	ldr	r0, [r3, #0]
 80015a8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80015ac:	2300      	movs	r3, #0
 80015ae:	f04f 32ff 	mov.w	r2, #4294967295
 80015b2:	f003 fac5 	bl	8004b40 <xQueueGenericSend>
									show_time_date();
 80015b6:	f7ff fb4d 	bl	8000c54 <show_time_date>
 80015ba:	e007      	b.n	80015cc <rtc_task+0x23c>
								}else
									xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80015bc:	4b34      	ldr	r3, [pc, #208]	; (8001690 <rtc_task+0x300>)
 80015be:	6818      	ldr	r0, [r3, #0]
 80015c0:	2300      	movs	r3, #0
 80015c2:	f04f 32ff 	mov.w	r2, #4294967295
 80015c6:	4934      	ldr	r1, [pc, #208]	; (8001698 <rtc_task+0x308>)
 80015c8:	f003 faba 	bl	8004b40 <xQueueGenericSend>

								curr_state = sMainMenu;
 80015cc:	4b31      	ldr	r3, [pc, #196]	; (8001694 <rtc_task+0x304>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	701a      	strb	r2, [r3, #0]
								rtc_state = 0;
 80015d2:	4b32      	ldr	r3, [pc, #200]	; (800169c <rtc_task+0x30c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
								break;}
 80015d8:	bf00      	nop
						}

					break;}
 80015da:	e0f5      	b.n	80017c8 <rtc_task+0x438>
				case sRtcDateConfig:{

					/*get date, month, day , year info and configure RTC */

					/*take care of invalid entries */
					switch(rtc_state)
 80015dc:	4b2f      	ldr	r3, [pc, #188]	; (800169c <rtc_task+0x30c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b03      	cmp	r3, #3
 80015e2:	f200 80f1 	bhi.w	80017c8 <rtc_task+0x438>
 80015e6:	a201      	add	r2, pc, #4	; (adr r2, 80015ec <rtc_task+0x25c>)
 80015e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ec:	080015fd 	.word	0x080015fd
 80015f0:	08001631 	.word	0x08001631
 80015f4:	080016d5 	.word	0x080016d5
 80015f8:	080016a1 	.word	0x080016a1
						{
							case DATE_CONFIG:{
								uint8_t d = getnumber(cmd->payload , cmd->len);
 80015fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80015fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	4619      	mov	r1, r3
 8001604:	4610      	mov	r0, r2
 8001606:	f7ff fe9e 	bl	8001346 <getnumber>
 800160a:	4603      	mov	r3, r0
 800160c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
								date.Date = d;
 8001610:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001614:	72bb      	strb	r3, [r7, #10]
								rtc_state = MONTH_CONFIG;
 8001616:	4b21      	ldr	r3, [pc, #132]	; (800169c <rtc_task+0x30c>)
 8001618:	2201      	movs	r2, #1
 800161a:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_mo,portMAX_DELAY);
 800161c:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <rtc_task+0x300>)
 800161e:	6818      	ldr	r0, [r3, #0]
 8001620:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001624:	2300      	movs	r3, #0
 8001626:	f04f 32ff 	mov.w	r2, #4294967295
 800162a:	f003 fa89 	bl	8004b40 <xQueueGenericSend>
								break;}
 800162e:	e088      	b.n	8001742 <rtc_task+0x3b2>
							case MONTH_CONFIG:{
								uint8_t month = getnumber(cmd->payload , cmd->len);
 8001630:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001632:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	4619      	mov	r1, r3
 8001638:	4610      	mov	r0, r2
 800163a:	f7ff fe84 	bl	8001346 <getnumber>
 800163e:	4603      	mov	r3, r0
 8001640:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
								date.Month = month;
 8001644:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001648:	727b      	strb	r3, [r7, #9]
								rtc_state = DAY_CONFIG;
 800164a:	4b14      	ldr	r3, [pc, #80]	; (800169c <rtc_task+0x30c>)
 800164c:	2203      	movs	r2, #3
 800164e:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_dow,portMAX_DELAY);
 8001650:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <rtc_task+0x300>)
 8001652:	6818      	ldr	r0, [r3, #0]
 8001654:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001658:	2300      	movs	r3, #0
 800165a:	f04f 32ff 	mov.w	r2, #4294967295
 800165e:	f003 fa6f 	bl	8004b40 <xQueueGenericSend>
								break;}
 8001662:	e06e      	b.n	8001742 <rtc_task+0x3b2>
 8001664:	080088b8 	.word	0x080088b8
 8001668:	08008904 	.word	0x08008904
 800166c:	080089a8 	.word	0x080089a8
 8001670:	080089bc 	.word	0x080089bc
 8001674:	080089d4 	.word	0x080089d4
 8001678:	080089ec 	.word	0x080089ec
 800167c:	08008a00 	.word	0x08008a00
 8001680:	08008a14 	.word	0x08008a14
 8001684:	08008a2c 	.word	0x08008a2c
 8001688:	08008a40 	.word	0x08008a40
 800168c:	08008a5c 	.word	0x08008a5c
 8001690:	2000011c 	.word	0x2000011c
 8001694:	20000121 	.word	0x20000121
 8001698:	20000010 	.word	0x20000010
 800169c:	200001c8 	.word	0x200001c8
							case DAY_CONFIG:{
								uint8_t day = getnumber(cmd->payload , cmd->len);
 80016a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80016a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	4619      	mov	r1, r3
 80016a8:	4610      	mov	r0, r2
 80016aa:	f7ff fe4c 	bl	8001346 <getnumber>
 80016ae:	4603      	mov	r3, r0
 80016b0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
								date.WeekDay = day;
 80016b4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80016b8:	723b      	strb	r3, [r7, #8]
								rtc_state = YEAR_CONFIG;
 80016ba:	4b4b      	ldr	r3, [pc, #300]	; (80017e8 <rtc_task+0x458>)
 80016bc:	2202      	movs	r2, #2
 80016be:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_yr,portMAX_DELAY);
 80016c0:	4b4a      	ldr	r3, [pc, #296]	; (80017ec <rtc_task+0x45c>)
 80016c2:	6818      	ldr	r0, [r3, #0]
 80016c4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80016c8:	2300      	movs	r3, #0
 80016ca:	f04f 32ff 	mov.w	r2, #4294967295
 80016ce:	f003 fa37 	bl	8004b40 <xQueueGenericSend>
								break;}
 80016d2:	e036      	b.n	8001742 <rtc_task+0x3b2>
							case YEAR_CONFIG:{
								uint8_t year = getnumber(cmd->payload , cmd->len);
 80016d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80016d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	4619      	mov	r1, r3
 80016dc:	4610      	mov	r0, r2
 80016de:	f7ff fe32 	bl	8001346 <getnumber>
 80016e2:	4603      	mov	r3, r0
 80016e4:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
								date.Year = year;
 80016e8:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80016ec:	72fb      	strb	r3, [r7, #11]

								if(!validate_rtc_information(NULL,&date))
 80016ee:	f107 0308 	add.w	r3, r7, #8
 80016f2:	4619      	mov	r1, r3
 80016f4:	2000      	movs	r0, #0
 80016f6:	f7ff fb41 	bl	8000d7c <validate_rtc_information>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d110      	bne.n	8001722 <rtc_task+0x392>
								{
									rtc_configure_date(&date);
 8001700:	f107 0308 	add.w	r3, r7, #8
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff fb29 	bl	8000d5c <rtc_configure_date>
									xQueueSend(q_print,&msg_conf,portMAX_DELAY);
 800170a:	4b38      	ldr	r3, [pc, #224]	; (80017ec <rtc_task+0x45c>)
 800170c:	6818      	ldr	r0, [r3, #0]
 800170e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001712:	2300      	movs	r3, #0
 8001714:	f04f 32ff 	mov.w	r2, #4294967295
 8001718:	f003 fa12 	bl	8004b40 <xQueueGenericSend>
									show_time_date();
 800171c:	f7ff fa9a 	bl	8000c54 <show_time_date>
 8001720:	e007      	b.n	8001732 <rtc_task+0x3a2>
								}else
									xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001722:	4b32      	ldr	r3, [pc, #200]	; (80017ec <rtc_task+0x45c>)
 8001724:	6818      	ldr	r0, [r3, #0]
 8001726:	2300      	movs	r3, #0
 8001728:	f04f 32ff 	mov.w	r2, #4294967295
 800172c:	4930      	ldr	r1, [pc, #192]	; (80017f0 <rtc_task+0x460>)
 800172e:	f003 fa07 	bl	8004b40 <xQueueGenericSend>

								curr_state = sMainMenu;
 8001732:	4b30      	ldr	r3, [pc, #192]	; (80017f4 <rtc_task+0x464>)
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]
								rtc_state = 0;
 8001738:	4b2b      	ldr	r3, [pc, #172]	; (80017e8 <rtc_task+0x458>)
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
								break;}
 800173e:	bf00      	nop
 8001740:	e042      	b.n	80017c8 <rtc_task+0x438>
						}


					break;}
 8001742:	e041      	b.n	80017c8 <rtc_task+0x438>

				case sRtcReport:{
					/*enable or disable RTC current time reporting over ITM printf */
					if(cmd->len == 1)
 8001744:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d131      	bne.n	80017b0 <rtc_task+0x420>
					{
						if(cmd->payload[0] == 'y'){
 800174c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b79      	cmp	r3, #121	; 0x79
 8001752:	d115      	bne.n	8001780 <rtc_task+0x3f0>
							if(xTimerIsTimerActive(rtc_timer) == pdFALSE)
 8001754:	4b28      	ldr	r3, [pc, #160]	; (80017f8 <rtc_task+0x468>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f005 fa65 	bl	8006c28 <xTimerIsTimerActive>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d12d      	bne.n	80017c0 <rtc_task+0x430>
								xTimerStart(rtc_timer,portMAX_DELAY);
 8001764:	4b24      	ldr	r3, [pc, #144]	; (80017f8 <rtc_task+0x468>)
 8001766:	681c      	ldr	r4, [r3, #0]
 8001768:	f004 f8b6 	bl	80058d8 <xTaskGetTickCount>
 800176c:	4602      	mov	r2, r0
 800176e:	f04f 33ff 	mov.w	r3, #4294967295
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	2300      	movs	r3, #0
 8001776:	2101      	movs	r1, #1
 8001778:	4620      	mov	r0, r4
 800177a:	f004 ff75 	bl	8006668 <xTimerGenericCommand>
 800177e:	e01f      	b.n	80017c0 <rtc_task+0x430>
						}else if (cmd->payload[0] == 'n'){
 8001780:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b6e      	cmp	r3, #110	; 0x6e
 8001786:	d10a      	bne.n	800179e <rtc_task+0x40e>
							xTimerStop(rtc_timer,portMAX_DELAY);
 8001788:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <rtc_task+0x468>)
 800178a:	6818      	ldr	r0, [r3, #0]
 800178c:	f04f 33ff 	mov.w	r3, #4294967295
 8001790:	9300      	str	r3, [sp, #0]
 8001792:	2300      	movs	r3, #0
 8001794:	2200      	movs	r2, #0
 8001796:	2103      	movs	r1, #3
 8001798:	f004 ff66 	bl	8006668 <xTimerGenericCommand>
 800179c:	e010      	b.n	80017c0 <rtc_task+0x430>
						}else{
							xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 800179e:	4b13      	ldr	r3, [pc, #76]	; (80017ec <rtc_task+0x45c>)
 80017a0:	6818      	ldr	r0, [r3, #0]
 80017a2:	2300      	movs	r3, #0
 80017a4:	f04f 32ff 	mov.w	r2, #4294967295
 80017a8:	4911      	ldr	r1, [pc, #68]	; (80017f0 <rtc_task+0x460>)
 80017aa:	f003 f9c9 	bl	8004b40 <xQueueGenericSend>
 80017ae:	e007      	b.n	80017c0 <rtc_task+0x430>
						}

					}else
					    xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80017b0:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <rtc_task+0x45c>)
 80017b2:	6818      	ldr	r0, [r3, #0]
 80017b4:	2300      	movs	r3, #0
 80017b6:	f04f 32ff 	mov.w	r2, #4294967295
 80017ba:	490d      	ldr	r1, [pc, #52]	; (80017f0 <rtc_task+0x460>)
 80017bc:	f003 f9c0 	bl	8004b40 <xQueueGenericSend>

					curr_state = sMainMenu;
 80017c0:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <rtc_task+0x464>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
					break;}
 80017c6:	bf00      	nop
		while(curr_state != sMainMenu){
 80017c8:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <rtc_task+0x464>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f47f ae18 	bne.w	8001402 <rtc_task+0x72>

		} //while end


		/*Notify menu task */
		xTaskNotify(handle_menu_task,0,eNoAction);
 80017d2:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <rtc_task+0x46c>)
 80017d4:	6818      	ldr	r0, [r3, #0]
 80017d6:	2300      	movs	r3, #0
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	2300      	movs	r3, #0
 80017dc:	2200      	movs	r2, #0
 80017de:	2100      	movs	r1, #0
 80017e0:	f004 fc7a 	bl	80060d8 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80017e4:	e5ee      	b.n	80013c4 <rtc_task+0x34>
 80017e6:	bf00      	nop
 80017e8:	200001c8 	.word	0x200001c8
 80017ec:	2000011c 	.word	0x2000011c
 80017f0:	20000010 	.word	0x20000010
 80017f4:	20000121 	.word	0x20000121
 80017f8:	20000128 	.word	0x20000128
 80017fc:	20000104 	.word	0x20000104

08001800 <print_task>:

		}//while super loop end
}

void print_task(void * param)
{
 8001800:	b590      	push	{r4, r7, lr}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
	uint32_t * msg;
	while(1)
	{
		xQueueReceive(q_print,&msg,portMAX_DELAY);
 8001808:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <print_task+0x38>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f107 010c 	add.w	r1, r7, #12
 8001810:	f04f 32ff 	mov.w	r2, #4294967295
 8001814:	4618      	mov	r0, r3
 8001816:	f003 fb23 	bl	8004e60 <xQueueReceive>
		HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen((char*)msg),HAL_MAX_DELAY);
 800181a:	68fc      	ldr	r4, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4618      	mov	r0, r3
 8001820:	f7fe fce8 	bl	80001f4 <strlen>
 8001824:	4603      	mov	r3, r0
 8001826:	b29a      	uxth	r2, r3
 8001828:	f04f 33ff 	mov.w	r3, #4294967295
 800182c:	4621      	mov	r1, r4
 800182e:	4803      	ldr	r0, [pc, #12]	; (800183c <print_task+0x3c>)
 8001830:	f001 ffee 	bl	8003810 <HAL_UART_Transmit>
		xQueueReceive(q_print,&msg,portMAX_DELAY);
 8001834:	e7e8      	b.n	8001808 <print_task+0x8>
 8001836:	bf00      	nop
 8001838:	2000011c 	.word	0x2000011c
 800183c:	200000bc 	.word	0x200000bc

08001840 <led_task>:
	}
}

void led_task(void * param)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b088      	sub	sp, #32
 8001844:	af02      	add	r7, sp, #8
 8001846:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	const char* msg_led ="====================\n"
 8001848:	4b2b      	ldr	r3, [pc, #172]	; (80018f8 <led_task+0xb8>)
 800184a:	60fb      	str	r3, [r7, #12]
                         "(none,e1)           \n"
                         "Enter your choice here:";

	while(1)
	{
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 800184c:	f04f 33ff 	mov.w	r3, #4294967295
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	2300      	movs	r3, #0
 8001854:	2200      	movs	r2, #0
 8001856:	2100      	movs	r1, #0
 8001858:	2000      	movs	r0, #0
 800185a:	f004 fbbd 	bl	8005fd8 <xTaskGenericNotifyWait>

		xQueueSend(q_print,&msg_led,portMAX_DELAY);
 800185e:	4b27      	ldr	r3, [pc, #156]	; (80018fc <led_task+0xbc>)
 8001860:	6818      	ldr	r0, [r3, #0]
 8001862:	f107 010c 	add.w	r1, r7, #12
 8001866:	2300      	movs	r3, #0
 8001868:	f04f 32ff 	mov.w	r2, #4294967295
 800186c:	f003 f968 	bl	8004b40 <xQueueGenericSend>

		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 8001870:	f107 0310 	add.w	r3, r7, #16
 8001874:	f04f 32ff 	mov.w	r2, #4294967295
 8001878:	9200      	str	r2, [sp, #0]
 800187a:	2200      	movs	r2, #0
 800187c:	2100      	movs	r1, #0
 800187e:	2000      	movs	r0, #0
 8001880:	f004 fbaa 	bl	8005fd8 <xTaskGenericNotifyWait>

		cmd = (command_t*)cmd_addr;
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	617b      	str	r3, [r7, #20]
		if(cmd->len <= 4)
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	2b04      	cmp	r3, #4
 800188e:	d81e      	bhi.n	80018ce <led_task+0x8e>
		{
			if(!strcmp((char*)cmd->payload,"none"))
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	491b      	ldr	r1, [pc, #108]	; (8001900 <led_task+0xc0>)
 8001894:	4618      	mov	r0, r3
 8001896:	f7fe fca3 	bl	80001e0 <strcmp>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d102      	bne.n	80018a6 <led_task+0x66>
				led_effect_stop();
 80018a0:	f7fe fe84 	bl	80005ac <led_effect_stop>
 80018a4:	e01b      	b.n	80018de <led_task+0x9e>
			else if(! strcmp((char*)cmd->payload,"e1"))
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	4916      	ldr	r1, [pc, #88]	; (8001904 <led_task+0xc4>)
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7fe fc98 	bl	80001e0 <strcmp>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d102      	bne.n	80018bc <led_task+0x7c>
				led_effect();
 80018b6:	f7fe fe8b 	bl	80005d0 <led_effect>
 80018ba:	e010      	b.n	80018de <led_task+0x9e>
			else
				xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80018bc:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <led_task+0xbc>)
 80018be:	6818      	ldr	r0, [r3, #0]
 80018c0:	2300      	movs	r3, #0
 80018c2:	f04f 32ff 	mov.w	r2, #4294967295
 80018c6:	4910      	ldr	r1, [pc, #64]	; (8001908 <led_task+0xc8>)
 80018c8:	f003 f93a 	bl	8004b40 <xQueueGenericSend>
 80018cc:	e007      	b.n	80018de <led_task+0x9e>
		}
		else
			xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80018ce:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <led_task+0xbc>)
 80018d0:	6818      	ldr	r0, [r3, #0]
 80018d2:	2300      	movs	r3, #0
 80018d4:	f04f 32ff 	mov.w	r2, #4294967295
 80018d8:	490b      	ldr	r1, [pc, #44]	; (8001908 <led_task+0xc8>)
 80018da:	f003 f931 	bl	8004b40 <xQueueGenericSend>

		curr_state = sMainMenu;
 80018de:	4b0b      	ldr	r3, [pc, #44]	; (800190c <led_task+0xcc>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	701a      	strb	r2, [r3, #0]
		xTaskNotify(handle_menu_task,0,eNoAction);
 80018e4:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <led_task+0xd0>)
 80018e6:	6818      	ldr	r0, [r3, #0]
 80018e8:	2300      	movs	r3, #0
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	2300      	movs	r3, #0
 80018ee:	2200      	movs	r2, #0
 80018f0:	2100      	movs	r1, #0
 80018f2:	f004 fbf1 	bl	80060d8 <xTaskGenericNotify>
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80018f6:	e7a9      	b.n	800184c <led_task+0xc>
 80018f8:	08008a80 	.word	0x08008a80
 80018fc:	2000011c 	.word	0x2000011c
 8001900:	08008aec 	.word	0x08008aec
 8001904:	08008af4 	.word	0x08008af4
 8001908:	20000010 	.word	0x20000010
 800190c:	20000121 	.word	0x20000121
 8001910:	20000104 	.word	0x20000104

08001914 <process_cmd>:
	}
}

void process_cmd(command_t *cmd)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af02      	add	r7, sp, #8
 800191a:	6078      	str	r0, [r7, #4]
	extract_cmd(cmd);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f000 f835 	bl	800198c <extract_cmd>

	switch(curr_state)
 8001922:	4b16      	ldr	r3, [pc, #88]	; (800197c <process_cmd+0x68>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b05      	cmp	r3, #5
 8001928:	dc24      	bgt.n	8001974 <process_cmd+0x60>
 800192a:	2b02      	cmp	r3, #2
 800192c:	da18      	bge.n	8001960 <process_cmd+0x4c>
 800192e:	2b00      	cmp	r3, #0
 8001930:	d002      	beq.n	8001938 <process_cmd+0x24>
 8001932:	2b01      	cmp	r3, #1
 8001934:	d00a      	beq.n	800194c <process_cmd+0x38>
	case sRtcReport:
		xTaskNotify(handle_rtc_task,(uint32_t)cmd,eSetValueWithOverwrite);
		break;

	}
}
 8001936:	e01d      	b.n	8001974 <process_cmd+0x60>
		xTaskNotify(handle_menu_task,(uint32_t)cmd,eSetValueWithOverwrite);
 8001938:	4b11      	ldr	r3, [pc, #68]	; (8001980 <process_cmd+0x6c>)
 800193a:	6818      	ldr	r0, [r3, #0]
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	2300      	movs	r3, #0
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	2303      	movs	r3, #3
 8001944:	2100      	movs	r1, #0
 8001946:	f004 fbc7 	bl	80060d8 <xTaskGenericNotify>
		break;
 800194a:	e013      	b.n	8001974 <process_cmd+0x60>
		xTaskNotify(handle_led_task,(uint32_t)cmd,eSetValueWithOverwrite);
 800194c:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <process_cmd+0x70>)
 800194e:	6818      	ldr	r0, [r3, #0]
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	2300      	movs	r3, #0
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	2303      	movs	r3, #3
 8001958:	2100      	movs	r1, #0
 800195a:	f004 fbbd 	bl	80060d8 <xTaskGenericNotify>
		break;
 800195e:	e009      	b.n	8001974 <process_cmd+0x60>
		xTaskNotify(handle_rtc_task,(uint32_t)cmd,eSetValueWithOverwrite);
 8001960:	4b09      	ldr	r3, [pc, #36]	; (8001988 <process_cmd+0x74>)
 8001962:	6818      	ldr	r0, [r3, #0]
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	2300      	movs	r3, #0
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	2303      	movs	r3, #3
 800196c:	2100      	movs	r1, #0
 800196e:	f004 fbb3 	bl	80060d8 <xTaskGenericNotify>
		break;
 8001972:	bf00      	nop
}
 8001974:	bf00      	nop
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20000121 	.word	0x20000121
 8001980:	20000104 	.word	0x20000104
 8001984:	20000110 	.word	0x20000110
 8001988:	20000114 	.word	0x20000114

0800198c <extract_cmd>:

int extract_cmd(command_t * cmd)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t status;

	status = uxQueueMessagesWaiting(q_data);
 8001994:	4b19      	ldr	r3, [pc, #100]	; (80019fc <extract_cmd+0x70>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f003 fbc4 	bl	8005126 <uxQueueMessagesWaiting>
 800199e:	4603      	mov	r3, r0
 80019a0:	613b      	str	r3, [r7, #16]
	if(!status) return -1;
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d102      	bne.n	80019ae <extract_cmd+0x22>
 80019a8:	f04f 33ff 	mov.w	r3, #4294967295
 80019ac:	e022      	b.n	80019f4 <extract_cmd+0x68>
	uint8_t i=0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	75fb      	strb	r3, [r7, #23]

	do{
		status = xQueueReceive(q_data,&item,0);
 80019b2:	4b12      	ldr	r3, [pc, #72]	; (80019fc <extract_cmd+0x70>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f107 010f 	add.w	r1, r7, #15
 80019ba:	2200      	movs	r2, #0
 80019bc:	4618      	mov	r0, r3
 80019be:	f003 fa4f 	bl	8004e60 <xQueueReceive>
 80019c2:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE) cmd->payload[i++] = item;
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d106      	bne.n	80019d8 <extract_cmd+0x4c>
 80019ca:	7dfb      	ldrb	r3, [r7, #23]
 80019cc:	1c5a      	adds	r2, r3, #1
 80019ce:	75fa      	strb	r2, [r7, #23]
 80019d0:	461a      	mov	r2, r3
 80019d2:	7bf9      	ldrb	r1, [r7, #15]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	5499      	strb	r1, [r3, r2]

	}while(item !='\n');
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
 80019da:	2b0a      	cmp	r3, #10
 80019dc:	d1e9      	bne.n	80019b2 <extract_cmd+0x26>

	cmd->payload[i-1]='\0';
 80019de:	7dfb      	ldrb	r3, [r7, #23]
 80019e0:	3b01      	subs	r3, #1
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	2100      	movs	r1, #0
 80019e6:	54d1      	strb	r1, [r2, r3]
	cmd->len =i-1;
 80019e8:	7dfb      	ldrb	r3, [r7, #23]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	461a      	mov	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	60da      	str	r2, [r3, #12]

	return 0;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3718      	adds	r7, #24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20000118 	.word	0x20000118

08001a00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a38 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a04:	f7ff fc02 	bl	800120c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a08:	480c      	ldr	r0, [pc, #48]	; (8001a3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a0a:	490d      	ldr	r1, [pc, #52]	; (8001a40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a0c:	4a0d      	ldr	r2, [pc, #52]	; (8001a44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a10:	e002      	b.n	8001a18 <LoopCopyDataInit>

08001a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a16:	3304      	adds	r3, #4

08001a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a1c:	d3f9      	bcc.n	8001a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a1e:	4a0a      	ldr	r2, [pc, #40]	; (8001a48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a20:	4c0a      	ldr	r4, [pc, #40]	; (8001a4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a24:	e001      	b.n	8001a2a <LoopFillZerobss>

08001a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a28:	3204      	adds	r2, #4

08001a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a2c:	d3fb      	bcc.n	8001a26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a2e:	f005 feff 	bl	8007830 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a32:	f7fe fe13 	bl	800065c <main>
  bx  lr    
 8001a36:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a40:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001a44:	08008b6c 	.word	0x08008b6c
  ldr r2, =_sbss
 8001a48:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001a4c:	200130c4 	.word	0x200130c4

08001a50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a50:	e7fe      	b.n	8001a50 <ADC_IRQHandler>
	...

08001a54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a58:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <HAL_Init+0x40>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a0d      	ldr	r2, [pc, #52]	; (8001a94 <HAL_Init+0x40>)
 8001a5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a64:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <HAL_Init+0x40>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a0a      	ldr	r2, [pc, #40]	; (8001a94 <HAL_Init+0x40>)
 8001a6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a70:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <HAL_Init+0x40>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a07      	ldr	r2, [pc, #28]	; (8001a94 <HAL_Init+0x40>)
 8001a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a7c:	2003      	movs	r0, #3
 8001a7e:	f000 f8d8 	bl	8001c32 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a82:	200f      	movs	r0, #15
 8001a84:	f7ff fa50 	bl	8000f28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a88:	f7ff f9aa 	bl	8000de0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40023c00 	.word	0x40023c00

08001a98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <HAL_IncTick+0x20>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4b06      	ldr	r3, [pc, #24]	; (8001abc <HAL_IncTick+0x24>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	4a04      	ldr	r2, [pc, #16]	; (8001abc <HAL_IncTick+0x24>)
 8001aaa:	6013      	str	r3, [r2, #0]
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	20000018 	.word	0x20000018
 8001abc:	200001cc 	.word	0x200001cc

08001ac0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac4:	4b03      	ldr	r3, [pc, #12]	; (8001ad4 <HAL_GetTick+0x14>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	200001cc 	.word	0x200001cc

08001ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <__NVIC_SetPriorityGrouping+0x44>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001af4:	4013      	ands	r3, r2
 8001af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b0a:	4a04      	ldr	r2, [pc, #16]	; (8001b1c <__NVIC_SetPriorityGrouping+0x44>)
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	60d3      	str	r3, [r2, #12]
}
 8001b10:	bf00      	nop
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b24:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <__NVIC_GetPriorityGrouping+0x18>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	0a1b      	lsrs	r3, r3, #8
 8001b2a:	f003 0307 	and.w	r3, r3, #7
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	db0b      	blt.n	8001b66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	f003 021f 	and.w	r2, r3, #31
 8001b54:	4907      	ldr	r1, [pc, #28]	; (8001b74 <__NVIC_EnableIRQ+0x38>)
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	095b      	lsrs	r3, r3, #5
 8001b5c:	2001      	movs	r0, #1
 8001b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	e000e100 	.word	0xe000e100

08001b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	6039      	str	r1, [r7, #0]
 8001b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	db0a      	blt.n	8001ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	490c      	ldr	r1, [pc, #48]	; (8001bc4 <__NVIC_SetPriority+0x4c>)
 8001b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b96:	0112      	lsls	r2, r2, #4
 8001b98:	b2d2      	uxtb	r2, r2
 8001b9a:	440b      	add	r3, r1
 8001b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ba0:	e00a      	b.n	8001bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	4908      	ldr	r1, [pc, #32]	; (8001bc8 <__NVIC_SetPriority+0x50>)
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	f003 030f 	and.w	r3, r3, #15
 8001bae:	3b04      	subs	r3, #4
 8001bb0:	0112      	lsls	r2, r2, #4
 8001bb2:	b2d2      	uxtb	r2, r2
 8001bb4:	440b      	add	r3, r1
 8001bb6:	761a      	strb	r2, [r3, #24]
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	e000e100 	.word	0xe000e100
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b089      	sub	sp, #36	; 0x24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	f1c3 0307 	rsb	r3, r3, #7
 8001be6:	2b04      	cmp	r3, #4
 8001be8:	bf28      	it	cs
 8001bea:	2304      	movcs	r3, #4
 8001bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	2b06      	cmp	r3, #6
 8001bf4:	d902      	bls.n	8001bfc <NVIC_EncodePriority+0x30>
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	3b03      	subs	r3, #3
 8001bfa:	e000      	b.n	8001bfe <NVIC_EncodePriority+0x32>
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c00:	f04f 32ff 	mov.w	r2, #4294967295
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	43da      	mvns	r2, r3
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	401a      	ands	r2, r3
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c14:	f04f 31ff 	mov.w	r1, #4294967295
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1e:	43d9      	mvns	r1, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c24:	4313      	orrs	r3, r2
         );
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3724      	adds	r7, #36	; 0x24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7ff ff4c 	bl	8001ad8 <__NVIC_SetPriorityGrouping>
}
 8001c40:	bf00      	nop
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
 8001c54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c5a:	f7ff ff61 	bl	8001b20 <__NVIC_GetPriorityGrouping>
 8001c5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	68b9      	ldr	r1, [r7, #8]
 8001c64:	6978      	ldr	r0, [r7, #20]
 8001c66:	f7ff ffb1 	bl	8001bcc <NVIC_EncodePriority>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c70:	4611      	mov	r1, r2
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff ff80 	bl	8001b78 <__NVIC_SetPriority>
}
 8001c78:	bf00      	nop
 8001c7a:	3718      	adds	r7, #24
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff ff54 	bl	8001b3c <__NVIC_EnableIRQ>
}
 8001c94:	bf00      	nop
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001caa:	f7ff ff09 	bl	8001ac0 <HAL_GetTick>
 8001cae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d008      	beq.n	8001cce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2280      	movs	r2, #128	; 0x80
 8001cc0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e052      	b.n	8001d74 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f022 0216 	bic.w	r2, r2, #22
 8001cdc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	695a      	ldr	r2, [r3, #20]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d103      	bne.n	8001cfe <HAL_DMA_Abort+0x62>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d007      	beq.n	8001d0e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 0208 	bic.w	r2, r2, #8
 8001d0c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 0201 	bic.w	r2, r2, #1
 8001d1c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d1e:	e013      	b.n	8001d48 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d20:	f7ff fece 	bl	8001ac0 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b05      	cmp	r3, #5
 8001d2c:	d90c      	bls.n	8001d48 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2220      	movs	r2, #32
 8001d32:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2203      	movs	r2, #3
 8001d38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e015      	b.n	8001d74 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1e4      	bne.n	8001d20 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5a:	223f      	movs	r2, #63	; 0x3f
 8001d5c:	409a      	lsls	r2, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d004      	beq.n	8001d9a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2280      	movs	r2, #128	; 0x80
 8001d94:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e00c      	b.n	8001db4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2205      	movs	r2, #5
 8001d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 0201 	bic.w	r2, r2, #1
 8001db0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b089      	sub	sp, #36	; 0x24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
 8001dda:	e159      	b.n	8002090 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ddc:	2201      	movs	r2, #1
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	4013      	ands	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	f040 8148 	bne.w	800208a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d005      	beq.n	8001e12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d130      	bne.n	8001e74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	2203      	movs	r2, #3
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43db      	mvns	r3, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4013      	ands	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	68da      	ldr	r2, [r3, #12]
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e48:	2201      	movs	r2, #1
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43db      	mvns	r3, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4013      	ands	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	091b      	lsrs	r3, r3, #4
 8001e5e:	f003 0201 	and.w	r2, r3, #1
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f003 0303 	and.w	r3, r3, #3
 8001e7c:	2b03      	cmp	r3, #3
 8001e7e:	d017      	beq.n	8001eb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4013      	ands	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 0303 	and.w	r3, r3, #3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d123      	bne.n	8001f04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	08da      	lsrs	r2, r3, #3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3208      	adds	r2, #8
 8001ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	220f      	movs	r2, #15
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4013      	ands	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	691a      	ldr	r2, [r3, #16]
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	08da      	lsrs	r2, r3, #3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3208      	adds	r2, #8
 8001efe:	69b9      	ldr	r1, [r7, #24]
 8001f00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	2203      	movs	r2, #3
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 0203 	and.w	r2, r3, #3
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 80a2 	beq.w	800208a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	4b57      	ldr	r3, [pc, #348]	; (80020a8 <HAL_GPIO_Init+0x2e8>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4e:	4a56      	ldr	r2, [pc, #344]	; (80020a8 <HAL_GPIO_Init+0x2e8>)
 8001f50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f54:	6453      	str	r3, [r2, #68]	; 0x44
 8001f56:	4b54      	ldr	r3, [pc, #336]	; (80020a8 <HAL_GPIO_Init+0x2e8>)
 8001f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f62:	4a52      	ldr	r2, [pc, #328]	; (80020ac <HAL_GPIO_Init+0x2ec>)
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	089b      	lsrs	r3, r3, #2
 8001f68:	3302      	adds	r3, #2
 8001f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	220f      	movs	r2, #15
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4013      	ands	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a49      	ldr	r2, [pc, #292]	; (80020b0 <HAL_GPIO_Init+0x2f0>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d019      	beq.n	8001fc2 <HAL_GPIO_Init+0x202>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a48      	ldr	r2, [pc, #288]	; (80020b4 <HAL_GPIO_Init+0x2f4>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d013      	beq.n	8001fbe <HAL_GPIO_Init+0x1fe>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a47      	ldr	r2, [pc, #284]	; (80020b8 <HAL_GPIO_Init+0x2f8>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d00d      	beq.n	8001fba <HAL_GPIO_Init+0x1fa>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a46      	ldr	r2, [pc, #280]	; (80020bc <HAL_GPIO_Init+0x2fc>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d007      	beq.n	8001fb6 <HAL_GPIO_Init+0x1f6>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a45      	ldr	r2, [pc, #276]	; (80020c0 <HAL_GPIO_Init+0x300>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d101      	bne.n	8001fb2 <HAL_GPIO_Init+0x1f2>
 8001fae:	2304      	movs	r3, #4
 8001fb0:	e008      	b.n	8001fc4 <HAL_GPIO_Init+0x204>
 8001fb2:	2307      	movs	r3, #7
 8001fb4:	e006      	b.n	8001fc4 <HAL_GPIO_Init+0x204>
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e004      	b.n	8001fc4 <HAL_GPIO_Init+0x204>
 8001fba:	2302      	movs	r3, #2
 8001fbc:	e002      	b.n	8001fc4 <HAL_GPIO_Init+0x204>
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e000      	b.n	8001fc4 <HAL_GPIO_Init+0x204>
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	69fa      	ldr	r2, [r7, #28]
 8001fc6:	f002 0203 	and.w	r2, r2, #3
 8001fca:	0092      	lsls	r2, r2, #2
 8001fcc:	4093      	lsls	r3, r2
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fd4:	4935      	ldr	r1, [pc, #212]	; (80020ac <HAL_GPIO_Init+0x2ec>)
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	089b      	lsrs	r3, r3, #2
 8001fda:	3302      	adds	r3, #2
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fe2:	4b38      	ldr	r3, [pc, #224]	; (80020c4 <HAL_GPIO_Init+0x304>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	43db      	mvns	r3, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	4313      	orrs	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002006:	4a2f      	ldr	r2, [pc, #188]	; (80020c4 <HAL_GPIO_Init+0x304>)
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800200c:	4b2d      	ldr	r3, [pc, #180]	; (80020c4 <HAL_GPIO_Init+0x304>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	43db      	mvns	r3, r3
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4013      	ands	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	4313      	orrs	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002030:	4a24      	ldr	r2, [pc, #144]	; (80020c4 <HAL_GPIO_Init+0x304>)
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002036:	4b23      	ldr	r3, [pc, #140]	; (80020c4 <HAL_GPIO_Init+0x304>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	43db      	mvns	r3, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4013      	ands	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	4313      	orrs	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800205a:	4a1a      	ldr	r2, [pc, #104]	; (80020c4 <HAL_GPIO_Init+0x304>)
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002060:	4b18      	ldr	r3, [pc, #96]	; (80020c4 <HAL_GPIO_Init+0x304>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	43db      	mvns	r3, r3
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4013      	ands	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	4313      	orrs	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002084:	4a0f      	ldr	r2, [pc, #60]	; (80020c4 <HAL_GPIO_Init+0x304>)
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	3301      	adds	r3, #1
 800208e:	61fb      	str	r3, [r7, #28]
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	2b0f      	cmp	r3, #15
 8002094:	f67f aea2 	bls.w	8001ddc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002098:	bf00      	nop
 800209a:	bf00      	nop
 800209c:	3724      	adds	r7, #36	; 0x24
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	40023800 	.word	0x40023800
 80020ac:	40013800 	.word	0x40013800
 80020b0:	40020000 	.word	0x40020000
 80020b4:	40020400 	.word	0x40020400
 80020b8:	40020800 	.word	0x40020800
 80020bc:	40020c00 	.word	0x40020c00
 80020c0:	40021000 	.word	0x40021000
 80020c4:	40013c00 	.word	0x40013c00

080020c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	460b      	mov	r3, r1
 80020d2:	807b      	strh	r3, [r7, #2]
 80020d4:	4613      	mov	r3, r2
 80020d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020d8:	787b      	ldrb	r3, [r7, #1]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020de:	887a      	ldrh	r2, [r7, #2]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020e4:	e003      	b.n	80020ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020e6:	887b      	ldrh	r3, [r7, #2]
 80020e8:	041a      	lsls	r2, r3, #16
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	619a      	str	r2, [r3, #24]
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
	...

080020fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e267      	b.n	80025de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b00      	cmp	r3, #0
 8002118:	d075      	beq.n	8002206 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800211a:	4b88      	ldr	r3, [pc, #544]	; (800233c <HAL_RCC_OscConfig+0x240>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 030c 	and.w	r3, r3, #12
 8002122:	2b04      	cmp	r3, #4
 8002124:	d00c      	beq.n	8002140 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002126:	4b85      	ldr	r3, [pc, #532]	; (800233c <HAL_RCC_OscConfig+0x240>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800212e:	2b08      	cmp	r3, #8
 8002130:	d112      	bne.n	8002158 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002132:	4b82      	ldr	r3, [pc, #520]	; (800233c <HAL_RCC_OscConfig+0x240>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800213a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800213e:	d10b      	bne.n	8002158 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002140:	4b7e      	ldr	r3, [pc, #504]	; (800233c <HAL_RCC_OscConfig+0x240>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d05b      	beq.n	8002204 <HAL_RCC_OscConfig+0x108>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d157      	bne.n	8002204 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e242      	b.n	80025de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002160:	d106      	bne.n	8002170 <HAL_RCC_OscConfig+0x74>
 8002162:	4b76      	ldr	r3, [pc, #472]	; (800233c <HAL_RCC_OscConfig+0x240>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a75      	ldr	r2, [pc, #468]	; (800233c <HAL_RCC_OscConfig+0x240>)
 8002168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800216c:	6013      	str	r3, [r2, #0]
 800216e:	e01d      	b.n	80021ac <HAL_RCC_OscConfig+0xb0>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002178:	d10c      	bne.n	8002194 <HAL_RCC_OscConfig+0x98>
 800217a:	4b70      	ldr	r3, [pc, #448]	; (800233c <HAL_RCC_OscConfig+0x240>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a6f      	ldr	r2, [pc, #444]	; (800233c <HAL_RCC_OscConfig+0x240>)
 8002180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	4b6d      	ldr	r3, [pc, #436]	; (800233c <HAL_RCC_OscConfig+0x240>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a6c      	ldr	r2, [pc, #432]	; (800233c <HAL_RCC_OscConfig+0x240>)
 800218c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	e00b      	b.n	80021ac <HAL_RCC_OscConfig+0xb0>
 8002194:	4b69      	ldr	r3, [pc, #420]	; (800233c <HAL_RCC_OscConfig+0x240>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a68      	ldr	r2, [pc, #416]	; (800233c <HAL_RCC_OscConfig+0x240>)
 800219a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800219e:	6013      	str	r3, [r2, #0]
 80021a0:	4b66      	ldr	r3, [pc, #408]	; (800233c <HAL_RCC_OscConfig+0x240>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a65      	ldr	r2, [pc, #404]	; (800233c <HAL_RCC_OscConfig+0x240>)
 80021a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d013      	beq.n	80021dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b4:	f7ff fc84 	bl	8001ac0 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021bc:	f7ff fc80 	bl	8001ac0 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b64      	cmp	r3, #100	; 0x64
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e207      	b.n	80025de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ce:	4b5b      	ldr	r3, [pc, #364]	; (800233c <HAL_RCC_OscConfig+0x240>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0f0      	beq.n	80021bc <HAL_RCC_OscConfig+0xc0>
 80021da:	e014      	b.n	8002206 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021dc:	f7ff fc70 	bl	8001ac0 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021e4:	f7ff fc6c 	bl	8001ac0 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b64      	cmp	r3, #100	; 0x64
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e1f3      	b.n	80025de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021f6:	4b51      	ldr	r3, [pc, #324]	; (800233c <HAL_RCC_OscConfig+0x240>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f0      	bne.n	80021e4 <HAL_RCC_OscConfig+0xe8>
 8002202:	e000      	b.n	8002206 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d063      	beq.n	80022da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002212:	4b4a      	ldr	r3, [pc, #296]	; (800233c <HAL_RCC_OscConfig+0x240>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 030c 	and.w	r3, r3, #12
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00b      	beq.n	8002236 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800221e:	4b47      	ldr	r3, [pc, #284]	; (800233c <HAL_RCC_OscConfig+0x240>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002226:	2b08      	cmp	r3, #8
 8002228:	d11c      	bne.n	8002264 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800222a:	4b44      	ldr	r3, [pc, #272]	; (800233c <HAL_RCC_OscConfig+0x240>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d116      	bne.n	8002264 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002236:	4b41      	ldr	r3, [pc, #260]	; (800233c <HAL_RCC_OscConfig+0x240>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d005      	beq.n	800224e <HAL_RCC_OscConfig+0x152>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d001      	beq.n	800224e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e1c7      	b.n	80025de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800224e:	4b3b      	ldr	r3, [pc, #236]	; (800233c <HAL_RCC_OscConfig+0x240>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	4937      	ldr	r1, [pc, #220]	; (800233c <HAL_RCC_OscConfig+0x240>)
 800225e:	4313      	orrs	r3, r2
 8002260:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002262:	e03a      	b.n	80022da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d020      	beq.n	80022ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800226c:	4b34      	ldr	r3, [pc, #208]	; (8002340 <HAL_RCC_OscConfig+0x244>)
 800226e:	2201      	movs	r2, #1
 8002270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002272:	f7ff fc25 	bl	8001ac0 <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002278:	e008      	b.n	800228c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800227a:	f7ff fc21 	bl	8001ac0 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e1a8      	b.n	80025de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800228c:	4b2b      	ldr	r3, [pc, #172]	; (800233c <HAL_RCC_OscConfig+0x240>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0f0      	beq.n	800227a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002298:	4b28      	ldr	r3, [pc, #160]	; (800233c <HAL_RCC_OscConfig+0x240>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	4925      	ldr	r1, [pc, #148]	; (800233c <HAL_RCC_OscConfig+0x240>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	600b      	str	r3, [r1, #0]
 80022ac:	e015      	b.n	80022da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ae:	4b24      	ldr	r3, [pc, #144]	; (8002340 <HAL_RCC_OscConfig+0x244>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b4:	f7ff fc04 	bl	8001ac0 <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022bc:	f7ff fc00 	bl	8001ac0 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e187      	b.n	80025de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ce:	4b1b      	ldr	r3, [pc, #108]	; (800233c <HAL_RCC_OscConfig+0x240>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1f0      	bne.n	80022bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d036      	beq.n	8002354 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d016      	beq.n	800231c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ee:	4b15      	ldr	r3, [pc, #84]	; (8002344 <HAL_RCC_OscConfig+0x248>)
 80022f0:	2201      	movs	r2, #1
 80022f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f4:	f7ff fbe4 	bl	8001ac0 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022fc:	f7ff fbe0 	bl	8001ac0 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e167      	b.n	80025de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800230e:	4b0b      	ldr	r3, [pc, #44]	; (800233c <HAL_RCC_OscConfig+0x240>)
 8002310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d0f0      	beq.n	80022fc <HAL_RCC_OscConfig+0x200>
 800231a:	e01b      	b.n	8002354 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800231c:	4b09      	ldr	r3, [pc, #36]	; (8002344 <HAL_RCC_OscConfig+0x248>)
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002322:	f7ff fbcd 	bl	8001ac0 <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002328:	e00e      	b.n	8002348 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800232a:	f7ff fbc9 	bl	8001ac0 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d907      	bls.n	8002348 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e150      	b.n	80025de <HAL_RCC_OscConfig+0x4e2>
 800233c:	40023800 	.word	0x40023800
 8002340:	42470000 	.word	0x42470000
 8002344:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002348:	4b88      	ldr	r3, [pc, #544]	; (800256c <HAL_RCC_OscConfig+0x470>)
 800234a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1ea      	bne.n	800232a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0304 	and.w	r3, r3, #4
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 8097 	beq.w	8002490 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002362:	2300      	movs	r3, #0
 8002364:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002366:	4b81      	ldr	r3, [pc, #516]	; (800256c <HAL_RCC_OscConfig+0x470>)
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10f      	bne.n	8002392 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	4b7d      	ldr	r3, [pc, #500]	; (800256c <HAL_RCC_OscConfig+0x470>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	4a7c      	ldr	r2, [pc, #496]	; (800256c <HAL_RCC_OscConfig+0x470>)
 800237c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002380:	6413      	str	r3, [r2, #64]	; 0x40
 8002382:	4b7a      	ldr	r3, [pc, #488]	; (800256c <HAL_RCC_OscConfig+0x470>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238a:	60bb      	str	r3, [r7, #8]
 800238c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800238e:	2301      	movs	r3, #1
 8002390:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002392:	4b77      	ldr	r3, [pc, #476]	; (8002570 <HAL_RCC_OscConfig+0x474>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239a:	2b00      	cmp	r3, #0
 800239c:	d118      	bne.n	80023d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800239e:	4b74      	ldr	r3, [pc, #464]	; (8002570 <HAL_RCC_OscConfig+0x474>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a73      	ldr	r2, [pc, #460]	; (8002570 <HAL_RCC_OscConfig+0x474>)
 80023a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023aa:	f7ff fb89 	bl	8001ac0 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023b2:	f7ff fb85 	bl	8001ac0 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e10c      	b.n	80025de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c4:	4b6a      	ldr	r3, [pc, #424]	; (8002570 <HAL_RCC_OscConfig+0x474>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0f0      	beq.n	80023b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d106      	bne.n	80023e6 <HAL_RCC_OscConfig+0x2ea>
 80023d8:	4b64      	ldr	r3, [pc, #400]	; (800256c <HAL_RCC_OscConfig+0x470>)
 80023da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023dc:	4a63      	ldr	r2, [pc, #396]	; (800256c <HAL_RCC_OscConfig+0x470>)
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	6713      	str	r3, [r2, #112]	; 0x70
 80023e4:	e01c      	b.n	8002420 <HAL_RCC_OscConfig+0x324>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	2b05      	cmp	r3, #5
 80023ec:	d10c      	bne.n	8002408 <HAL_RCC_OscConfig+0x30c>
 80023ee:	4b5f      	ldr	r3, [pc, #380]	; (800256c <HAL_RCC_OscConfig+0x470>)
 80023f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f2:	4a5e      	ldr	r2, [pc, #376]	; (800256c <HAL_RCC_OscConfig+0x470>)
 80023f4:	f043 0304 	orr.w	r3, r3, #4
 80023f8:	6713      	str	r3, [r2, #112]	; 0x70
 80023fa:	4b5c      	ldr	r3, [pc, #368]	; (800256c <HAL_RCC_OscConfig+0x470>)
 80023fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fe:	4a5b      	ldr	r2, [pc, #364]	; (800256c <HAL_RCC_OscConfig+0x470>)
 8002400:	f043 0301 	orr.w	r3, r3, #1
 8002404:	6713      	str	r3, [r2, #112]	; 0x70
 8002406:	e00b      	b.n	8002420 <HAL_RCC_OscConfig+0x324>
 8002408:	4b58      	ldr	r3, [pc, #352]	; (800256c <HAL_RCC_OscConfig+0x470>)
 800240a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240c:	4a57      	ldr	r2, [pc, #348]	; (800256c <HAL_RCC_OscConfig+0x470>)
 800240e:	f023 0301 	bic.w	r3, r3, #1
 8002412:	6713      	str	r3, [r2, #112]	; 0x70
 8002414:	4b55      	ldr	r3, [pc, #340]	; (800256c <HAL_RCC_OscConfig+0x470>)
 8002416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002418:	4a54      	ldr	r2, [pc, #336]	; (800256c <HAL_RCC_OscConfig+0x470>)
 800241a:	f023 0304 	bic.w	r3, r3, #4
 800241e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d015      	beq.n	8002454 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002428:	f7ff fb4a 	bl	8001ac0 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800242e:	e00a      	b.n	8002446 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002430:	f7ff fb46 	bl	8001ac0 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	f241 3288 	movw	r2, #5000	; 0x1388
 800243e:	4293      	cmp	r3, r2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e0cb      	b.n	80025de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002446:	4b49      	ldr	r3, [pc, #292]	; (800256c <HAL_RCC_OscConfig+0x470>)
 8002448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0ee      	beq.n	8002430 <HAL_RCC_OscConfig+0x334>
 8002452:	e014      	b.n	800247e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002454:	f7ff fb34 	bl	8001ac0 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800245a:	e00a      	b.n	8002472 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800245c:	f7ff fb30 	bl	8001ac0 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	f241 3288 	movw	r2, #5000	; 0x1388
 800246a:	4293      	cmp	r3, r2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e0b5      	b.n	80025de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002472:	4b3e      	ldr	r3, [pc, #248]	; (800256c <HAL_RCC_OscConfig+0x470>)
 8002474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1ee      	bne.n	800245c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800247e:	7dfb      	ldrb	r3, [r7, #23]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d105      	bne.n	8002490 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002484:	4b39      	ldr	r3, [pc, #228]	; (800256c <HAL_RCC_OscConfig+0x470>)
 8002486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002488:	4a38      	ldr	r2, [pc, #224]	; (800256c <HAL_RCC_OscConfig+0x470>)
 800248a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800248e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 80a1 	beq.w	80025dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800249a:	4b34      	ldr	r3, [pc, #208]	; (800256c <HAL_RCC_OscConfig+0x470>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 030c 	and.w	r3, r3, #12
 80024a2:	2b08      	cmp	r3, #8
 80024a4:	d05c      	beq.n	8002560 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d141      	bne.n	8002532 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ae:	4b31      	ldr	r3, [pc, #196]	; (8002574 <HAL_RCC_OscConfig+0x478>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b4:	f7ff fb04 	bl	8001ac0 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024bc:	f7ff fb00 	bl	8001ac0 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e087      	b.n	80025de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ce:	4b27      	ldr	r3, [pc, #156]	; (800256c <HAL_RCC_OscConfig+0x470>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1f0      	bne.n	80024bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69da      	ldr	r2, [r3, #28]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	431a      	orrs	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	019b      	lsls	r3, r3, #6
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f0:	085b      	lsrs	r3, r3, #1
 80024f2:	3b01      	subs	r3, #1
 80024f4:	041b      	lsls	r3, r3, #16
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fc:	061b      	lsls	r3, r3, #24
 80024fe:	491b      	ldr	r1, [pc, #108]	; (800256c <HAL_RCC_OscConfig+0x470>)
 8002500:	4313      	orrs	r3, r2
 8002502:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002504:	4b1b      	ldr	r3, [pc, #108]	; (8002574 <HAL_RCC_OscConfig+0x478>)
 8002506:	2201      	movs	r2, #1
 8002508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250a:	f7ff fad9 	bl	8001ac0 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002512:	f7ff fad5 	bl	8001ac0 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e05c      	b.n	80025de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002524:	4b11      	ldr	r3, [pc, #68]	; (800256c <HAL_RCC_OscConfig+0x470>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0f0      	beq.n	8002512 <HAL_RCC_OscConfig+0x416>
 8002530:	e054      	b.n	80025dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002532:	4b10      	ldr	r3, [pc, #64]	; (8002574 <HAL_RCC_OscConfig+0x478>)
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002538:	f7ff fac2 	bl	8001ac0 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002540:	f7ff fabe 	bl	8001ac0 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e045      	b.n	80025de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002552:	4b06      	ldr	r3, [pc, #24]	; (800256c <HAL_RCC_OscConfig+0x470>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0x444>
 800255e:	e03d      	b.n	80025dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d107      	bne.n	8002578 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e038      	b.n	80025de <HAL_RCC_OscConfig+0x4e2>
 800256c:	40023800 	.word	0x40023800
 8002570:	40007000 	.word	0x40007000
 8002574:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002578:	4b1b      	ldr	r3, [pc, #108]	; (80025e8 <HAL_RCC_OscConfig+0x4ec>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d028      	beq.n	80025d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002590:	429a      	cmp	r2, r3
 8002592:	d121      	bne.n	80025d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800259e:	429a      	cmp	r2, r3
 80025a0:	d11a      	bne.n	80025d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025a8:	4013      	ands	r3, r2
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d111      	bne.n	80025d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025be:	085b      	lsrs	r3, r3, #1
 80025c0:	3b01      	subs	r3, #1
 80025c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d107      	bne.n	80025d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d001      	beq.n	80025dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e000      	b.n	80025de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40023800 	.word	0x40023800

080025ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e0cc      	b.n	800279a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002600:	4b68      	ldr	r3, [pc, #416]	; (80027a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d90c      	bls.n	8002628 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260e:	4b65      	ldr	r3, [pc, #404]	; (80027a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002616:	4b63      	ldr	r3, [pc, #396]	; (80027a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	429a      	cmp	r2, r3
 8002622:	d001      	beq.n	8002628 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e0b8      	b.n	800279a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d020      	beq.n	8002676 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b00      	cmp	r3, #0
 800263e:	d005      	beq.n	800264c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002640:	4b59      	ldr	r3, [pc, #356]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	4a58      	ldr	r2, [pc, #352]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800264a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0308 	and.w	r3, r3, #8
 8002654:	2b00      	cmp	r3, #0
 8002656:	d005      	beq.n	8002664 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002658:	4b53      	ldr	r3, [pc, #332]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	4a52      	ldr	r2, [pc, #328]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 800265e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002662:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002664:	4b50      	ldr	r3, [pc, #320]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	494d      	ldr	r1, [pc, #308]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002672:	4313      	orrs	r3, r2
 8002674:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d044      	beq.n	800270c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d107      	bne.n	800269a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268a:	4b47      	ldr	r3, [pc, #284]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d119      	bne.n	80026ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e07f      	b.n	800279a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d003      	beq.n	80026aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026a6:	2b03      	cmp	r3, #3
 80026a8:	d107      	bne.n	80026ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026aa:	4b3f      	ldr	r3, [pc, #252]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d109      	bne.n	80026ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e06f      	b.n	800279a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ba:	4b3b      	ldr	r3, [pc, #236]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e067      	b.n	800279a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ca:	4b37      	ldr	r3, [pc, #220]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f023 0203 	bic.w	r2, r3, #3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	4934      	ldr	r1, [pc, #208]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026dc:	f7ff f9f0 	bl	8001ac0 <HAL_GetTick>
 80026e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e2:	e00a      	b.n	80026fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e4:	f7ff f9ec 	bl	8001ac0 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e04f      	b.n	800279a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fa:	4b2b      	ldr	r3, [pc, #172]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 020c 	and.w	r2, r3, #12
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	429a      	cmp	r2, r3
 800270a:	d1eb      	bne.n	80026e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800270c:	4b25      	ldr	r3, [pc, #148]	; (80027a4 <HAL_RCC_ClockConfig+0x1b8>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	429a      	cmp	r2, r3
 8002718:	d20c      	bcs.n	8002734 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271a:	4b22      	ldr	r3, [pc, #136]	; (80027a4 <HAL_RCC_ClockConfig+0x1b8>)
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002722:	4b20      	ldr	r3, [pc, #128]	; (80027a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	429a      	cmp	r2, r3
 800272e:	d001      	beq.n	8002734 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e032      	b.n	800279a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	2b00      	cmp	r3, #0
 800273e:	d008      	beq.n	8002752 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002740:	4b19      	ldr	r3, [pc, #100]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	4916      	ldr	r1, [pc, #88]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 800274e:	4313      	orrs	r3, r2
 8002750:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0308 	and.w	r3, r3, #8
 800275a:	2b00      	cmp	r3, #0
 800275c:	d009      	beq.n	8002772 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800275e:	4b12      	ldr	r3, [pc, #72]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	490e      	ldr	r1, [pc, #56]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 800276e:	4313      	orrs	r3, r2
 8002770:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002772:	f000 f821 	bl	80027b8 <HAL_RCC_GetSysClockFreq>
 8002776:	4602      	mov	r2, r0
 8002778:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <HAL_RCC_ClockConfig+0x1bc>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	091b      	lsrs	r3, r3, #4
 800277e:	f003 030f 	and.w	r3, r3, #15
 8002782:	490a      	ldr	r1, [pc, #40]	; (80027ac <HAL_RCC_ClockConfig+0x1c0>)
 8002784:	5ccb      	ldrb	r3, [r1, r3]
 8002786:	fa22 f303 	lsr.w	r3, r2, r3
 800278a:	4a09      	ldr	r2, [pc, #36]	; (80027b0 <HAL_RCC_ClockConfig+0x1c4>)
 800278c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800278e:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f7fe fbc8 	bl	8000f28 <HAL_InitTick>

  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40023c00 	.word	0x40023c00
 80027a8:	40023800 	.word	0x40023800
 80027ac:	08008b10 	.word	0x08008b10
 80027b0:	2000000c 	.word	0x2000000c
 80027b4:	20000014 	.word	0x20000014

080027b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027bc:	b094      	sub	sp, #80	; 0x50
 80027be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027c0:	2300      	movs	r3, #0
 80027c2:	647b      	str	r3, [r7, #68]	; 0x44
 80027c4:	2300      	movs	r3, #0
 80027c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027c8:	2300      	movs	r3, #0
 80027ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027d0:	4b79      	ldr	r3, [pc, #484]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 030c 	and.w	r3, r3, #12
 80027d8:	2b08      	cmp	r3, #8
 80027da:	d00d      	beq.n	80027f8 <HAL_RCC_GetSysClockFreq+0x40>
 80027dc:	2b08      	cmp	r3, #8
 80027de:	f200 80e1 	bhi.w	80029a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d002      	beq.n	80027ec <HAL_RCC_GetSysClockFreq+0x34>
 80027e6:	2b04      	cmp	r3, #4
 80027e8:	d003      	beq.n	80027f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80027ea:	e0db      	b.n	80029a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027ec:	4b73      	ldr	r3, [pc, #460]	; (80029bc <HAL_RCC_GetSysClockFreq+0x204>)
 80027ee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80027f0:	e0db      	b.n	80029aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027f2:	4b73      	ldr	r3, [pc, #460]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80027f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027f6:	e0d8      	b.n	80029aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027f8:	4b6f      	ldr	r3, [pc, #444]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002800:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002802:	4b6d      	ldr	r3, [pc, #436]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d063      	beq.n	80028d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800280e:	4b6a      	ldr	r3, [pc, #424]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	099b      	lsrs	r3, r3, #6
 8002814:	2200      	movs	r2, #0
 8002816:	63bb      	str	r3, [r7, #56]	; 0x38
 8002818:	63fa      	str	r2, [r7, #60]	; 0x3c
 800281a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800281c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002820:	633b      	str	r3, [r7, #48]	; 0x30
 8002822:	2300      	movs	r3, #0
 8002824:	637b      	str	r3, [r7, #52]	; 0x34
 8002826:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800282a:	4622      	mov	r2, r4
 800282c:	462b      	mov	r3, r5
 800282e:	f04f 0000 	mov.w	r0, #0
 8002832:	f04f 0100 	mov.w	r1, #0
 8002836:	0159      	lsls	r1, r3, #5
 8002838:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800283c:	0150      	lsls	r0, r2, #5
 800283e:	4602      	mov	r2, r0
 8002840:	460b      	mov	r3, r1
 8002842:	4621      	mov	r1, r4
 8002844:	1a51      	subs	r1, r2, r1
 8002846:	6139      	str	r1, [r7, #16]
 8002848:	4629      	mov	r1, r5
 800284a:	eb63 0301 	sbc.w	r3, r3, r1
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	f04f 0300 	mov.w	r3, #0
 8002858:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800285c:	4659      	mov	r1, fp
 800285e:	018b      	lsls	r3, r1, #6
 8002860:	4651      	mov	r1, sl
 8002862:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002866:	4651      	mov	r1, sl
 8002868:	018a      	lsls	r2, r1, #6
 800286a:	4651      	mov	r1, sl
 800286c:	ebb2 0801 	subs.w	r8, r2, r1
 8002870:	4659      	mov	r1, fp
 8002872:	eb63 0901 	sbc.w	r9, r3, r1
 8002876:	f04f 0200 	mov.w	r2, #0
 800287a:	f04f 0300 	mov.w	r3, #0
 800287e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002882:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002886:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800288a:	4690      	mov	r8, r2
 800288c:	4699      	mov	r9, r3
 800288e:	4623      	mov	r3, r4
 8002890:	eb18 0303 	adds.w	r3, r8, r3
 8002894:	60bb      	str	r3, [r7, #8]
 8002896:	462b      	mov	r3, r5
 8002898:	eb49 0303 	adc.w	r3, r9, r3
 800289c:	60fb      	str	r3, [r7, #12]
 800289e:	f04f 0200 	mov.w	r2, #0
 80028a2:	f04f 0300 	mov.w	r3, #0
 80028a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80028aa:	4629      	mov	r1, r5
 80028ac:	024b      	lsls	r3, r1, #9
 80028ae:	4621      	mov	r1, r4
 80028b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028b4:	4621      	mov	r1, r4
 80028b6:	024a      	lsls	r2, r1, #9
 80028b8:	4610      	mov	r0, r2
 80028ba:	4619      	mov	r1, r3
 80028bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028be:	2200      	movs	r2, #0
 80028c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80028c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028c8:	f7fd fcf2 	bl	80002b0 <__aeabi_uldivmod>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	4613      	mov	r3, r2
 80028d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028d4:	e058      	b.n	8002988 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028d6:	4b38      	ldr	r3, [pc, #224]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	099b      	lsrs	r3, r3, #6
 80028dc:	2200      	movs	r2, #0
 80028de:	4618      	mov	r0, r3
 80028e0:	4611      	mov	r1, r2
 80028e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028e6:	623b      	str	r3, [r7, #32]
 80028e8:	2300      	movs	r3, #0
 80028ea:	627b      	str	r3, [r7, #36]	; 0x24
 80028ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80028f0:	4642      	mov	r2, r8
 80028f2:	464b      	mov	r3, r9
 80028f4:	f04f 0000 	mov.w	r0, #0
 80028f8:	f04f 0100 	mov.w	r1, #0
 80028fc:	0159      	lsls	r1, r3, #5
 80028fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002902:	0150      	lsls	r0, r2, #5
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	4641      	mov	r1, r8
 800290a:	ebb2 0a01 	subs.w	sl, r2, r1
 800290e:	4649      	mov	r1, r9
 8002910:	eb63 0b01 	sbc.w	fp, r3, r1
 8002914:	f04f 0200 	mov.w	r2, #0
 8002918:	f04f 0300 	mov.w	r3, #0
 800291c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002920:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002924:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002928:	ebb2 040a 	subs.w	r4, r2, sl
 800292c:	eb63 050b 	sbc.w	r5, r3, fp
 8002930:	f04f 0200 	mov.w	r2, #0
 8002934:	f04f 0300 	mov.w	r3, #0
 8002938:	00eb      	lsls	r3, r5, #3
 800293a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800293e:	00e2      	lsls	r2, r4, #3
 8002940:	4614      	mov	r4, r2
 8002942:	461d      	mov	r5, r3
 8002944:	4643      	mov	r3, r8
 8002946:	18e3      	adds	r3, r4, r3
 8002948:	603b      	str	r3, [r7, #0]
 800294a:	464b      	mov	r3, r9
 800294c:	eb45 0303 	adc.w	r3, r5, r3
 8002950:	607b      	str	r3, [r7, #4]
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	f04f 0300 	mov.w	r3, #0
 800295a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800295e:	4629      	mov	r1, r5
 8002960:	028b      	lsls	r3, r1, #10
 8002962:	4621      	mov	r1, r4
 8002964:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002968:	4621      	mov	r1, r4
 800296a:	028a      	lsls	r2, r1, #10
 800296c:	4610      	mov	r0, r2
 800296e:	4619      	mov	r1, r3
 8002970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002972:	2200      	movs	r2, #0
 8002974:	61bb      	str	r3, [r7, #24]
 8002976:	61fa      	str	r2, [r7, #28]
 8002978:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800297c:	f7fd fc98 	bl	80002b0 <__aeabi_uldivmod>
 8002980:	4602      	mov	r2, r0
 8002982:	460b      	mov	r3, r1
 8002984:	4613      	mov	r3, r2
 8002986:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002988:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	0c1b      	lsrs	r3, r3, #16
 800298e:	f003 0303 	and.w	r3, r3, #3
 8002992:	3301      	adds	r3, #1
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002998:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800299a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800299c:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029a2:	e002      	b.n	80029aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029a4:	4b05      	ldr	r3, [pc, #20]	; (80029bc <HAL_RCC_GetSysClockFreq+0x204>)
 80029a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3750      	adds	r7, #80	; 0x50
 80029b0:	46bd      	mov	sp, r7
 80029b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029b6:	bf00      	nop
 80029b8:	40023800 	.word	0x40023800
 80029bc:	00f42400 	.word	0x00f42400
 80029c0:	007a1200 	.word	0x007a1200

080029c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029c8:	4b03      	ldr	r3, [pc, #12]	; (80029d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80029ca:	681b      	ldr	r3, [r3, #0]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	2000000c 	.word	0x2000000c

080029dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029e0:	f7ff fff0 	bl	80029c4 <HAL_RCC_GetHCLKFreq>
 80029e4:	4602      	mov	r2, r0
 80029e6:	4b05      	ldr	r3, [pc, #20]	; (80029fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	0a9b      	lsrs	r3, r3, #10
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	4903      	ldr	r1, [pc, #12]	; (8002a00 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029f2:	5ccb      	ldrb	r3, [r1, r3]
 80029f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40023800 	.word	0x40023800
 8002a00:	08008b20 	.word	0x08008b20

08002a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a08:	f7ff ffdc 	bl	80029c4 <HAL_RCC_GetHCLKFreq>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	0b5b      	lsrs	r3, r3, #13
 8002a14:	f003 0307 	and.w	r3, r3, #7
 8002a18:	4903      	ldr	r1, [pc, #12]	; (8002a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a1a:	5ccb      	ldrb	r3, [r1, r3]
 8002a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40023800 	.word	0x40023800
 8002a28:	08008b20 	.word	0x08008b20

08002a2c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	220f      	movs	r2, #15
 8002a3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a3c:	4b12      	ldr	r3, [pc, #72]	; (8002a88 <HAL_RCC_GetClockConfig+0x5c>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 0203 	and.w	r2, r3, #3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a48:	4b0f      	ldr	r3, [pc, #60]	; (8002a88 <HAL_RCC_GetClockConfig+0x5c>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a54:	4b0c      	ldr	r3, [pc, #48]	; (8002a88 <HAL_RCC_GetClockConfig+0x5c>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002a60:	4b09      	ldr	r3, [pc, #36]	; (8002a88 <HAL_RCC_GetClockConfig+0x5c>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	08db      	lsrs	r3, r3, #3
 8002a66:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a6e:	4b07      	ldr	r3, [pc, #28]	; (8002a8c <HAL_RCC_GetClockConfig+0x60>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0207 	and.w	r2, r3, #7
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	601a      	str	r2, [r3, #0]
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	40023c00 	.word	0x40023c00

08002a90 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d105      	bne.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d038      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ab8:	4b68      	ldr	r3, [pc, #416]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002abe:	f7fe ffff 	bl	8001ac0 <HAL_GetTick>
 8002ac2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002ac6:	f7fe fffb 	bl	8001ac0 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e0bd      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ad8:	4b61      	ldr	r3, [pc, #388]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1f0      	bne.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	019b      	lsls	r3, r3, #6
 8002aee:	431a      	orrs	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	071b      	lsls	r3, r3, #28
 8002af6:	495a      	ldr	r1, [pc, #360]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002afe:	4b57      	ldr	r3, [pc, #348]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b00:	2201      	movs	r2, #1
 8002b02:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b04:	f7fe ffdc 	bl	8001ac0 <HAL_GetTick>
 8002b08:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002b0c:	f7fe ffd8 	bl	8001ac0 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e09a      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b1e:	4b50      	ldr	r3, [pc, #320]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0f0      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 8083 	beq.w	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b38:	2300      	movs	r3, #0
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	4b48      	ldr	r3, [pc, #288]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	4a47      	ldr	r2, [pc, #284]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b46:	6413      	str	r3, [r2, #64]	; 0x40
 8002b48:	4b45      	ldr	r3, [pc, #276]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002b54:	4b43      	ldr	r3, [pc, #268]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a42      	ldr	r2, [pc, #264]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b5e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b60:	f7fe ffae 	bl	8001ac0 <HAL_GetTick>
 8002b64:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002b66:	e008      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002b68:	f7fe ffaa 	bl	8001ac0 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e06c      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002b7a:	4b3a      	ldr	r3, [pc, #232]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0f0      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b86:	4b36      	ldr	r3, [pc, #216]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b8e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d02f      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d028      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ba4:	4b2e      	ldr	r3, [pc, #184]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bac:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bae:	4b2e      	ldr	r3, [pc, #184]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bb4:	4b2c      	ldr	r3, [pc, #176]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002bba:	4a29      	ldr	r2, [pc, #164]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002bc0:	4b27      	ldr	r3, [pc, #156]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d114      	bne.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002bcc:	f7fe ff78 	bl	8001ac0 <HAL_GetTick>
 8002bd0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd2:	e00a      	b.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bd4:	f7fe ff74 	bl	8001ac0 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d901      	bls.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e034      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bea:	4b1d      	ldr	r3, [pc, #116]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0ee      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c02:	d10d      	bne.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002c04:	4b16      	ldr	r3, [pc, #88]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002c14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c18:	4911      	ldr	r1, [pc, #68]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	608b      	str	r3, [r1, #8]
 8002c1e:	e005      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002c20:	4b0f      	ldr	r3, [pc, #60]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	4a0e      	ldr	r2, [pc, #56]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c26:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002c2a:	6093      	str	r3, [r2, #8]
 8002c2c:	4b0c      	ldr	r3, [pc, #48]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c38:	4909      	ldr	r1, [pc, #36]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0308 	and.w	r3, r3, #8
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	7d1a      	ldrb	r2, [r3, #20]
 8002c4e:	4b07      	ldr	r3, [pc, #28]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002c50:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3718      	adds	r7, #24
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	42470068 	.word	0x42470068
 8002c60:	40023800 	.word	0x40023800
 8002c64:	40007000 	.word	0x40007000
 8002c68:	42470e40 	.word	0x42470e40
 8002c6c:	424711e0 	.word	0x424711e0

08002c70 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e073      	b.n	8002d6e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	7f5b      	ldrb	r3, [r3, #29]
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d105      	bne.n	8002c9c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7fe f8ca 	bl	8000e30 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f003 0310 	and.w	r3, r3, #16
 8002cac:	2b10      	cmp	r3, #16
 8002cae:	d055      	beq.n	8002d5c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	22ca      	movs	r2, #202	; 0xca
 8002cb6:	625a      	str	r2, [r3, #36]	; 0x24
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2253      	movs	r2, #83	; 0x53
 8002cbe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 fa49 	bl	8003158 <RTC_EnterInitMode>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002cca:	7bfb      	ldrb	r3, [r7, #15]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d12c      	bne.n	8002d2a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	6812      	ldr	r2, [r2, #0]
 8002cda:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002cde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ce2:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6899      	ldr	r1, [r3, #8]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	68d2      	ldr	r2, [r2, #12]
 8002d0a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6919      	ldr	r1, [r3, #16]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	041a      	lsls	r2, r3, #16
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 fa50 	bl	80031c6 <RTC_ExitInitMode>
 8002d26:	4603      	mov	r3, r0
 8002d28:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002d2a:	7bfb      	ldrb	r3, [r7, #15]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d110      	bne.n	8002d52 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d3e:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699a      	ldr	r2, [r3, #24]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	22ff      	movs	r2, #255	; 0xff
 8002d58:	625a      	str	r2, [r3, #36]	; 0x24
 8002d5a:	e001      	b.n	8002d60 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d102      	bne.n	8002d6c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d76:	b590      	push	{r4, r7, lr}
 8002d78:	b087      	sub	sp, #28
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	60f8      	str	r0, [r7, #12]
 8002d7e:	60b9      	str	r1, [r7, #8]
 8002d80:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002d82:	2300      	movs	r3, #0
 8002d84:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	7f1b      	ldrb	r3, [r3, #28]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d101      	bne.n	8002d92 <HAL_RTC_SetTime+0x1c>
 8002d8e:	2302      	movs	r3, #2
 8002d90:	e087      	b.n	8002ea2 <HAL_RTC_SetTime+0x12c>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2201      	movs	r2, #1
 8002d96:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d126      	bne.n	8002df2 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d102      	bne.n	8002db8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	2200      	movs	r2, #0
 8002db6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f000 fa27 	bl	8003210 <RTC_ByteToBcd2>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	785b      	ldrb	r3, [r3, #1]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 fa20 	bl	8003210 <RTC_ByteToBcd2>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002dd4:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	789b      	ldrb	r3, [r3, #2]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f000 fa18 	bl	8003210 <RTC_ByteToBcd2>
 8002de0:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002de2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	78db      	ldrb	r3, [r3, #3]
 8002dea:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002dec:	4313      	orrs	r3, r2
 8002dee:	617b      	str	r3, [r7, #20]
 8002df0:	e018      	b.n	8002e24 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d102      	bne.n	8002e06 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2200      	movs	r2, #0
 8002e04:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	785b      	ldrb	r3, [r3, #1]
 8002e10:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002e12:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002e14:	68ba      	ldr	r2, [r7, #8]
 8002e16:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002e18:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	78db      	ldrb	r3, [r3, #3]
 8002e1e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002e20:	4313      	orrs	r3, r2
 8002e22:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	22ca      	movs	r2, #202	; 0xca
 8002e2a:	625a      	str	r2, [r3, #36]	; 0x24
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2253      	movs	r2, #83	; 0x53
 8002e32:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 f98f 	bl	8003158 <RTC_EnterInitMode>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002e3e:	7cfb      	ldrb	r3, [r7, #19]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d120      	bne.n	8002e86 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002e4e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002e52:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e62:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6899      	ldr	r1, [r3, #8]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	68da      	ldr	r2, [r3, #12]
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	431a      	orrs	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f000 f9a2 	bl	80031c6 <RTC_ExitInitMode>
 8002e82:	4603      	mov	r3, r0
 8002e84:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002e86:	7cfb      	ldrb	r3, [r7, #19]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d102      	bne.n	8002e92 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	22ff      	movs	r2, #255	; 0xff
 8002e98:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	771a      	strb	r2, [r3, #28]

  return status;
 8002ea0:	7cfb      	ldrb	r3, [r7, #19]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	371c      	adds	r7, #28
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd90      	pop	{r4, r7, pc}

08002eaa <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b086      	sub	sp, #24
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	60f8      	str	r0, [r7, #12]
 8002eb2:	60b9      	str	r1, [r7, #8]
 8002eb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002edc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002ee0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	0c1b      	lsrs	r3, r3, #16
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	0a1b      	lsrs	r3, r3, #8
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f0a:	b2da      	uxtb	r2, r3
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	0d9b      	lsrs	r3, r3, #22
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d11a      	bne.n	8002f5c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f000 f98e 	bl	800324c <RTC_Bcd2ToByte>
 8002f30:	4603      	mov	r3, r0
 8002f32:	461a      	mov	r2, r3
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	785b      	ldrb	r3, [r3, #1]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 f985 	bl	800324c <RTC_Bcd2ToByte>
 8002f42:	4603      	mov	r3, r0
 8002f44:	461a      	mov	r2, r3
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	789b      	ldrb	r3, [r3, #2]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 f97c 	bl	800324c <RTC_Bcd2ToByte>
 8002f54:	4603      	mov	r3, r0
 8002f56:	461a      	mov	r2, r3
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3718      	adds	r7, #24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002f66:	b590      	push	{r4, r7, lr}
 8002f68:	b087      	sub	sp, #28
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	60f8      	str	r0, [r7, #12]
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002f72:	2300      	movs	r3, #0
 8002f74:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	7f1b      	ldrb	r3, [r3, #28]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d101      	bne.n	8002f82 <HAL_RTC_SetDate+0x1c>
 8002f7e:	2302      	movs	r3, #2
 8002f80:	e071      	b.n	8003066 <HAL_RTC_SetDate+0x100>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2201      	movs	r2, #1
 8002f86:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10e      	bne.n	8002fb2 <HAL_RTC_SetDate+0x4c>
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	785b      	ldrb	r3, [r3, #1]
 8002f98:	f003 0310 	and.w	r3, r3, #16
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d008      	beq.n	8002fb2 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	785b      	ldrb	r3, [r3, #1]
 8002fa4:	f023 0310 	bic.w	r3, r3, #16
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	330a      	adds	r3, #10
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d11c      	bne.n	8002ff2 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	78db      	ldrb	r3, [r3, #3]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f000 f927 	bl	8003210 <RTC_ByteToBcd2>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	785b      	ldrb	r3, [r3, #1]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 f920 	bl	8003210 <RTC_ByteToBcd2>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002fd4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	789b      	ldrb	r3, [r3, #2]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f000 f918 	bl	8003210 <RTC_ByteToBcd2>
 8002fe0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002fe2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002fec:	4313      	orrs	r3, r2
 8002fee:	617b      	str	r3, [r7, #20]
 8002ff0:	e00e      	b.n	8003010 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	78db      	ldrb	r3, [r3, #3]
 8002ff6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	785b      	ldrb	r3, [r3, #1]
 8002ffc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002ffe:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003004:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800300c:	4313      	orrs	r3, r2
 800300e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	22ca      	movs	r2, #202	; 0xca
 8003016:	625a      	str	r2, [r3, #36]	; 0x24
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2253      	movs	r2, #83	; 0x53
 800301e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f000 f899 	bl	8003158 <RTC_EnterInitMode>
 8003026:	4603      	mov	r3, r0
 8003028:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800302a:	7cfb      	ldrb	r3, [r7, #19]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10c      	bne.n	800304a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800303a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800303e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 f8c0 	bl	80031c6 <RTC_ExitInitMode>
 8003046:	4603      	mov	r3, r0
 8003048:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800304a:	7cfb      	ldrb	r3, [r7, #19]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d102      	bne.n	8003056 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2201      	movs	r2, #1
 8003054:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	22ff      	movs	r2, #255	; 0xff
 800305c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	771a      	strb	r2, [r3, #28]

  return status;
 8003064:	7cfb      	ldrb	r3, [r7, #19]
}
 8003066:	4618      	mov	r0, r3
 8003068:	371c      	adds	r7, #28
 800306a:	46bd      	mov	sp, r7
 800306c:	bd90      	pop	{r4, r7, pc}

0800306e <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b086      	sub	sp, #24
 8003072:	af00      	add	r7, sp, #0
 8003074:	60f8      	str	r0, [r7, #12]
 8003076:	60b9      	str	r1, [r7, #8]
 8003078:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800307a:	2300      	movs	r3, #0
 800307c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003088:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800308c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	0c1b      	lsrs	r3, r3, #16
 8003092:	b2da      	uxtb	r2, r3
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	0a1b      	lsrs	r3, r3, #8
 800309c:	b2db      	uxtb	r3, r3
 800309e:	f003 031f 	and.w	r3, r3, #31
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	0b5b      	lsrs	r3, r3, #13
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d11a      	bne.n	8003102 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	78db      	ldrb	r3, [r3, #3]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f000 f8bb 	bl	800324c <RTC_Bcd2ToByte>
 80030d6:	4603      	mov	r3, r0
 80030d8:	461a      	mov	r2, r3
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	785b      	ldrb	r3, [r3, #1]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 f8b2 	bl	800324c <RTC_Bcd2ToByte>
 80030e8:	4603      	mov	r3, r0
 80030ea:	461a      	mov	r2, r3
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	789b      	ldrb	r3, [r3, #2]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f000 f8a9 	bl	800324c <RTC_Bcd2ToByte>
 80030fa:	4603      	mov	r3, r0
 80030fc:	461a      	mov	r2, r3
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3718      	adds	r7, #24
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a0d      	ldr	r2, [pc, #52]	; (8003154 <HAL_RTC_WaitForSynchro+0x48>)
 800311e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003120:	f7fe fcce 	bl	8001ac0 <HAL_GetTick>
 8003124:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003126:	e009      	b.n	800313c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003128:	f7fe fcca 	bl	8001ac0 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003136:	d901      	bls.n	800313c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e007      	b.n	800314c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	f003 0320 	and.w	r3, r3, #32
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0ee      	beq.n	8003128 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	00013f5f 	.word	0x00013f5f

08003158 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003160:	2300      	movs	r3, #0
 8003162:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003164:	2300      	movs	r3, #0
 8003166:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003172:	2b00      	cmp	r3, #0
 8003174:	d122      	bne.n	80031bc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68da      	ldr	r2, [r3, #12]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003184:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003186:	f7fe fc9b 	bl	8001ac0 <HAL_GetTick>
 800318a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800318c:	e00c      	b.n	80031a8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800318e:	f7fe fc97 	bl	8001ac0 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800319c:	d904      	bls.n	80031a8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2204      	movs	r2, #4
 80031a2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d102      	bne.n	80031bc <RTC_EnterInitMode+0x64>
 80031b6:	7bfb      	ldrb	r3, [r7, #15]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d1e8      	bne.n	800318e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80031bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b084      	sub	sp, #16
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031ce:	2300      	movs	r3, #0
 80031d0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68da      	ldr	r2, [r3, #12]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031e0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f003 0320 	and.w	r3, r3, #32
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10a      	bne.n	8003206 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f7ff ff8b 	bl	800310c <HAL_RTC_WaitForSynchro>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d004      	beq.n	8003206 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2204      	movs	r2, #4
 8003200:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003206:	7bfb      	ldrb	r3, [r7, #15]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	4603      	mov	r3, r0
 8003218:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800321a:	2300      	movs	r3, #0
 800321c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800321e:	e005      	b.n	800322c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	3301      	adds	r3, #1
 8003224:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8003226:	79fb      	ldrb	r3, [r7, #7]
 8003228:	3b0a      	subs	r3, #10
 800322a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800322c:	79fb      	ldrb	r3, [r7, #7]
 800322e:	2b09      	cmp	r3, #9
 8003230:	d8f6      	bhi.n	8003220 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	b2db      	uxtb	r3, r3
 8003236:	011b      	lsls	r3, r3, #4
 8003238:	b2da      	uxtb	r2, r3
 800323a:	79fb      	ldrb	r3, [r7, #7]
 800323c:	4313      	orrs	r3, r2
 800323e:	b2db      	uxtb	r3, r3
}
 8003240:	4618      	mov	r0, r3
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	4603      	mov	r3, r0
 8003254:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8003256:	2300      	movs	r3, #0
 8003258:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800325a:	79fb      	ldrb	r3, [r7, #7]
 800325c:	091b      	lsrs	r3, r3, #4
 800325e:	b2db      	uxtb	r3, r3
 8003260:	461a      	mov	r2, r3
 8003262:	4613      	mov	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	b2da      	uxtb	r2, r3
 8003270:	79fb      	ldrb	r3, [r7, #7]
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	b2db      	uxtb	r3, r3
 8003278:	4413      	add	r3, r2
 800327a:	b2db      	uxtb	r3, r3
}
 800327c:	4618      	mov	r0, r3
 800327e:	3714      	adds	r7, #20
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e041      	b.n	800331e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d106      	bne.n	80032b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f839 	bl	8003326 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2202      	movs	r2, #2
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	3304      	adds	r3, #4
 80032c4:	4619      	mov	r1, r3
 80032c6:	4610      	mov	r0, r2
 80032c8:	f000 f9b2 	bl	8003630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003326:	b480      	push	{r7}
 8003328:	b083      	sub	sp, #12
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
	...

0800333c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b01      	cmp	r3, #1
 800334e:	d001      	beq.n	8003354 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e044      	b.n	80033de <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68da      	ldr	r2, [r3, #12]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f042 0201 	orr.w	r2, r2, #1
 800336a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a1e      	ldr	r2, [pc, #120]	; (80033ec <HAL_TIM_Base_Start_IT+0xb0>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d018      	beq.n	80033a8 <HAL_TIM_Base_Start_IT+0x6c>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800337e:	d013      	beq.n	80033a8 <HAL_TIM_Base_Start_IT+0x6c>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a1a      	ldr	r2, [pc, #104]	; (80033f0 <HAL_TIM_Base_Start_IT+0xb4>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d00e      	beq.n	80033a8 <HAL_TIM_Base_Start_IT+0x6c>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a19      	ldr	r2, [pc, #100]	; (80033f4 <HAL_TIM_Base_Start_IT+0xb8>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d009      	beq.n	80033a8 <HAL_TIM_Base_Start_IT+0x6c>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a17      	ldr	r2, [pc, #92]	; (80033f8 <HAL_TIM_Base_Start_IT+0xbc>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d004      	beq.n	80033a8 <HAL_TIM_Base_Start_IT+0x6c>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a16      	ldr	r2, [pc, #88]	; (80033fc <HAL_TIM_Base_Start_IT+0xc0>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d111      	bne.n	80033cc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2b06      	cmp	r3, #6
 80033b8:	d010      	beq.n	80033dc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f042 0201 	orr.w	r2, r2, #1
 80033c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ca:	e007      	b.n	80033dc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f042 0201 	orr.w	r2, r2, #1
 80033da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3714      	adds	r7, #20
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	40010000 	.word	0x40010000
 80033f0:	40000400 	.word	0x40000400
 80033f4:	40000800 	.word	0x40000800
 80033f8:	40000c00 	.word	0x40000c00
 80033fc:	40014000 	.word	0x40014000

08003400 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d020      	beq.n	8003464 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d01b      	beq.n	8003464 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f06f 0202 	mvn.w	r2, #2
 8003434:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f8d2 	bl	80035f4 <HAL_TIM_IC_CaptureCallback>
 8003450:	e005      	b.n	800345e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f8c4 	bl	80035e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 f8d5 	bl	8003608 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	2b00      	cmp	r3, #0
 800346c:	d020      	beq.n	80034b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	d01b      	beq.n	80034b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f06f 0204 	mvn.w	r2, #4
 8003480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2202      	movs	r2, #2
 8003486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003492:	2b00      	cmp	r3, #0
 8003494:	d003      	beq.n	800349e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f8ac 	bl	80035f4 <HAL_TIM_IC_CaptureCallback>
 800349c:	e005      	b.n	80034aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f89e 	bl	80035e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f8af 	bl	8003608 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d020      	beq.n	80034fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f003 0308 	and.w	r3, r3, #8
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d01b      	beq.n	80034fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f06f 0208 	mvn.w	r2, #8
 80034cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2204      	movs	r2, #4
 80034d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	f003 0303 	and.w	r3, r3, #3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f886 	bl	80035f4 <HAL_TIM_IC_CaptureCallback>
 80034e8:	e005      	b.n	80034f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f878 	bl	80035e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 f889 	bl	8003608 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	f003 0310 	and.w	r3, r3, #16
 8003502:	2b00      	cmp	r3, #0
 8003504:	d020      	beq.n	8003548 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f003 0310 	and.w	r3, r3, #16
 800350c:	2b00      	cmp	r3, #0
 800350e:	d01b      	beq.n	8003548 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f06f 0210 	mvn.w	r2, #16
 8003518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2208      	movs	r2, #8
 800351e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f860 	bl	80035f4 <HAL_TIM_IC_CaptureCallback>
 8003534:	e005      	b.n	8003542 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f852 	bl	80035e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f863 	bl	8003608 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00c      	beq.n	800356c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	2b00      	cmp	r3, #0
 800355a:	d007      	beq.n	800356c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f06f 0201 	mvn.w	r2, #1
 8003564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7fd fb14 	bl	8000b94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00c      	beq.n	8003590 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800357c:	2b00      	cmp	r3, #0
 800357e:	d007      	beq.n	8003590 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f8e6 	bl	800375c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00c      	beq.n	80035b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d007      	beq.n	80035b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f834 	bl	800361c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	f003 0320 	and.w	r3, r3, #32
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00c      	beq.n	80035d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f003 0320 	and.w	r3, r3, #32
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d007      	beq.n	80035d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f06f 0220 	mvn.w	r2, #32
 80035d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f8b8 	bl	8003748 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035d8:	bf00      	nop
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a3a      	ldr	r2, [pc, #232]	; (800372c <TIM_Base_SetConfig+0xfc>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d00f      	beq.n	8003668 <TIM_Base_SetConfig+0x38>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800364e:	d00b      	beq.n	8003668 <TIM_Base_SetConfig+0x38>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a37      	ldr	r2, [pc, #220]	; (8003730 <TIM_Base_SetConfig+0x100>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d007      	beq.n	8003668 <TIM_Base_SetConfig+0x38>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a36      	ldr	r2, [pc, #216]	; (8003734 <TIM_Base_SetConfig+0x104>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d003      	beq.n	8003668 <TIM_Base_SetConfig+0x38>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a35      	ldr	r2, [pc, #212]	; (8003738 <TIM_Base_SetConfig+0x108>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d108      	bne.n	800367a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800366e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	4313      	orrs	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a2b      	ldr	r2, [pc, #172]	; (800372c <TIM_Base_SetConfig+0xfc>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d01b      	beq.n	80036ba <TIM_Base_SetConfig+0x8a>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003688:	d017      	beq.n	80036ba <TIM_Base_SetConfig+0x8a>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a28      	ldr	r2, [pc, #160]	; (8003730 <TIM_Base_SetConfig+0x100>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d013      	beq.n	80036ba <TIM_Base_SetConfig+0x8a>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a27      	ldr	r2, [pc, #156]	; (8003734 <TIM_Base_SetConfig+0x104>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d00f      	beq.n	80036ba <TIM_Base_SetConfig+0x8a>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a26      	ldr	r2, [pc, #152]	; (8003738 <TIM_Base_SetConfig+0x108>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d00b      	beq.n	80036ba <TIM_Base_SetConfig+0x8a>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a25      	ldr	r2, [pc, #148]	; (800373c <TIM_Base_SetConfig+0x10c>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d007      	beq.n	80036ba <TIM_Base_SetConfig+0x8a>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a24      	ldr	r2, [pc, #144]	; (8003740 <TIM_Base_SetConfig+0x110>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d003      	beq.n	80036ba <TIM_Base_SetConfig+0x8a>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a23      	ldr	r2, [pc, #140]	; (8003744 <TIM_Base_SetConfig+0x114>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d108      	bne.n	80036cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a0e      	ldr	r2, [pc, #56]	; (800372c <TIM_Base_SetConfig+0xfc>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d103      	bne.n	8003700 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	691a      	ldr	r2, [r3, #16]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b01      	cmp	r3, #1
 8003710:	d105      	bne.n	800371e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	f023 0201 	bic.w	r2, r3, #1
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	611a      	str	r2, [r3, #16]
  }
}
 800371e:	bf00      	nop
 8003720:	3714      	adds	r7, #20
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	40010000 	.word	0x40010000
 8003730:	40000400 	.word	0x40000400
 8003734:	40000800 	.word	0x40000800
 8003738:	40000c00 	.word	0x40000c00
 800373c:	40014000 	.word	0x40014000
 8003740:	40014400 	.word	0x40014400
 8003744:	40014800 	.word	0x40014800

08003748 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e042      	b.n	8003808 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d106      	bne.n	800379c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7fd fb76 	bl	8000e88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2224      	movs	r2, #36	; 0x24
 80037a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68da      	ldr	r2, [r3, #12]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 fdbd 	bl	8004334 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	691a      	ldr	r2, [r3, #16]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	695a      	ldr	r2, [r3, #20]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68da      	ldr	r2, [r3, #12]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2220      	movs	r2, #32
 80037f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2220      	movs	r2, #32
 80037fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3708      	adds	r7, #8
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b08a      	sub	sp, #40	; 0x28
 8003814:	af02      	add	r7, sp, #8
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	603b      	str	r3, [r7, #0]
 800381c:	4613      	mov	r3, r2
 800381e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003820:	2300      	movs	r3, #0
 8003822:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b20      	cmp	r3, #32
 800382e:	d175      	bne.n	800391c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d002      	beq.n	800383c <HAL_UART_Transmit+0x2c>
 8003836:	88fb      	ldrh	r3, [r7, #6]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d101      	bne.n	8003840 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e06e      	b.n	800391e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2221      	movs	r2, #33	; 0x21
 800384a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800384e:	f7fe f937 	bl	8001ac0 <HAL_GetTick>
 8003852:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	88fa      	ldrh	r2, [r7, #6]
 8003858:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	88fa      	ldrh	r2, [r7, #6]
 800385e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003868:	d108      	bne.n	800387c <HAL_UART_Transmit+0x6c>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d104      	bne.n	800387c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003872:	2300      	movs	r3, #0
 8003874:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	61bb      	str	r3, [r7, #24]
 800387a:	e003      	b.n	8003884 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003880:	2300      	movs	r3, #0
 8003882:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003884:	e02e      	b.n	80038e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	2200      	movs	r2, #0
 800388e:	2180      	movs	r1, #128	; 0x80
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 fb1f 	bl	8003ed4 <UART_WaitOnFlagUntilTimeout>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d005      	beq.n	80038a8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2220      	movs	r2, #32
 80038a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e03a      	b.n	800391e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10b      	bne.n	80038c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	881b      	ldrh	r3, [r3, #0]
 80038b2:	461a      	mov	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	3302      	adds	r3, #2
 80038c2:	61bb      	str	r3, [r7, #24]
 80038c4:	e007      	b.n	80038d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	781a      	ldrb	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	3301      	adds	r3, #1
 80038d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038da:	b29b      	uxth	r3, r3
 80038dc:	3b01      	subs	r3, #1
 80038de:	b29a      	uxth	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1cb      	bne.n	8003886 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	2200      	movs	r2, #0
 80038f6:	2140      	movs	r1, #64	; 0x40
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f000 faeb 	bl	8003ed4 <UART_WaitOnFlagUntilTimeout>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d005      	beq.n	8003910 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2220      	movs	r2, #32
 8003908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e006      	b.n	800391e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2220      	movs	r2, #32
 8003914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003918:	2300      	movs	r3, #0
 800391a:	e000      	b.n	800391e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800391c:	2302      	movs	r3, #2
  }
}
 800391e:	4618      	mov	r0, r3
 8003920:	3720      	adds	r7, #32
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b084      	sub	sp, #16
 800392a:	af00      	add	r7, sp, #0
 800392c:	60f8      	str	r0, [r7, #12]
 800392e:	60b9      	str	r1, [r7, #8]
 8003930:	4613      	mov	r3, r2
 8003932:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b20      	cmp	r3, #32
 800393e:	d112      	bne.n	8003966 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d002      	beq.n	800394c <HAL_UART_Receive_IT+0x26>
 8003946:	88fb      	ldrh	r3, [r7, #6]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e00b      	b.n	8003968 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003956:	88fb      	ldrh	r3, [r7, #6]
 8003958:	461a      	mov	r2, r3
 800395a:	68b9      	ldr	r1, [r7, #8]
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f000 fb12 	bl	8003f86 <UART_Start_Receive_IT>
 8003962:	4603      	mov	r3, r0
 8003964:	e000      	b.n	8003968 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003966:	2302      	movs	r3, #2
  }
}
 8003968:	4618      	mov	r0, r3
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b0ba      	sub	sp, #232	; 0xe8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003996:	2300      	movs	r3, #0
 8003998:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800399c:	2300      	movs	r3, #0
 800399e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80039a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039a6:	f003 030f 	and.w	r3, r3, #15
 80039aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80039ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10f      	bne.n	80039d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ba:	f003 0320 	and.w	r3, r3, #32
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d009      	beq.n	80039d6 <HAL_UART_IRQHandler+0x66>
 80039c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039c6:	f003 0320 	and.w	r3, r3, #32
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 fbf2 	bl	80041b8 <UART_Receive_IT>
      return;
 80039d4:	e25b      	b.n	8003e8e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80039d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f000 80de 	beq.w	8003b9c <HAL_UART_IRQHandler+0x22c>
 80039e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d106      	bne.n	80039fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039f0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 80d1 	beq.w	8003b9c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00b      	beq.n	8003a1e <HAL_UART_IRQHandler+0xae>
 8003a06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d005      	beq.n	8003a1e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a16:	f043 0201 	orr.w	r2, r3, #1
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a22:	f003 0304 	and.w	r3, r3, #4
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00b      	beq.n	8003a42 <HAL_UART_IRQHandler+0xd2>
 8003a2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d005      	beq.n	8003a42 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3a:	f043 0202 	orr.w	r2, r3, #2
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00b      	beq.n	8003a66 <HAL_UART_IRQHandler+0xf6>
 8003a4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d005      	beq.n	8003a66 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5e:	f043 0204 	orr.w	r2, r3, #4
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a6a:	f003 0308 	and.w	r3, r3, #8
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d011      	beq.n	8003a96 <HAL_UART_IRQHandler+0x126>
 8003a72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a76:	f003 0320 	and.w	r3, r3, #32
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d105      	bne.n	8003a8a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d005      	beq.n	8003a96 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8e:	f043 0208 	orr.w	r2, r3, #8
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 81f2 	beq.w	8003e84 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aa4:	f003 0320 	and.w	r3, r3, #32
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d008      	beq.n	8003abe <HAL_UART_IRQHandler+0x14e>
 8003aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ab0:	f003 0320 	and.w	r3, r3, #32
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d002      	beq.n	8003abe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 fb7d 	bl	80041b8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac8:	2b40      	cmp	r3, #64	; 0x40
 8003aca:	bf0c      	ite	eq
 8003acc:	2301      	moveq	r3, #1
 8003ace:	2300      	movne	r3, #0
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d103      	bne.n	8003aea <HAL_UART_IRQHandler+0x17a>
 8003ae2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d04f      	beq.n	8003b8a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 fa85 	bl	8003ffa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003afa:	2b40      	cmp	r3, #64	; 0x40
 8003afc:	d141      	bne.n	8003b82 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	3314      	adds	r3, #20
 8003b04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b0c:	e853 3f00 	ldrex	r3, [r3]
 8003b10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	3314      	adds	r3, #20
 8003b26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b2a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b3a:	e841 2300 	strex	r3, r2, [r1]
 8003b3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1d9      	bne.n	8003afe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d013      	beq.n	8003b7a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b56:	4a7e      	ldr	r2, [pc, #504]	; (8003d50 <HAL_UART_IRQHandler+0x3e0>)
 8003b58:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fe f90c 	bl	8001d7c <HAL_DMA_Abort_IT>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d016      	beq.n	8003b98 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b74:	4610      	mov	r0, r2
 8003b76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b78:	e00e      	b.n	8003b98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f994 	bl	8003ea8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b80:	e00a      	b.n	8003b98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f990 	bl	8003ea8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b88:	e006      	b.n	8003b98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f98c 	bl	8003ea8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003b96:	e175      	b.n	8003e84 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b98:	bf00      	nop
    return;
 8003b9a:	e173      	b.n	8003e84 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	f040 814f 	bne.w	8003e44 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003baa:	f003 0310 	and.w	r3, r3, #16
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 8148 	beq.w	8003e44 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bb8:	f003 0310 	and.w	r3, r3, #16
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 8141 	beq.w	8003e44 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	60bb      	str	r3, [r7, #8]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	60bb      	str	r3, [r7, #8]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	60bb      	str	r3, [r7, #8]
 8003bd6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be2:	2b40      	cmp	r3, #64	; 0x40
 8003be4:	f040 80b6 	bne.w	8003d54 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003bf4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f000 8145 	beq.w	8003e88 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c06:	429a      	cmp	r2, r3
 8003c08:	f080 813e 	bcs.w	8003e88 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c12:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c1e:	f000 8088 	beq.w	8003d32 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	330c      	adds	r3, #12
 8003c28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c30:	e853 3f00 	ldrex	r3, [r3]
 8003c34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	330c      	adds	r3, #12
 8003c4a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003c4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c56:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c5e:	e841 2300 	strex	r3, r2, [r1]
 8003c62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1d9      	bne.n	8003c22 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	3314      	adds	r3, #20
 8003c74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c78:	e853 3f00 	ldrex	r3, [r3]
 8003c7c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c80:	f023 0301 	bic.w	r3, r3, #1
 8003c84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	3314      	adds	r3, #20
 8003c8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c92:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c96:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c98:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c9e:	e841 2300 	strex	r3, r2, [r1]
 8003ca2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ca4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1e1      	bne.n	8003c6e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	3314      	adds	r3, #20
 8003cb0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cb4:	e853 3f00 	ldrex	r3, [r3]
 8003cb8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003cba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	3314      	adds	r3, #20
 8003cca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003cce:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003cd0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003cd4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003cd6:	e841 2300 	strex	r3, r2, [r1]
 8003cda:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003cdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1e3      	bne.n	8003caa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	330c      	adds	r3, #12
 8003cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cfa:	e853 3f00 	ldrex	r3, [r3]
 8003cfe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d02:	f023 0310 	bic.w	r3, r3, #16
 8003d06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	330c      	adds	r3, #12
 8003d10:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003d14:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d16:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d1c:	e841 2300 	strex	r3, r2, [r1]
 8003d20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1e3      	bne.n	8003cf0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7fd ffb5 	bl	8001c9c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2202      	movs	r2, #2
 8003d36:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	4619      	mov	r1, r3
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 f8b7 	bl	8003ebc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d4e:	e09b      	b.n	8003e88 <HAL_UART_IRQHandler+0x518>
 8003d50:	080040c1 	.word	0x080040c1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 808e 	beq.w	8003e8c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003d70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 8089 	beq.w	8003e8c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	330c      	adds	r3, #12
 8003d80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d84:	e853 3f00 	ldrex	r3, [r3]
 8003d88:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	330c      	adds	r3, #12
 8003d9a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003d9e:	647a      	str	r2, [r7, #68]	; 0x44
 8003da0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003da4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003da6:	e841 2300 	strex	r3, r2, [r1]
 8003daa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1e3      	bne.n	8003d7a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	3314      	adds	r3, #20
 8003db8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbc:	e853 3f00 	ldrex	r3, [r3]
 8003dc0:	623b      	str	r3, [r7, #32]
   return(result);
 8003dc2:	6a3b      	ldr	r3, [r7, #32]
 8003dc4:	f023 0301 	bic.w	r3, r3, #1
 8003dc8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	3314      	adds	r3, #20
 8003dd2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003dd6:	633a      	str	r2, [r7, #48]	; 0x30
 8003dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dde:	e841 2300 	strex	r3, r2, [r1]
 8003de2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1e3      	bne.n	8003db2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	330c      	adds	r3, #12
 8003dfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	e853 3f00 	ldrex	r3, [r3]
 8003e06:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f023 0310 	bic.w	r3, r3, #16
 8003e0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	330c      	adds	r3, #12
 8003e18:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003e1c:	61fa      	str	r2, [r7, #28]
 8003e1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e20:	69b9      	ldr	r1, [r7, #24]
 8003e22:	69fa      	ldr	r2, [r7, #28]
 8003e24:	e841 2300 	strex	r3, r2, [r1]
 8003e28:	617b      	str	r3, [r7, #20]
   return(result);
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1e3      	bne.n	8003df8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2202      	movs	r2, #2
 8003e34:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 f83d 	bl	8003ebc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e42:	e023      	b.n	8003e8c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d009      	beq.n	8003e64 <HAL_UART_IRQHandler+0x4f4>
 8003e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d003      	beq.n	8003e64 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 f943 	bl	80040e8 <UART_Transmit_IT>
    return;
 8003e62:	e014      	b.n	8003e8e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00e      	beq.n	8003e8e <HAL_UART_IRQHandler+0x51e>
 8003e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d008      	beq.n	8003e8e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 f983 	bl	8004188 <UART_EndTransmit_IT>
    return;
 8003e82:	e004      	b.n	8003e8e <HAL_UART_IRQHandler+0x51e>
    return;
 8003e84:	bf00      	nop
 8003e86:	e002      	b.n	8003e8e <HAL_UART_IRQHandler+0x51e>
      return;
 8003e88:	bf00      	nop
 8003e8a:	e000      	b.n	8003e8e <HAL_UART_IRQHandler+0x51e>
      return;
 8003e8c:	bf00      	nop
  }
}
 8003e8e:	37e8      	adds	r7, #232	; 0xe8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	603b      	str	r3, [r7, #0]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ee4:	e03b      	b.n	8003f5e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ee6:	6a3b      	ldr	r3, [r7, #32]
 8003ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eec:	d037      	beq.n	8003f5e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eee:	f7fd fde7 	bl	8001ac0 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	6a3a      	ldr	r2, [r7, #32]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d302      	bcc.n	8003f04 <UART_WaitOnFlagUntilTimeout+0x30>
 8003efe:	6a3b      	ldr	r3, [r7, #32]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e03a      	b.n	8003f7e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f003 0304 	and.w	r3, r3, #4
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d023      	beq.n	8003f5e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	2b80      	cmp	r3, #128	; 0x80
 8003f1a:	d020      	beq.n	8003f5e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	2b40      	cmp	r3, #64	; 0x40
 8003f20:	d01d      	beq.n	8003f5e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0308 	and.w	r3, r3, #8
 8003f2c:	2b08      	cmp	r3, #8
 8003f2e:	d116      	bne.n	8003f5e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003f30:	2300      	movs	r3, #0
 8003f32:	617b      	str	r3, [r7, #20]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	617b      	str	r3, [r7, #20]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 f857 	bl	8003ffa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2208      	movs	r2, #8
 8003f50:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e00f      	b.n	8003f7e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	4013      	ands	r3, r2
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	bf0c      	ite	eq
 8003f6e:	2301      	moveq	r3, #1
 8003f70:	2300      	movne	r3, #0
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	461a      	mov	r2, r3
 8003f76:	79fb      	ldrb	r3, [r7, #7]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d0b4      	beq.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3718      	adds	r7, #24
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b085      	sub	sp, #20
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	60f8      	str	r0, [r7, #12]
 8003f8e:	60b9      	str	r1, [r7, #8]
 8003f90:	4613      	mov	r3, r2
 8003f92:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	88fa      	ldrh	r2, [r7, #6]
 8003f9e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	88fa      	ldrh	r2, [r7, #6]
 8003fa4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2222      	movs	r2, #34	; 0x22
 8003fb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d007      	beq.n	8003fcc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68da      	ldr	r2, [r3, #12]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fca:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	695a      	ldr	r2, [r3, #20]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f042 0201 	orr.w	r2, r2, #1
 8003fda:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68da      	ldr	r2, [r3, #12]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0220 	orr.w	r2, r2, #32
 8003fea:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b095      	sub	sp, #84	; 0x54
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	330c      	adds	r3, #12
 8004008:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800400c:	e853 3f00 	ldrex	r3, [r3]
 8004010:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004014:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004018:	64fb      	str	r3, [r7, #76]	; 0x4c
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	330c      	adds	r3, #12
 8004020:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004022:	643a      	str	r2, [r7, #64]	; 0x40
 8004024:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004026:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004028:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800402a:	e841 2300 	strex	r3, r2, [r1]
 800402e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1e5      	bne.n	8004002 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	3314      	adds	r3, #20
 800403c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403e:	6a3b      	ldr	r3, [r7, #32]
 8004040:	e853 3f00 	ldrex	r3, [r3]
 8004044:	61fb      	str	r3, [r7, #28]
   return(result);
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	f023 0301 	bic.w	r3, r3, #1
 800404c:	64bb      	str	r3, [r7, #72]	; 0x48
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	3314      	adds	r3, #20
 8004054:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004056:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004058:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800405c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800405e:	e841 2300 	strex	r3, r2, [r1]
 8004062:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1e5      	bne.n	8004036 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406e:	2b01      	cmp	r3, #1
 8004070:	d119      	bne.n	80040a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	330c      	adds	r3, #12
 8004078:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	e853 3f00 	ldrex	r3, [r3]
 8004080:	60bb      	str	r3, [r7, #8]
   return(result);
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	f023 0310 	bic.w	r3, r3, #16
 8004088:	647b      	str	r3, [r7, #68]	; 0x44
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	330c      	adds	r3, #12
 8004090:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004092:	61ba      	str	r2, [r7, #24]
 8004094:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004096:	6979      	ldr	r1, [r7, #20]
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	e841 2300 	strex	r3, r2, [r1]
 800409e:	613b      	str	r3, [r7, #16]
   return(result);
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1e5      	bne.n	8004072 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2220      	movs	r2, #32
 80040aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80040b4:	bf00      	nop
 80040b6:	3754      	adds	r7, #84	; 0x54
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f7ff fee4 	bl	8003ea8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040e0:	bf00      	nop
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b21      	cmp	r3, #33	; 0x21
 80040fa:	d13e      	bne.n	800417a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004104:	d114      	bne.n	8004130 <UART_Transmit_IT+0x48>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d110      	bne.n	8004130 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	881b      	ldrh	r3, [r3, #0]
 8004118:	461a      	mov	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004122:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	1c9a      	adds	r2, r3, #2
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	621a      	str	r2, [r3, #32]
 800412e:	e008      	b.n	8004142 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a1b      	ldr	r3, [r3, #32]
 8004134:	1c59      	adds	r1, r3, #1
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	6211      	str	r1, [r2, #32]
 800413a:	781a      	ldrb	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004146:	b29b      	uxth	r3, r3
 8004148:	3b01      	subs	r3, #1
 800414a:	b29b      	uxth	r3, r3
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	4619      	mov	r1, r3
 8004150:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10f      	bne.n	8004176 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68da      	ldr	r2, [r3, #12]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004164:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68da      	ldr	r2, [r3, #12]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004174:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004176:	2300      	movs	r3, #0
 8004178:	e000      	b.n	800417c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800417a:	2302      	movs	r3, #2
  }
}
 800417c:	4618      	mov	r0, r3
 800417e:	3714      	adds	r7, #20
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68da      	ldr	r2, [r3, #12]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800419e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f7ff fe73 	bl	8003e94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b08c      	sub	sp, #48	; 0x30
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b22      	cmp	r3, #34	; 0x22
 80041ca:	f040 80ae 	bne.w	800432a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041d6:	d117      	bne.n	8004208 <UART_Receive_IT+0x50>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d113      	bne.n	8004208 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80041e0:	2300      	movs	r3, #0
 80041e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004200:	1c9a      	adds	r2, r3, #2
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	629a      	str	r2, [r3, #40]	; 0x28
 8004206:	e026      	b.n	8004256 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800420e:	2300      	movs	r3, #0
 8004210:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800421a:	d007      	beq.n	800422c <UART_Receive_IT+0x74>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d10a      	bne.n	800423a <UART_Receive_IT+0x82>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d106      	bne.n	800423a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	b2da      	uxtb	r2, r3
 8004234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004236:	701a      	strb	r2, [r3, #0]
 8004238:	e008      	b.n	800424c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	b2db      	uxtb	r3, r3
 8004242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004246:	b2da      	uxtb	r2, r3
 8004248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800424a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004250:	1c5a      	adds	r2, r3, #1
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800425a:	b29b      	uxth	r3, r3
 800425c:	3b01      	subs	r3, #1
 800425e:	b29b      	uxth	r3, r3
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	4619      	mov	r1, r3
 8004264:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004266:	2b00      	cmp	r3, #0
 8004268:	d15d      	bne.n	8004326 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68da      	ldr	r2, [r3, #12]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f022 0220 	bic.w	r2, r2, #32
 8004278:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68da      	ldr	r2, [r3, #12]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004288:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	695a      	ldr	r2, [r3, #20]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 0201 	bic.w	r2, r2, #1
 8004298:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2220      	movs	r2, #32
 800429e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d135      	bne.n	800431c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	330c      	adds	r3, #12
 80042bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	e853 3f00 	ldrex	r3, [r3]
 80042c4:	613b      	str	r3, [r7, #16]
   return(result);
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	f023 0310 	bic.w	r3, r3, #16
 80042cc:	627b      	str	r3, [r7, #36]	; 0x24
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	330c      	adds	r3, #12
 80042d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042d6:	623a      	str	r2, [r7, #32]
 80042d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042da:	69f9      	ldr	r1, [r7, #28]
 80042dc:	6a3a      	ldr	r2, [r7, #32]
 80042de:	e841 2300 	strex	r3, r2, [r1]
 80042e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1e5      	bne.n	80042b6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0310 	and.w	r3, r3, #16
 80042f4:	2b10      	cmp	r3, #16
 80042f6:	d10a      	bne.n	800430e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042f8:	2300      	movs	r3, #0
 80042fa:	60fb      	str	r3, [r7, #12]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	60fb      	str	r3, [r7, #12]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	60fb      	str	r3, [r7, #12]
 800430c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004312:	4619      	mov	r1, r3
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f7ff fdd1 	bl	8003ebc <HAL_UARTEx_RxEventCallback>
 800431a:	e002      	b.n	8004322 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f7fc fbd1 	bl	8000ac4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004322:	2300      	movs	r3, #0
 8004324:	e002      	b.n	800432c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004326:	2300      	movs	r3, #0
 8004328:	e000      	b.n	800432c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800432a:	2302      	movs	r3, #2
  }
}
 800432c:	4618      	mov	r0, r3
 800432e:	3730      	adds	r7, #48	; 0x30
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004334:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004338:	b0c0      	sub	sp, #256	; 0x100
 800433a:	af00      	add	r7, sp, #0
 800433c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800434c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004350:	68d9      	ldr	r1, [r3, #12]
 8004352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	ea40 0301 	orr.w	r3, r0, r1
 800435c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800435e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	431a      	orrs	r2, r3
 800436c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	431a      	orrs	r2, r3
 8004374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004378:	69db      	ldr	r3, [r3, #28]
 800437a:	4313      	orrs	r3, r2
 800437c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800438c:	f021 010c 	bic.w	r1, r1, #12
 8004390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800439a:	430b      	orrs	r3, r1
 800439c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800439e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80043aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ae:	6999      	ldr	r1, [r3, #24]
 80043b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	ea40 0301 	orr.w	r3, r0, r1
 80043ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	4b8f      	ldr	r3, [pc, #572]	; (8004600 <UART_SetConfig+0x2cc>)
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d005      	beq.n	80043d4 <UART_SetConfig+0xa0>
 80043c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	4b8d      	ldr	r3, [pc, #564]	; (8004604 <UART_SetConfig+0x2d0>)
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d104      	bne.n	80043de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80043d4:	f7fe fb16 	bl	8002a04 <HAL_RCC_GetPCLK2Freq>
 80043d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80043dc:	e003      	b.n	80043e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043de:	f7fe fafd 	bl	80029dc <HAL_RCC_GetPCLK1Freq>
 80043e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ea:	69db      	ldr	r3, [r3, #28]
 80043ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043f0:	f040 810c 	bne.w	800460c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043f8:	2200      	movs	r2, #0
 80043fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80043fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004402:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004406:	4622      	mov	r2, r4
 8004408:	462b      	mov	r3, r5
 800440a:	1891      	adds	r1, r2, r2
 800440c:	65b9      	str	r1, [r7, #88]	; 0x58
 800440e:	415b      	adcs	r3, r3
 8004410:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004412:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004416:	4621      	mov	r1, r4
 8004418:	eb12 0801 	adds.w	r8, r2, r1
 800441c:	4629      	mov	r1, r5
 800441e:	eb43 0901 	adc.w	r9, r3, r1
 8004422:	f04f 0200 	mov.w	r2, #0
 8004426:	f04f 0300 	mov.w	r3, #0
 800442a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800442e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004432:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004436:	4690      	mov	r8, r2
 8004438:	4699      	mov	r9, r3
 800443a:	4623      	mov	r3, r4
 800443c:	eb18 0303 	adds.w	r3, r8, r3
 8004440:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004444:	462b      	mov	r3, r5
 8004446:	eb49 0303 	adc.w	r3, r9, r3
 800444a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800444e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800445a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800445e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004462:	460b      	mov	r3, r1
 8004464:	18db      	adds	r3, r3, r3
 8004466:	653b      	str	r3, [r7, #80]	; 0x50
 8004468:	4613      	mov	r3, r2
 800446a:	eb42 0303 	adc.w	r3, r2, r3
 800446e:	657b      	str	r3, [r7, #84]	; 0x54
 8004470:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004474:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004478:	f7fb ff1a 	bl	80002b0 <__aeabi_uldivmod>
 800447c:	4602      	mov	r2, r0
 800447e:	460b      	mov	r3, r1
 8004480:	4b61      	ldr	r3, [pc, #388]	; (8004608 <UART_SetConfig+0x2d4>)
 8004482:	fba3 2302 	umull	r2, r3, r3, r2
 8004486:	095b      	lsrs	r3, r3, #5
 8004488:	011c      	lsls	r4, r3, #4
 800448a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800448e:	2200      	movs	r2, #0
 8004490:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004494:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004498:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800449c:	4642      	mov	r2, r8
 800449e:	464b      	mov	r3, r9
 80044a0:	1891      	adds	r1, r2, r2
 80044a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80044a4:	415b      	adcs	r3, r3
 80044a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80044ac:	4641      	mov	r1, r8
 80044ae:	eb12 0a01 	adds.w	sl, r2, r1
 80044b2:	4649      	mov	r1, r9
 80044b4:	eb43 0b01 	adc.w	fp, r3, r1
 80044b8:	f04f 0200 	mov.w	r2, #0
 80044bc:	f04f 0300 	mov.w	r3, #0
 80044c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80044c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80044c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044cc:	4692      	mov	sl, r2
 80044ce:	469b      	mov	fp, r3
 80044d0:	4643      	mov	r3, r8
 80044d2:	eb1a 0303 	adds.w	r3, sl, r3
 80044d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044da:	464b      	mov	r3, r9
 80044dc:	eb4b 0303 	adc.w	r3, fp, r3
 80044e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80044e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80044f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80044f8:	460b      	mov	r3, r1
 80044fa:	18db      	adds	r3, r3, r3
 80044fc:	643b      	str	r3, [r7, #64]	; 0x40
 80044fe:	4613      	mov	r3, r2
 8004500:	eb42 0303 	adc.w	r3, r2, r3
 8004504:	647b      	str	r3, [r7, #68]	; 0x44
 8004506:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800450a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800450e:	f7fb fecf 	bl	80002b0 <__aeabi_uldivmod>
 8004512:	4602      	mov	r2, r0
 8004514:	460b      	mov	r3, r1
 8004516:	4611      	mov	r1, r2
 8004518:	4b3b      	ldr	r3, [pc, #236]	; (8004608 <UART_SetConfig+0x2d4>)
 800451a:	fba3 2301 	umull	r2, r3, r3, r1
 800451e:	095b      	lsrs	r3, r3, #5
 8004520:	2264      	movs	r2, #100	; 0x64
 8004522:	fb02 f303 	mul.w	r3, r2, r3
 8004526:	1acb      	subs	r3, r1, r3
 8004528:	00db      	lsls	r3, r3, #3
 800452a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800452e:	4b36      	ldr	r3, [pc, #216]	; (8004608 <UART_SetConfig+0x2d4>)
 8004530:	fba3 2302 	umull	r2, r3, r3, r2
 8004534:	095b      	lsrs	r3, r3, #5
 8004536:	005b      	lsls	r3, r3, #1
 8004538:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800453c:	441c      	add	r4, r3
 800453e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004542:	2200      	movs	r2, #0
 8004544:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004548:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800454c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004550:	4642      	mov	r2, r8
 8004552:	464b      	mov	r3, r9
 8004554:	1891      	adds	r1, r2, r2
 8004556:	63b9      	str	r1, [r7, #56]	; 0x38
 8004558:	415b      	adcs	r3, r3
 800455a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800455c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004560:	4641      	mov	r1, r8
 8004562:	1851      	adds	r1, r2, r1
 8004564:	6339      	str	r1, [r7, #48]	; 0x30
 8004566:	4649      	mov	r1, r9
 8004568:	414b      	adcs	r3, r1
 800456a:	637b      	str	r3, [r7, #52]	; 0x34
 800456c:	f04f 0200 	mov.w	r2, #0
 8004570:	f04f 0300 	mov.w	r3, #0
 8004574:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004578:	4659      	mov	r1, fp
 800457a:	00cb      	lsls	r3, r1, #3
 800457c:	4651      	mov	r1, sl
 800457e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004582:	4651      	mov	r1, sl
 8004584:	00ca      	lsls	r2, r1, #3
 8004586:	4610      	mov	r0, r2
 8004588:	4619      	mov	r1, r3
 800458a:	4603      	mov	r3, r0
 800458c:	4642      	mov	r2, r8
 800458e:	189b      	adds	r3, r3, r2
 8004590:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004594:	464b      	mov	r3, r9
 8004596:	460a      	mov	r2, r1
 8004598:	eb42 0303 	adc.w	r3, r2, r3
 800459c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80045ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80045b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80045b4:	460b      	mov	r3, r1
 80045b6:	18db      	adds	r3, r3, r3
 80045b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80045ba:	4613      	mov	r3, r2
 80045bc:	eb42 0303 	adc.w	r3, r2, r3
 80045c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80045ca:	f7fb fe71 	bl	80002b0 <__aeabi_uldivmod>
 80045ce:	4602      	mov	r2, r0
 80045d0:	460b      	mov	r3, r1
 80045d2:	4b0d      	ldr	r3, [pc, #52]	; (8004608 <UART_SetConfig+0x2d4>)
 80045d4:	fba3 1302 	umull	r1, r3, r3, r2
 80045d8:	095b      	lsrs	r3, r3, #5
 80045da:	2164      	movs	r1, #100	; 0x64
 80045dc:	fb01 f303 	mul.w	r3, r1, r3
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	3332      	adds	r3, #50	; 0x32
 80045e6:	4a08      	ldr	r2, [pc, #32]	; (8004608 <UART_SetConfig+0x2d4>)
 80045e8:	fba2 2303 	umull	r2, r3, r2, r3
 80045ec:	095b      	lsrs	r3, r3, #5
 80045ee:	f003 0207 	and.w	r2, r3, #7
 80045f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4422      	add	r2, r4
 80045fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045fc:	e106      	b.n	800480c <UART_SetConfig+0x4d8>
 80045fe:	bf00      	nop
 8004600:	40011000 	.word	0x40011000
 8004604:	40011400 	.word	0x40011400
 8004608:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800460c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004610:	2200      	movs	r2, #0
 8004612:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004616:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800461a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800461e:	4642      	mov	r2, r8
 8004620:	464b      	mov	r3, r9
 8004622:	1891      	adds	r1, r2, r2
 8004624:	6239      	str	r1, [r7, #32]
 8004626:	415b      	adcs	r3, r3
 8004628:	627b      	str	r3, [r7, #36]	; 0x24
 800462a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800462e:	4641      	mov	r1, r8
 8004630:	1854      	adds	r4, r2, r1
 8004632:	4649      	mov	r1, r9
 8004634:	eb43 0501 	adc.w	r5, r3, r1
 8004638:	f04f 0200 	mov.w	r2, #0
 800463c:	f04f 0300 	mov.w	r3, #0
 8004640:	00eb      	lsls	r3, r5, #3
 8004642:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004646:	00e2      	lsls	r2, r4, #3
 8004648:	4614      	mov	r4, r2
 800464a:	461d      	mov	r5, r3
 800464c:	4643      	mov	r3, r8
 800464e:	18e3      	adds	r3, r4, r3
 8004650:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004654:	464b      	mov	r3, r9
 8004656:	eb45 0303 	adc.w	r3, r5, r3
 800465a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800465e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800466a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800466e:	f04f 0200 	mov.w	r2, #0
 8004672:	f04f 0300 	mov.w	r3, #0
 8004676:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800467a:	4629      	mov	r1, r5
 800467c:	008b      	lsls	r3, r1, #2
 800467e:	4621      	mov	r1, r4
 8004680:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004684:	4621      	mov	r1, r4
 8004686:	008a      	lsls	r2, r1, #2
 8004688:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800468c:	f7fb fe10 	bl	80002b0 <__aeabi_uldivmod>
 8004690:	4602      	mov	r2, r0
 8004692:	460b      	mov	r3, r1
 8004694:	4b60      	ldr	r3, [pc, #384]	; (8004818 <UART_SetConfig+0x4e4>)
 8004696:	fba3 2302 	umull	r2, r3, r3, r2
 800469a:	095b      	lsrs	r3, r3, #5
 800469c:	011c      	lsls	r4, r3, #4
 800469e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046a2:	2200      	movs	r2, #0
 80046a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80046a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80046ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80046b0:	4642      	mov	r2, r8
 80046b2:	464b      	mov	r3, r9
 80046b4:	1891      	adds	r1, r2, r2
 80046b6:	61b9      	str	r1, [r7, #24]
 80046b8:	415b      	adcs	r3, r3
 80046ba:	61fb      	str	r3, [r7, #28]
 80046bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046c0:	4641      	mov	r1, r8
 80046c2:	1851      	adds	r1, r2, r1
 80046c4:	6139      	str	r1, [r7, #16]
 80046c6:	4649      	mov	r1, r9
 80046c8:	414b      	adcs	r3, r1
 80046ca:	617b      	str	r3, [r7, #20]
 80046cc:	f04f 0200 	mov.w	r2, #0
 80046d0:	f04f 0300 	mov.w	r3, #0
 80046d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046d8:	4659      	mov	r1, fp
 80046da:	00cb      	lsls	r3, r1, #3
 80046dc:	4651      	mov	r1, sl
 80046de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046e2:	4651      	mov	r1, sl
 80046e4:	00ca      	lsls	r2, r1, #3
 80046e6:	4610      	mov	r0, r2
 80046e8:	4619      	mov	r1, r3
 80046ea:	4603      	mov	r3, r0
 80046ec:	4642      	mov	r2, r8
 80046ee:	189b      	adds	r3, r3, r2
 80046f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80046f4:	464b      	mov	r3, r9
 80046f6:	460a      	mov	r2, r1
 80046f8:	eb42 0303 	adc.w	r3, r2, r3
 80046fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	67bb      	str	r3, [r7, #120]	; 0x78
 800470a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800470c:	f04f 0200 	mov.w	r2, #0
 8004710:	f04f 0300 	mov.w	r3, #0
 8004714:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004718:	4649      	mov	r1, r9
 800471a:	008b      	lsls	r3, r1, #2
 800471c:	4641      	mov	r1, r8
 800471e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004722:	4641      	mov	r1, r8
 8004724:	008a      	lsls	r2, r1, #2
 8004726:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800472a:	f7fb fdc1 	bl	80002b0 <__aeabi_uldivmod>
 800472e:	4602      	mov	r2, r0
 8004730:	460b      	mov	r3, r1
 8004732:	4611      	mov	r1, r2
 8004734:	4b38      	ldr	r3, [pc, #224]	; (8004818 <UART_SetConfig+0x4e4>)
 8004736:	fba3 2301 	umull	r2, r3, r3, r1
 800473a:	095b      	lsrs	r3, r3, #5
 800473c:	2264      	movs	r2, #100	; 0x64
 800473e:	fb02 f303 	mul.w	r3, r2, r3
 8004742:	1acb      	subs	r3, r1, r3
 8004744:	011b      	lsls	r3, r3, #4
 8004746:	3332      	adds	r3, #50	; 0x32
 8004748:	4a33      	ldr	r2, [pc, #204]	; (8004818 <UART_SetConfig+0x4e4>)
 800474a:	fba2 2303 	umull	r2, r3, r2, r3
 800474e:	095b      	lsrs	r3, r3, #5
 8004750:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004754:	441c      	add	r4, r3
 8004756:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800475a:	2200      	movs	r2, #0
 800475c:	673b      	str	r3, [r7, #112]	; 0x70
 800475e:	677a      	str	r2, [r7, #116]	; 0x74
 8004760:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004764:	4642      	mov	r2, r8
 8004766:	464b      	mov	r3, r9
 8004768:	1891      	adds	r1, r2, r2
 800476a:	60b9      	str	r1, [r7, #8]
 800476c:	415b      	adcs	r3, r3
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004774:	4641      	mov	r1, r8
 8004776:	1851      	adds	r1, r2, r1
 8004778:	6039      	str	r1, [r7, #0]
 800477a:	4649      	mov	r1, r9
 800477c:	414b      	adcs	r3, r1
 800477e:	607b      	str	r3, [r7, #4]
 8004780:	f04f 0200 	mov.w	r2, #0
 8004784:	f04f 0300 	mov.w	r3, #0
 8004788:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800478c:	4659      	mov	r1, fp
 800478e:	00cb      	lsls	r3, r1, #3
 8004790:	4651      	mov	r1, sl
 8004792:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004796:	4651      	mov	r1, sl
 8004798:	00ca      	lsls	r2, r1, #3
 800479a:	4610      	mov	r0, r2
 800479c:	4619      	mov	r1, r3
 800479e:	4603      	mov	r3, r0
 80047a0:	4642      	mov	r2, r8
 80047a2:	189b      	adds	r3, r3, r2
 80047a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80047a6:	464b      	mov	r3, r9
 80047a8:	460a      	mov	r2, r1
 80047aa:	eb42 0303 	adc.w	r3, r2, r3
 80047ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	663b      	str	r3, [r7, #96]	; 0x60
 80047ba:	667a      	str	r2, [r7, #100]	; 0x64
 80047bc:	f04f 0200 	mov.w	r2, #0
 80047c0:	f04f 0300 	mov.w	r3, #0
 80047c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80047c8:	4649      	mov	r1, r9
 80047ca:	008b      	lsls	r3, r1, #2
 80047cc:	4641      	mov	r1, r8
 80047ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047d2:	4641      	mov	r1, r8
 80047d4:	008a      	lsls	r2, r1, #2
 80047d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80047da:	f7fb fd69 	bl	80002b0 <__aeabi_uldivmod>
 80047de:	4602      	mov	r2, r0
 80047e0:	460b      	mov	r3, r1
 80047e2:	4b0d      	ldr	r3, [pc, #52]	; (8004818 <UART_SetConfig+0x4e4>)
 80047e4:	fba3 1302 	umull	r1, r3, r3, r2
 80047e8:	095b      	lsrs	r3, r3, #5
 80047ea:	2164      	movs	r1, #100	; 0x64
 80047ec:	fb01 f303 	mul.w	r3, r1, r3
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	011b      	lsls	r3, r3, #4
 80047f4:	3332      	adds	r3, #50	; 0x32
 80047f6:	4a08      	ldr	r2, [pc, #32]	; (8004818 <UART_SetConfig+0x4e4>)
 80047f8:	fba2 2303 	umull	r2, r3, r2, r3
 80047fc:	095b      	lsrs	r3, r3, #5
 80047fe:	f003 020f 	and.w	r2, r3, #15
 8004802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4422      	add	r2, r4
 800480a:	609a      	str	r2, [r3, #8]
}
 800480c:	bf00      	nop
 800480e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004812:	46bd      	mov	sp, r7
 8004814:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004818:	51eb851f 	.word	0x51eb851f

0800481c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f103 0208 	add.w	r2, r3, #8
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f04f 32ff 	mov.w	r2, #4294967295
 8004834:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f103 0208 	add.w	r2, r3, #8
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f103 0208 	add.w	r2, r3, #8
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800486a:	bf00      	nop
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8004876:	b480      	push	{r7}
 8004878:	b085      	sub	sp, #20
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
 800487e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	1c5a      	adds	r2, r3, #1
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	601a      	str	r2, [r3, #0]
}
 80048b2:	bf00      	nop
 80048b4:	3714      	adds	r7, #20
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80048be:	b480      	push	{r7}
 80048c0:	b085      	sub	sp, #20
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
 80048c6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d4:	d103      	bne.n	80048de <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	60fb      	str	r3, [r7, #12]
 80048dc:	e00c      	b.n	80048f8 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	3308      	adds	r3, #8
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	e002      	b.n	80048ec <vListInsert+0x2e>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	60fb      	str	r3, [r7, #12]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d2f6      	bcs.n	80048e6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	1c5a      	adds	r2, r3, #1
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	601a      	str	r2, [r3, #0]
}
 8004924:	bf00      	nop
 8004926:	3714      	adds	r7, #20
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	6892      	ldr	r2, [r2, #8]
 8004946:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	6852      	ldr	r2, [r2, #4]
 8004950:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	429a      	cmp	r2, r3
 800495a:	d103      	bne.n	8004964 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	689a      	ldr	r2, [r3, #8]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	1e5a      	subs	r2, r3, #1
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
}
 8004978:	4618      	mov	r0, r3
 800497a:	3714      	adds	r7, #20
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10a      	bne.n	80049ae <xQueueGenericReset+0x2a>
        __asm volatile
 8004998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499c:	f383 8811 	msr	BASEPRI, r3
 80049a0:	f3bf 8f6f 	isb	sy
 80049a4:	f3bf 8f4f 	dsb	sy
 80049a8:	60bb      	str	r3, [r7, #8]
    }
 80049aa:	bf00      	nop
 80049ac:	e7fe      	b.n	80049ac <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80049ae:	f002 fa93 	bl	8006ed8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ba:	68f9      	ldr	r1, [r7, #12]
 80049bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80049be:	fb01 f303 	mul.w	r3, r1, r3
 80049c2:	441a      	add	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049de:	3b01      	subs	r3, #1
 80049e0:	68f9      	ldr	r1, [r7, #12]
 80049e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80049e4:	fb01 f303 	mul.w	r3, r1, r3
 80049e8:	441a      	add	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	22ff      	movs	r2, #255	; 0xff
 80049f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	22ff      	movs	r2, #255	; 0xff
 80049fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d109      	bne.n	8004a18 <xQueueGenericReset+0x94>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00f      	beq.n	8004a2c <xQueueGenericReset+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	3310      	adds	r3, #16
 8004a10:	4618      	mov	r0, r3
 8004a12:	f001 f8b3 	bl	8005b7c <xTaskRemoveFromEventList>
 8004a16:	e009      	b.n	8004a2c <xQueueGenericReset+0xa8>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	3310      	adds	r3, #16
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7ff fefd 	bl	800481c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	3324      	adds	r3, #36	; 0x24
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7ff fef8 	bl	800481c <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8004a2c:	f002 fa84 	bl	8006f38 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8004a30:	2301      	movs	r3, #1
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b08c      	sub	sp, #48	; 0x30
 8004a3e:	af02      	add	r7, sp, #8
 8004a40:	60f8      	str	r0, [r7, #12]
 8004a42:	60b9      	str	r1, [r7, #8]
 8004a44:	4613      	mov	r3, r2
 8004a46:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d10a      	bne.n	8004a64 <xQueueGenericCreate+0x2a>
        __asm volatile
 8004a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a52:	f383 8811 	msr	BASEPRI, r3
 8004a56:	f3bf 8f6f 	isb	sy
 8004a5a:	f3bf 8f4f 	dsb	sy
 8004a5e:	61bb      	str	r3, [r7, #24]
    }
 8004a60:	bf00      	nop
 8004a62:	e7fe      	b.n	8004a62 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	fb02 f303 	mul.w	r3, r2, r3
 8004a6c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d006      	beq.n	8004a82 <xQueueGenericCreate+0x48>
 8004a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d101      	bne.n	8004a86 <xQueueGenericCreate+0x4c>
 8004a82:	2301      	movs	r3, #1
 8004a84:	e000      	b.n	8004a88 <xQueueGenericCreate+0x4e>
 8004a86:	2300      	movs	r3, #0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10a      	bne.n	8004aa2 <xQueueGenericCreate+0x68>
        __asm volatile
 8004a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a90:	f383 8811 	msr	BASEPRI, r3
 8004a94:	f3bf 8f6f 	isb	sy
 8004a98:	f3bf 8f4f 	dsb	sy
 8004a9c:	617b      	str	r3, [r7, #20]
    }
 8004a9e:	bf00      	nop
 8004aa0:	e7fe      	b.n	8004aa0 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa4:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8004aa8:	d90a      	bls.n	8004ac0 <xQueueGenericCreate+0x86>
        __asm volatile
 8004aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aae:	f383 8811 	msr	BASEPRI, r3
 8004ab2:	f3bf 8f6f 	isb	sy
 8004ab6:	f3bf 8f4f 	dsb	sy
 8004aba:	613b      	str	r3, [r7, #16]
    }
 8004abc:	bf00      	nop
 8004abe:	e7fe      	b.n	8004abe <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	3350      	adds	r3, #80	; 0x50
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f002 fb29 	bl	800711c <pvPortMalloc>
 8004aca:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8004acc:	6a3b      	ldr	r3, [r7, #32]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00d      	beq.n	8004aee <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004ad2:	6a3b      	ldr	r3, [r7, #32]
 8004ad4:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	3350      	adds	r3, #80	; 0x50
 8004ada:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004adc:	79fa      	ldrb	r2, [r7, #7]
 8004ade:	6a3b      	ldr	r3, [r7, #32]
 8004ae0:	9300      	str	r3, [sp, #0]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	69fa      	ldr	r2, [r7, #28]
 8004ae6:	68b9      	ldr	r1, [r7, #8]
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f000 f805 	bl	8004af8 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8004aee:	6a3b      	ldr	r3, [r7, #32]
    }
 8004af0:	4618      	mov	r0, r3
 8004af2:	3728      	adds	r7, #40	; 0x28
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
 8004b04:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d103      	bne.n	8004b14 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	601a      	str	r2, [r3, #0]
 8004b12:	e002      	b.n	8004b1a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	68ba      	ldr	r2, [r7, #8]
 8004b24:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b26:	2101      	movs	r1, #1
 8004b28:	69b8      	ldr	r0, [r7, #24]
 8004b2a:	f7ff ff2b 	bl	8004984 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	78fa      	ldrb	r2, [r7, #3]
 8004b32:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8004b36:	bf00      	nop
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
	...

08004b40 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b08e      	sub	sp, #56	; 0x38
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
 8004b4c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8004b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10a      	bne.n	8004b72 <xQueueGenericSend+0x32>
        __asm volatile
 8004b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b60:	f383 8811 	msr	BASEPRI, r3
 8004b64:	f3bf 8f6f 	isb	sy
 8004b68:	f3bf 8f4f 	dsb	sy
 8004b6c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004b6e:	bf00      	nop
 8004b70:	e7fe      	b.n	8004b70 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d103      	bne.n	8004b80 <xQueueGenericSend+0x40>
 8004b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d101      	bne.n	8004b84 <xQueueGenericSend+0x44>
 8004b80:	2301      	movs	r3, #1
 8004b82:	e000      	b.n	8004b86 <xQueueGenericSend+0x46>
 8004b84:	2300      	movs	r3, #0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10a      	bne.n	8004ba0 <xQueueGenericSend+0x60>
        __asm volatile
 8004b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8e:	f383 8811 	msr	BASEPRI, r3
 8004b92:	f3bf 8f6f 	isb	sy
 8004b96:	f3bf 8f4f 	dsb	sy
 8004b9a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004b9c:	bf00      	nop
 8004b9e:	e7fe      	b.n	8004b9e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d103      	bne.n	8004bae <xQueueGenericSend+0x6e>
 8004ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d101      	bne.n	8004bb2 <xQueueGenericSend+0x72>
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e000      	b.n	8004bb4 <xQueueGenericSend+0x74>
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10a      	bne.n	8004bce <xQueueGenericSend+0x8e>
        __asm volatile
 8004bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bbc:	f383 8811 	msr	BASEPRI, r3
 8004bc0:	f3bf 8f6f 	isb	sy
 8004bc4:	f3bf 8f4f 	dsb	sy
 8004bc8:	623b      	str	r3, [r7, #32]
    }
 8004bca:	bf00      	nop
 8004bcc:	e7fe      	b.n	8004bcc <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004bce:	f001 f96b 	bl	8005ea8 <xTaskGetSchedulerState>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d102      	bne.n	8004bde <xQueueGenericSend+0x9e>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <xQueueGenericSend+0xa2>
 8004bde:	2301      	movs	r3, #1
 8004be0:	e000      	b.n	8004be4 <xQueueGenericSend+0xa4>
 8004be2:	2300      	movs	r3, #0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d10a      	bne.n	8004bfe <xQueueGenericSend+0xbe>
        __asm volatile
 8004be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bec:	f383 8811 	msr	BASEPRI, r3
 8004bf0:	f3bf 8f6f 	isb	sy
 8004bf4:	f3bf 8f4f 	dsb	sy
 8004bf8:	61fb      	str	r3, [r7, #28]
    }
 8004bfa:	bf00      	nop
 8004bfc:	e7fe      	b.n	8004bfc <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004bfe:	f002 f96b 	bl	8006ed8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d302      	bcc.n	8004c14 <xQueueGenericSend+0xd4>
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d112      	bne.n	8004c3a <xQueueGenericSend+0xfa>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	68b9      	ldr	r1, [r7, #8]
 8004c18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c1a:	f000 faa2 	bl	8005162 <prvCopyDataToQueue>
 8004c1e:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d004      	beq.n	8004c32 <xQueueGenericSend+0xf2>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2a:	3324      	adds	r3, #36	; 0x24
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f000 ffa5 	bl	8005b7c <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004c32:	f002 f981 	bl	8006f38 <vPortExitCritical>
                return pdPASS;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e062      	b.n	8004d00 <xQueueGenericSend+0x1c0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d103      	bne.n	8004c48 <xQueueGenericSend+0x108>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004c40:	f002 f97a 	bl	8006f38 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8004c44:	2300      	movs	r3, #0
 8004c46:	e05b      	b.n	8004d00 <xQueueGenericSend+0x1c0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d106      	bne.n	8004c5c <xQueueGenericSend+0x11c>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004c4e:	f107 0314 	add.w	r3, r7, #20
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 fff4 	bl	8005c40 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004c5c:	f002 f96c 	bl	8006f38 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004c60:	f000 fd9e 	bl	80057a0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004c64:	f002 f938 	bl	8006ed8 <vPortEnterCritical>
 8004c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c6e:	b25b      	sxtb	r3, r3
 8004c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c74:	d103      	bne.n	8004c7e <xQueueGenericSend+0x13e>
 8004c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c84:	b25b      	sxtb	r3, r3
 8004c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8a:	d103      	bne.n	8004c94 <xQueueGenericSend+0x154>
 8004c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c94:	f002 f950 	bl	8006f38 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c98:	1d3a      	adds	r2, r7, #4
 8004c9a:	f107 0314 	add.w	r3, r7, #20
 8004c9e:	4611      	mov	r1, r2
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f000 ffe3 	bl	8005c6c <xTaskCheckForTimeOut>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d123      	bne.n	8004cf4 <xQueueGenericSend+0x1b4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004cac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cae:	f000 fb50 	bl	8005352 <prvIsQueueFull>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d017      	beq.n	8004ce8 <xQueueGenericSend+0x1a8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cba:	3310      	adds	r3, #16
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	4611      	mov	r1, r2
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f000 ff0b 	bl	8005adc <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004cc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cc8:	f000 fadb 	bl	8005282 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8004ccc:	f000 fd76 	bl	80057bc <xTaskResumeAll>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d193      	bne.n	8004bfe <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8004cd6:	4b0c      	ldr	r3, [pc, #48]	; (8004d08 <xQueueGenericSend+0x1c8>)
 8004cd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cdc:	601a      	str	r2, [r3, #0]
 8004cde:	f3bf 8f4f 	dsb	sy
 8004ce2:	f3bf 8f6f 	isb	sy
 8004ce6:	e78a      	b.n	8004bfe <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004ce8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cea:	f000 faca 	bl	8005282 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004cee:	f000 fd65 	bl	80057bc <xTaskResumeAll>
 8004cf2:	e784      	b.n	8004bfe <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8004cf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cf6:	f000 fac4 	bl	8005282 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004cfa:	f000 fd5f 	bl	80057bc <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8004cfe:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3738      	adds	r7, #56	; 0x38
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	e000ed04 	.word	0xe000ed04

08004d0c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b090      	sub	sp, #64	; 0x40
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
 8004d18:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8004d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d10a      	bne.n	8004d3a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8004d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d28:	f383 8811 	msr	BASEPRI, r3
 8004d2c:	f3bf 8f6f 	isb	sy
 8004d30:	f3bf 8f4f 	dsb	sy
 8004d34:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004d36:	bf00      	nop
 8004d38:	e7fe      	b.n	8004d38 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d103      	bne.n	8004d48 <xQueueGenericSendFromISR+0x3c>
 8004d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d101      	bne.n	8004d4c <xQueueGenericSendFromISR+0x40>
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e000      	b.n	8004d4e <xQueueGenericSendFromISR+0x42>
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10a      	bne.n	8004d68 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8004d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d56:	f383 8811 	msr	BASEPRI, r3
 8004d5a:	f3bf 8f6f 	isb	sy
 8004d5e:	f3bf 8f4f 	dsb	sy
 8004d62:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8004d64:	bf00      	nop
 8004d66:	e7fe      	b.n	8004d66 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d103      	bne.n	8004d76 <xQueueGenericSendFromISR+0x6a>
 8004d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d101      	bne.n	8004d7a <xQueueGenericSendFromISR+0x6e>
 8004d76:	2301      	movs	r3, #1
 8004d78:	e000      	b.n	8004d7c <xQueueGenericSendFromISR+0x70>
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d10a      	bne.n	8004d96 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8004d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d84:	f383 8811 	msr	BASEPRI, r3
 8004d88:	f3bf 8f6f 	isb	sy
 8004d8c:	f3bf 8f4f 	dsb	sy
 8004d90:	623b      	str	r3, [r7, #32]
    }
 8004d92:	bf00      	nop
 8004d94:	e7fe      	b.n	8004d94 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d96:	f002 f981 	bl	800709c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8004d9a:	f3ef 8211 	mrs	r2, BASEPRI
 8004d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da2:	f383 8811 	msr	BASEPRI, r3
 8004da6:	f3bf 8f6f 	isb	sy
 8004daa:	f3bf 8f4f 	dsb	sy
 8004dae:	61fa      	str	r2, [r7, #28]
 8004db0:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8004db2:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004db4:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d302      	bcc.n	8004dc8 <xQueueGenericSendFromISR+0xbc>
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d13e      	bne.n	8004e46 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8004dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004dce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	68b9      	ldr	r1, [r7, #8]
 8004ddc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004dde:	f000 f9c0 	bl	8005162 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8004de2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dea:	d112      	bne.n	8004e12 <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d025      	beq.n	8004e40 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df6:	3324      	adds	r3, #36	; 0x24
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 febf 	bl	8005b7c <xTaskRemoveFromEventList>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d01d      	beq.n	8004e40 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d01a      	beq.n	8004e40 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	e016      	b.n	8004e40 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8004e12:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004e16:	2b7f      	cmp	r3, #127	; 0x7f
 8004e18:	d10a      	bne.n	8004e30 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8004e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1e:	f383 8811 	msr	BASEPRI, r3
 8004e22:	f3bf 8f6f 	isb	sy
 8004e26:	f3bf 8f4f 	dsb	sy
 8004e2a:	617b      	str	r3, [r7, #20]
    }
 8004e2c:	bf00      	nop
 8004e2e:	e7fe      	b.n	8004e2e <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004e34:	3301      	adds	r3, #1
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	b25a      	sxtb	r2, r3
 8004e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8004e40:	2301      	movs	r3, #1
 8004e42:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8004e44:	e001      	b.n	8004e4a <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8004e46:	2300      	movs	r3, #0
 8004e48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e4c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004e54:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3740      	adds	r7, #64	; 0x40
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b08c      	sub	sp, #48	; 0x30
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10a      	bne.n	8004e90 <xQueueReceive+0x30>
        __asm volatile
 8004e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7e:	f383 8811 	msr	BASEPRI, r3
 8004e82:	f3bf 8f6f 	isb	sy
 8004e86:	f3bf 8f4f 	dsb	sy
 8004e8a:	623b      	str	r3, [r7, #32]
    }
 8004e8c:	bf00      	nop
 8004e8e:	e7fe      	b.n	8004e8e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d103      	bne.n	8004e9e <xQueueReceive+0x3e>
 8004e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <xQueueReceive+0x42>
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e000      	b.n	8004ea4 <xQueueReceive+0x44>
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d10a      	bne.n	8004ebe <xQueueReceive+0x5e>
        __asm volatile
 8004ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eac:	f383 8811 	msr	BASEPRI, r3
 8004eb0:	f3bf 8f6f 	isb	sy
 8004eb4:	f3bf 8f4f 	dsb	sy
 8004eb8:	61fb      	str	r3, [r7, #28]
    }
 8004eba:	bf00      	nop
 8004ebc:	e7fe      	b.n	8004ebc <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ebe:	f000 fff3 	bl	8005ea8 <xTaskGetSchedulerState>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d102      	bne.n	8004ece <xQueueReceive+0x6e>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d101      	bne.n	8004ed2 <xQueueReceive+0x72>
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e000      	b.n	8004ed4 <xQueueReceive+0x74>
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d10a      	bne.n	8004eee <xQueueReceive+0x8e>
        __asm volatile
 8004ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004edc:	f383 8811 	msr	BASEPRI, r3
 8004ee0:	f3bf 8f6f 	isb	sy
 8004ee4:	f3bf 8f4f 	dsb	sy
 8004ee8:	61bb      	str	r3, [r7, #24]
    }
 8004eea:	bf00      	nop
 8004eec:	e7fe      	b.n	8004eec <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004eee:	f001 fff3 	bl	8006ed8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d014      	beq.n	8004f28 <xQueueReceive+0xc8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004efe:	68b9      	ldr	r1, [r7, #8]
 8004f00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f02:	f000 f998 	bl	8005236 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	1e5a      	subs	r2, r3, #1
 8004f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d004      	beq.n	8004f20 <xQueueReceive+0xc0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f18:	3310      	adds	r3, #16
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 fe2e 	bl	8005b7c <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004f20:	f002 f80a 	bl	8006f38 <vPortExitCritical>
                return pdPASS;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e069      	b.n	8004ffc <xQueueReceive+0x19c>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d103      	bne.n	8004f36 <xQueueReceive+0xd6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004f2e:	f002 f803 	bl	8006f38 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8004f32:	2300      	movs	r3, #0
 8004f34:	e062      	b.n	8004ffc <xQueueReceive+0x19c>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d106      	bne.n	8004f4a <xQueueReceive+0xea>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004f3c:	f107 0310 	add.w	r3, r7, #16
 8004f40:	4618      	mov	r0, r3
 8004f42:	f000 fe7d 	bl	8005c40 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004f46:	2301      	movs	r3, #1
 8004f48:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004f4a:	f001 fff5 	bl	8006f38 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004f4e:	f000 fc27 	bl	80057a0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004f52:	f001 ffc1 	bl	8006ed8 <vPortEnterCritical>
 8004f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f5c:	b25b      	sxtb	r3, r3
 8004f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f62:	d103      	bne.n	8004f6c <xQueueReceive+0x10c>
 8004f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f72:	b25b      	sxtb	r3, r3
 8004f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f78:	d103      	bne.n	8004f82 <xQueueReceive+0x122>
 8004f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f82:	f001 ffd9 	bl	8006f38 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f86:	1d3a      	adds	r2, r7, #4
 8004f88:	f107 0310 	add.w	r3, r7, #16
 8004f8c:	4611      	mov	r1, r2
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 fe6c 	bl	8005c6c <xTaskCheckForTimeOut>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d123      	bne.n	8004fe2 <xQueueReceive+0x182>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f9c:	f000 f9c3 	bl	8005326 <prvIsQueueEmpty>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d017      	beq.n	8004fd6 <xQueueReceive+0x176>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa8:	3324      	adds	r3, #36	; 0x24
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	4611      	mov	r1, r2
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f000 fd94 	bl	8005adc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004fb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fb6:	f000 f964 	bl	8005282 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004fba:	f000 fbff 	bl	80057bc <xTaskResumeAll>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d194      	bne.n	8004eee <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8004fc4:	4b0f      	ldr	r3, [pc, #60]	; (8005004 <xQueueReceive+0x1a4>)
 8004fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fca:	601a      	str	r2, [r3, #0]
 8004fcc:	f3bf 8f4f 	dsb	sy
 8004fd0:	f3bf 8f6f 	isb	sy
 8004fd4:	e78b      	b.n	8004eee <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004fd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fd8:	f000 f953 	bl	8005282 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004fdc:	f000 fbee 	bl	80057bc <xTaskResumeAll>
 8004fe0:	e785      	b.n	8004eee <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8004fe2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fe4:	f000 f94d 	bl	8005282 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004fe8:	f000 fbe8 	bl	80057bc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fee:	f000 f99a 	bl	8005326 <prvIsQueueEmpty>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f43f af7a 	beq.w	8004eee <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8004ffa:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3730      	adds	r7, #48	; 0x30
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	e000ed04 	.word	0xe000ed04

08005008 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b090      	sub	sp, #64	; 0x40
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8005018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10a      	bne.n	8005034 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 800501e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005022:	f383 8811 	msr	BASEPRI, r3
 8005026:	f3bf 8f6f 	isb	sy
 800502a:	f3bf 8f4f 	dsb	sy
 800502e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005030:	bf00      	nop
 8005032:	e7fe      	b.n	8005032 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d103      	bne.n	8005042 <xQueueReceiveFromISR+0x3a>
 800503a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <xQueueReceiveFromISR+0x3e>
 8005042:	2301      	movs	r3, #1
 8005044:	e000      	b.n	8005048 <xQueueReceiveFromISR+0x40>
 8005046:	2300      	movs	r3, #0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d10a      	bne.n	8005062 <xQueueReceiveFromISR+0x5a>
        __asm volatile
 800504c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005050:	f383 8811 	msr	BASEPRI, r3
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	f3bf 8f4f 	dsb	sy
 800505c:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800505e:	bf00      	nop
 8005060:	e7fe      	b.n	8005060 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005062:	f002 f81b 	bl	800709c <vPortValidateInterruptPriority>
        __asm volatile
 8005066:	f3ef 8211 	mrs	r2, BASEPRI
 800506a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800506e:	f383 8811 	msr	BASEPRI, r3
 8005072:	f3bf 8f6f 	isb	sy
 8005076:	f3bf 8f4f 	dsb	sy
 800507a:	623a      	str	r2, [r7, #32]
 800507c:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 800507e:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005080:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005086:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508a:	2b00      	cmp	r3, #0
 800508c:	d03e      	beq.n	800510c <xQueueReceiveFromISR+0x104>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 800508e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005090:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005094:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005098:	68b9      	ldr	r1, [r7, #8]
 800509a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800509c:	f000 f8cb 	bl	8005236 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80050a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a2:	1e5a      	subs	r2, r3, #1
 80050a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a6:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 80050a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80050ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b0:	d112      	bne.n	80050d8 <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d025      	beq.n	8005106 <xQueueReceiveFromISR+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050bc:	3310      	adds	r3, #16
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 fd5c 	bl	8005b7c <xTaskRemoveFromEventList>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d01d      	beq.n	8005106 <xQueueReceiveFromISR+0xfe>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d01a      	beq.n	8005106 <xQueueReceiveFromISR+0xfe>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	e016      	b.n	8005106 <xQueueReceiveFromISR+0xfe>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 80050d8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80050dc:	2b7f      	cmp	r3, #127	; 0x7f
 80050de:	d10a      	bne.n	80050f6 <xQueueReceiveFromISR+0xee>
        __asm volatile
 80050e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e4:	f383 8811 	msr	BASEPRI, r3
 80050e8:	f3bf 8f6f 	isb	sy
 80050ec:	f3bf 8f4f 	dsb	sy
 80050f0:	61bb      	str	r3, [r7, #24]
    }
 80050f2:	bf00      	nop
 80050f4:	e7fe      	b.n	80050f4 <xQueueReceiveFromISR+0xec>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80050f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80050fa:	3301      	adds	r3, #1
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	b25a      	sxtb	r2, r3
 8005100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005102:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 8005106:	2301      	movs	r3, #1
 8005108:	63fb      	str	r3, [r7, #60]	; 0x3c
 800510a:	e001      	b.n	8005110 <xQueueReceiveFromISR+0x108>
        }
        else
        {
            xReturn = pdFAIL;
 800510c:	2300      	movs	r3, #0
 800510e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005112:	617b      	str	r3, [r7, #20]
        __asm volatile
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	f383 8811 	msr	BASEPRI, r3
    }
 800511a:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800511c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800511e:	4618      	mov	r0, r3
 8005120:	3740      	adds	r7, #64	; 0x40
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005126:	b580      	push	{r7, lr}
 8005128:	b084      	sub	sp, #16
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d10a      	bne.n	800514a <uxQueueMessagesWaiting+0x24>
        __asm volatile
 8005134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005138:	f383 8811 	msr	BASEPRI, r3
 800513c:	f3bf 8f6f 	isb	sy
 8005140:	f3bf 8f4f 	dsb	sy
 8005144:	60bb      	str	r3, [r7, #8]
    }
 8005146:	bf00      	nop
 8005148:	e7fe      	b.n	8005148 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 800514a:	f001 fec5 	bl	8006ed8 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005152:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8005154:	f001 fef0 	bl	8006f38 <vPortExitCritical>

    return uxReturn;
 8005158:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b086      	sub	sp, #24
 8005166:	af00      	add	r7, sp, #0
 8005168:	60f8      	str	r0, [r7, #12]
 800516a:	60b9      	str	r1, [r7, #8]
 800516c:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800516e:	2300      	movs	r3, #0
 8005170:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005176:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10d      	bne.n	800519c <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d14d      	bne.n	8005224 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	4618      	mov	r0, r3
 800518e:	f000 fea9 	bl	8005ee4 <xTaskPriorityDisinherit>
 8005192:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	609a      	str	r2, [r3, #8]
 800519a:	e043      	b.n	8005224 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d119      	bne.n	80051d6 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6858      	ldr	r0, [r3, #4]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051aa:	461a      	mov	r2, r3
 80051ac:	68b9      	ldr	r1, [r7, #8]
 80051ae:	f002 fb66 	bl	800787e <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ba:	441a      	add	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d32b      	bcc.n	8005224 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	605a      	str	r2, [r3, #4]
 80051d4:	e026      	b.n	8005224 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	68d8      	ldr	r0, [r3, #12]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051de:	461a      	mov	r2, r3
 80051e0:	68b9      	ldr	r1, [r7, #8]
 80051e2:	f002 fb4c 	bl	800787e <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	68da      	ldr	r2, [r3, #12]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ee:	425b      	negs	r3, r3
 80051f0:	441a      	add	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	68da      	ldr	r2, [r3, #12]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d207      	bcs.n	8005212 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	689a      	ldr	r2, [r3, #8]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520a:	425b      	negs	r3, r3
 800520c:	441a      	add	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2b02      	cmp	r3, #2
 8005216:	d105      	bne.n	8005224 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d002      	beq.n	8005224 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	3b01      	subs	r3, #1
 8005222:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	1c5a      	adds	r2, r3, #1
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800522c:	697b      	ldr	r3, [r7, #20]
}
 800522e:	4618      	mov	r0, r3
 8005230:	3718      	adds	r7, #24
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8005236:	b580      	push	{r7, lr}
 8005238:	b082      	sub	sp, #8
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
 800523e:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005244:	2b00      	cmp	r3, #0
 8005246:	d018      	beq.n	800527a <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68da      	ldr	r2, [r3, #12]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005250:	441a      	add	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	68da      	ldr	r2, [r3, #12]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	429a      	cmp	r2, r3
 8005260:	d303      	bcc.n	800526a <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68d9      	ldr	r1, [r3, #12]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005272:	461a      	mov	r2, r3
 8005274:	6838      	ldr	r0, [r7, #0]
 8005276:	f002 fb02 	bl	800787e <memcpy>
    }
}
 800527a:	bf00      	nop
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b084      	sub	sp, #16
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800528a:	f001 fe25 	bl	8006ed8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005294:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005296:	e011      	b.n	80052bc <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529c:	2b00      	cmp	r3, #0
 800529e:	d012      	beq.n	80052c6 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	3324      	adds	r3, #36	; 0x24
 80052a4:	4618      	mov	r0, r3
 80052a6:	f000 fc69 	bl	8005b7c <xTaskRemoveFromEventList>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d001      	beq.n	80052b4 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80052b0:	f000 fd42 	bl	8005d38 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80052b4:	7bfb      	ldrb	r3, [r7, #15]
 80052b6:	3b01      	subs	r3, #1
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80052bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	dce9      	bgt.n	8005298 <prvUnlockQueue+0x16>
 80052c4:	e000      	b.n	80052c8 <prvUnlockQueue+0x46>
                        break;
 80052c6:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	22ff      	movs	r2, #255	; 0xff
 80052cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80052d0:	f001 fe32 	bl	8006f38 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80052d4:	f001 fe00 	bl	8006ed8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052de:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80052e0:	e011      	b.n	8005306 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d012      	beq.n	8005310 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	3310      	adds	r3, #16
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 fc44 	bl	8005b7c <xTaskRemoveFromEventList>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80052fa:	f000 fd1d 	bl	8005d38 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80052fe:	7bbb      	ldrb	r3, [r7, #14]
 8005300:	3b01      	subs	r3, #1
 8005302:	b2db      	uxtb	r3, r3
 8005304:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005306:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800530a:	2b00      	cmp	r3, #0
 800530c:	dce9      	bgt.n	80052e2 <prvUnlockQueue+0x60>
 800530e:	e000      	b.n	8005312 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8005310:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	22ff      	movs	r2, #255	; 0xff
 8005316:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800531a:	f001 fe0d 	bl	8006f38 <vPortExitCritical>
}
 800531e:	bf00      	nop
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b084      	sub	sp, #16
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800532e:	f001 fdd3 	bl	8006ed8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005336:	2b00      	cmp	r3, #0
 8005338:	d102      	bne.n	8005340 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800533a:	2301      	movs	r3, #1
 800533c:	60fb      	str	r3, [r7, #12]
 800533e:	e001      	b.n	8005344 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8005340:	2300      	movs	r3, #0
 8005342:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005344:	f001 fdf8 	bl	8006f38 <vPortExitCritical>

    return xReturn;
 8005348:	68fb      	ldr	r3, [r7, #12]
}
 800534a:	4618      	mov	r0, r3
 800534c:	3710      	adds	r7, #16
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b084      	sub	sp, #16
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800535a:	f001 fdbd 	bl	8006ed8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005366:	429a      	cmp	r2, r3
 8005368:	d102      	bne.n	8005370 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800536a:	2301      	movs	r3, #1
 800536c:	60fb      	str	r3, [r7, #12]
 800536e:	e001      	b.n	8005374 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8005370:	2300      	movs	r3, #0
 8005372:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005374:	f001 fde0 	bl	8006f38 <vPortExitCritical>

    return xReturn;
 8005378:	68fb      	ldr	r3, [r7, #12]
}
 800537a:	4618      	mov	r0, r3
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8005382:	b480      	push	{r7}
 8005384:	b087      	sub	sp, #28
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d10a      	bne.n	80053aa <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 8005394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005398:	f383 8811 	msr	BASEPRI, r3
 800539c:	f3bf 8f6f 	isb	sy
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	60fb      	str	r3, [r7, #12]
    }
 80053a6:	bf00      	nop
 80053a8:	e7fe      	b.n	80053a8 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d102      	bne.n	80053bc <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 80053b6:	2301      	movs	r3, #1
 80053b8:	617b      	str	r3, [r7, #20]
 80053ba:	e001      	b.n	80053c0 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 80053bc:	2300      	movs	r3, #0
 80053be:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80053c0:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80053c2:	4618      	mov	r0, r3
 80053c4:	371c      	adds	r7, #28
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
	...

080053d0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80053da:	2300      	movs	r3, #0
 80053dc:	60fb      	str	r3, [r7, #12]
 80053de:	e014      	b.n	800540a <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80053e0:	4a0f      	ldr	r2, [pc, #60]	; (8005420 <vQueueAddToRegistry+0x50>)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10b      	bne.n	8005404 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80053ec:	490c      	ldr	r1, [pc, #48]	; (8005420 <vQueueAddToRegistry+0x50>)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	683a      	ldr	r2, [r7, #0]
 80053f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80053f6:	4a0a      	ldr	r2, [pc, #40]	; (8005420 <vQueueAddToRegistry+0x50>)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	00db      	lsls	r3, r3, #3
 80053fc:	4413      	add	r3, r2
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8005402:	e006      	b.n	8005412 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	3301      	adds	r3, #1
 8005408:	60fb      	str	r3, [r7, #12]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2b07      	cmp	r3, #7
 800540e:	d9e7      	bls.n	80053e0 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8005410:	bf00      	nop
 8005412:	bf00      	nop
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	200001d0 	.word	0x200001d0

08005424 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8005434:	f001 fd50 	bl	8006ed8 <vPortEnterCritical>
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800543e:	b25b      	sxtb	r3, r3
 8005440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005444:	d103      	bne.n	800544e <vQueueWaitForMessageRestricted+0x2a>
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005454:	b25b      	sxtb	r3, r3
 8005456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545a:	d103      	bne.n	8005464 <vQueueWaitForMessageRestricted+0x40>
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005464:	f001 fd68 	bl	8006f38 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546c:	2b00      	cmp	r3, #0
 800546e:	d106      	bne.n	800547e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	3324      	adds	r3, #36	; 0x24
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	68b9      	ldr	r1, [r7, #8]
 8005478:	4618      	mov	r0, r3
 800547a:	f000 fb53 	bl	8005b24 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800547e:	6978      	ldr	r0, [r7, #20]
 8005480:	f7ff feff 	bl	8005282 <prvUnlockQueue>
    }
 8005484:	bf00      	nop
 8005486:	3718      	adds	r7, #24
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800548c:	b580      	push	{r7, lr}
 800548e:	b08c      	sub	sp, #48	; 0x30
 8005490:	af04      	add	r7, sp, #16
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	603b      	str	r3, [r7, #0]
 8005498:	4613      	mov	r3, r2
 800549a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800549c:	88fb      	ldrh	r3, [r7, #6]
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4618      	mov	r0, r3
 80054a2:	f001 fe3b 	bl	800711c <pvPortMalloc>
 80054a6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00e      	beq.n	80054cc <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80054ae:	2058      	movs	r0, #88	; 0x58
 80054b0:	f001 fe34 	bl	800711c <pvPortMalloc>
 80054b4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d003      	beq.n	80054c4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	631a      	str	r2, [r3, #48]	; 0x30
 80054c2:	e005      	b.n	80054d0 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80054c4:	6978      	ldr	r0, [r7, #20]
 80054c6:	f001 ff09 	bl	80072dc <vPortFree>
 80054ca:	e001      	b.n	80054d0 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80054cc:	2300      	movs	r3, #0
 80054ce:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d013      	beq.n	80054fe <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80054d6:	88fa      	ldrh	r2, [r7, #6]
 80054d8:	2300      	movs	r3, #0
 80054da:	9303      	str	r3, [sp, #12]
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	9302      	str	r3, [sp, #8]
 80054e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e2:	9301      	str	r3, [sp, #4]
 80054e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e6:	9300      	str	r3, [sp, #0]
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	68b9      	ldr	r1, [r7, #8]
 80054ec:	68f8      	ldr	r0, [r7, #12]
 80054ee:	f000 f80e 	bl	800550e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80054f2:	69f8      	ldr	r0, [r7, #28]
 80054f4:	f000 f8a2 	bl	800563c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80054f8:	2301      	movs	r3, #1
 80054fa:	61bb      	str	r3, [r7, #24]
 80054fc:	e002      	b.n	8005504 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80054fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005502:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8005504:	69bb      	ldr	r3, [r7, #24]
    }
 8005506:	4618      	mov	r0, r3
 8005508:	3720      	adds	r7, #32
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b088      	sub	sp, #32
 8005512:	af00      	add	r7, sp, #0
 8005514:	60f8      	str	r0, [r7, #12]
 8005516:	60b9      	str	r1, [r7, #8]
 8005518:	607a      	str	r2, [r7, #4]
 800551a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800551c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	461a      	mov	r2, r3
 8005526:	21a5      	movs	r1, #165	; 0xa5
 8005528:	f002 f92d 	bl	8007786 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800552c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005536:	3b01      	subs	r3, #1
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	4413      	add	r3, r2
 800553c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	f023 0307 	bic.w	r3, r3, #7
 8005544:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	f003 0307 	and.w	r3, r3, #7
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00a      	beq.n	8005566 <prvInitialiseNewTask+0x58>
        __asm volatile
 8005550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005554:	f383 8811 	msr	BASEPRI, r3
 8005558:	f3bf 8f6f 	isb	sy
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	617b      	str	r3, [r7, #20]
    }
 8005562:	bf00      	nop
 8005564:	e7fe      	b.n	8005564 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d01f      	beq.n	80055ac <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800556c:	2300      	movs	r3, #0
 800556e:	61fb      	str	r3, [r7, #28]
 8005570:	e012      	b.n	8005598 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	4413      	add	r3, r2
 8005578:	7819      	ldrb	r1, [r3, #0]
 800557a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	4413      	add	r3, r2
 8005580:	3334      	adds	r3, #52	; 0x34
 8005582:	460a      	mov	r2, r1
 8005584:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8005586:	68ba      	ldr	r2, [r7, #8]
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	4413      	add	r3, r2
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d006      	beq.n	80055a0 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	3301      	adds	r3, #1
 8005596:	61fb      	str	r3, [r7, #28]
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	2b09      	cmp	r3, #9
 800559c:	d9e9      	bls.n	8005572 <prvInitialiseNewTask+0x64>
 800559e:	e000      	b.n	80055a2 <prvInitialiseNewTask+0x94>
            {
                break;
 80055a0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80055a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80055aa:	e003      	b.n	80055b4 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80055ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80055b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b6:	2b04      	cmp	r3, #4
 80055b8:	d901      	bls.n	80055be <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80055ba:	2304      	movs	r3, #4
 80055bc:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80055be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055c2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80055c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055c8:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80055ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055cc:	2200      	movs	r2, #0
 80055ce:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80055d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d2:	3304      	adds	r3, #4
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7ff f941 	bl	800485c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80055da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055dc:	3318      	adds	r3, #24
 80055de:	4618      	mov	r0, r3
 80055e0:	f7ff f93c 	bl	800485c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80055e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055e8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ec:	f1c3 0205 	rsb	r2, r3, #5
 80055f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80055f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055f8:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80055fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fc:	3350      	adds	r3, #80	; 0x50
 80055fe:	2204      	movs	r2, #4
 8005600:	2100      	movs	r1, #0
 8005602:	4618      	mov	r0, r3
 8005604:	f002 f8bf 	bl	8007786 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8005608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560a:	3354      	adds	r3, #84	; 0x54
 800560c:	2201      	movs	r2, #1
 800560e:	2100      	movs	r1, #0
 8005610:	4618      	mov	r0, r3
 8005612:	f002 f8b8 	bl	8007786 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	68f9      	ldr	r1, [r7, #12]
 800561a:	69b8      	ldr	r0, [r7, #24]
 800561c:	f001 fb2e 	bl	8006c7c <pxPortInitialiseStack>
 8005620:	4602      	mov	r2, r0
 8005622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005624:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8005626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005628:	2b00      	cmp	r3, #0
 800562a:	d002      	beq.n	8005632 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800562c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800562e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005630:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005632:	bf00      	nop
 8005634:	3720      	adds	r7, #32
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
	...

0800563c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8005644:	f001 fc48 	bl	8006ed8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8005648:	4b26      	ldr	r3, [pc, #152]	; (80056e4 <prvAddNewTaskToReadyList+0xa8>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	3301      	adds	r3, #1
 800564e:	4a25      	ldr	r2, [pc, #148]	; (80056e4 <prvAddNewTaskToReadyList+0xa8>)
 8005650:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8005652:	4b25      	ldr	r3, [pc, #148]	; (80056e8 <prvAddNewTaskToReadyList+0xac>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d109      	bne.n	800566e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800565a:	4a23      	ldr	r2, [pc, #140]	; (80056e8 <prvAddNewTaskToReadyList+0xac>)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005660:	4b20      	ldr	r3, [pc, #128]	; (80056e4 <prvAddNewTaskToReadyList+0xa8>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d110      	bne.n	800568a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8005668:	f000 fb84 	bl	8005d74 <prvInitialiseTaskLists>
 800566c:	e00d      	b.n	800568a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800566e:	4b1f      	ldr	r3, [pc, #124]	; (80056ec <prvAddNewTaskToReadyList+0xb0>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d109      	bne.n	800568a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005676:	4b1c      	ldr	r3, [pc, #112]	; (80056e8 <prvAddNewTaskToReadyList+0xac>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005680:	429a      	cmp	r2, r3
 8005682:	d802      	bhi.n	800568a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005684:	4a18      	ldr	r2, [pc, #96]	; (80056e8 <prvAddNewTaskToReadyList+0xac>)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800568a:	4b19      	ldr	r3, [pc, #100]	; (80056f0 <prvAddNewTaskToReadyList+0xb4>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	3301      	adds	r3, #1
 8005690:	4a17      	ldr	r2, [pc, #92]	; (80056f0 <prvAddNewTaskToReadyList+0xb4>)
 8005692:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005694:	4b16      	ldr	r3, [pc, #88]	; (80056f0 <prvAddNewTaskToReadyList+0xb4>)
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a0:	2201      	movs	r2, #1
 80056a2:	409a      	lsls	r2, r3
 80056a4:	4b13      	ldr	r3, [pc, #76]	; (80056f4 <prvAddNewTaskToReadyList+0xb8>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	4a12      	ldr	r2, [pc, #72]	; (80056f4 <prvAddNewTaskToReadyList+0xb8>)
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b2:	4613      	mov	r3, r2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	4413      	add	r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	4a0f      	ldr	r2, [pc, #60]	; (80056f8 <prvAddNewTaskToReadyList+0xbc>)
 80056bc:	441a      	add	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	3304      	adds	r3, #4
 80056c2:	4619      	mov	r1, r3
 80056c4:	4610      	mov	r0, r2
 80056c6:	f7ff f8d6 	bl	8004876 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80056ca:	f001 fc35 	bl	8006f38 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80056ce:	4b07      	ldr	r3, [pc, #28]	; (80056ec <prvAddNewTaskToReadyList+0xb0>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d001      	beq.n	80056da <prvAddNewTaskToReadyList+0x9e>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80056d6:	4b04      	ldr	r3, [pc, #16]	; (80056e8 <prvAddNewTaskToReadyList+0xac>)
 80056d8:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80056da:	bf00      	nop
 80056dc:	3708      	adds	r7, #8
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	200002e8 	.word	0x200002e8
 80056e8:	20000210 	.word	0x20000210
 80056ec:	200002f4 	.word	0x200002f4
 80056f0:	20000304 	.word	0x20000304
 80056f4:	200002f0 	.word	0x200002f0
 80056f8:	20000214 	.word	0x20000214

080056fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b086      	sub	sp, #24
 8005700:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8005702:	4b20      	ldr	r3, [pc, #128]	; (8005784 <vTaskStartScheduler+0x88>)
 8005704:	9301      	str	r3, [sp, #4]
 8005706:	2300      	movs	r3, #0
 8005708:	9300      	str	r3, [sp, #0]
 800570a:	2300      	movs	r3, #0
 800570c:	2282      	movs	r2, #130	; 0x82
 800570e:	491e      	ldr	r1, [pc, #120]	; (8005788 <vTaskStartScheduler+0x8c>)
 8005710:	481e      	ldr	r0, [pc, #120]	; (800578c <vTaskStartScheduler+0x90>)
 8005712:	f7ff febb 	bl	800548c <xTaskCreate>
 8005716:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d102      	bne.n	8005724 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800571e:	f000 ff15 	bl	800654c <xTimerCreateTimerTask>
 8005722:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d116      	bne.n	8005758 <vTaskStartScheduler+0x5c>
        __asm volatile
 800572a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572e:	f383 8811 	msr	BASEPRI, r3
 8005732:	f3bf 8f6f 	isb	sy
 8005736:	f3bf 8f4f 	dsb	sy
 800573a:	60bb      	str	r3, [r7, #8]
    }
 800573c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800573e:	4b14      	ldr	r3, [pc, #80]	; (8005790 <vTaskStartScheduler+0x94>)
 8005740:	f04f 32ff 	mov.w	r2, #4294967295
 8005744:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005746:	4b13      	ldr	r3, [pc, #76]	; (8005794 <vTaskStartScheduler+0x98>)
 8005748:	2201      	movs	r2, #1
 800574a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800574c:	4b12      	ldr	r3, [pc, #72]	; (8005798 <vTaskStartScheduler+0x9c>)
 800574e:	2200      	movs	r2, #0
 8005750:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8005752:	f001 fb1f 	bl	8006d94 <xPortStartScheduler>
 8005756:	e00e      	b.n	8005776 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800575e:	d10a      	bne.n	8005776 <vTaskStartScheduler+0x7a>
        __asm volatile
 8005760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005764:	f383 8811 	msr	BASEPRI, r3
 8005768:	f3bf 8f6f 	isb	sy
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	607b      	str	r3, [r7, #4]
    }
 8005772:	bf00      	nop
 8005774:	e7fe      	b.n	8005774 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005776:	4b09      	ldr	r3, [pc, #36]	; (800579c <vTaskStartScheduler+0xa0>)
 8005778:	681b      	ldr	r3, [r3, #0]
}
 800577a:	bf00      	nop
 800577c:	3710      	adds	r7, #16
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	2000030c 	.word	0x2000030c
 8005788:	08008af8 	.word	0x08008af8
 800578c:	08005d51 	.word	0x08005d51
 8005790:	20000308 	.word	0x20000308
 8005794:	200002f4 	.word	0x200002f4
 8005798:	200002ec 	.word	0x200002ec
 800579c:	2000001c 	.word	0x2000001c

080057a0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80057a0:	b480      	push	{r7}
 80057a2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80057a4:	4b04      	ldr	r3, [pc, #16]	; (80057b8 <vTaskSuspendAll+0x18>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	3301      	adds	r3, #1
 80057aa:	4a03      	ldr	r2, [pc, #12]	; (80057b8 <vTaskSuspendAll+0x18>)
 80057ac:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80057ae:	bf00      	nop
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr
 80057b8:	20000310 	.word	0x20000310

080057bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80057c2:	2300      	movs	r3, #0
 80057c4:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80057c6:	2300      	movs	r3, #0
 80057c8:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80057ca:	4b3b      	ldr	r3, [pc, #236]	; (80058b8 <xTaskResumeAll+0xfc>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10a      	bne.n	80057e8 <xTaskResumeAll+0x2c>
        __asm volatile
 80057d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d6:	f383 8811 	msr	BASEPRI, r3
 80057da:	f3bf 8f6f 	isb	sy
 80057de:	f3bf 8f4f 	dsb	sy
 80057e2:	603b      	str	r3, [r7, #0]
    }
 80057e4:	bf00      	nop
 80057e6:	e7fe      	b.n	80057e6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80057e8:	f001 fb76 	bl	8006ed8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80057ec:	4b32      	ldr	r3, [pc, #200]	; (80058b8 <xTaskResumeAll+0xfc>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	3b01      	subs	r3, #1
 80057f2:	4a31      	ldr	r2, [pc, #196]	; (80058b8 <xTaskResumeAll+0xfc>)
 80057f4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057f6:	4b30      	ldr	r3, [pc, #192]	; (80058b8 <xTaskResumeAll+0xfc>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d155      	bne.n	80058aa <xTaskResumeAll+0xee>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80057fe:	4b2f      	ldr	r3, [pc, #188]	; (80058bc <xTaskResumeAll+0x100>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d051      	beq.n	80058aa <xTaskResumeAll+0xee>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005806:	e02e      	b.n	8005866 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005808:	4b2d      	ldr	r3, [pc, #180]	; (80058c0 <xTaskResumeAll+0x104>)
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	3318      	adds	r3, #24
 8005814:	4618      	mov	r0, r3
 8005816:	f7ff f88b 	bl	8004930 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	3304      	adds	r3, #4
 800581e:	4618      	mov	r0, r3
 8005820:	f7ff f886 	bl	8004930 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005828:	2201      	movs	r2, #1
 800582a:	409a      	lsls	r2, r3
 800582c:	4b25      	ldr	r3, [pc, #148]	; (80058c4 <xTaskResumeAll+0x108>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4313      	orrs	r3, r2
 8005832:	4a24      	ldr	r2, [pc, #144]	; (80058c4 <xTaskResumeAll+0x108>)
 8005834:	6013      	str	r3, [r2, #0]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800583a:	4613      	mov	r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4413      	add	r3, r2
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	4a21      	ldr	r2, [pc, #132]	; (80058c8 <xTaskResumeAll+0x10c>)
 8005844:	441a      	add	r2, r3
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	3304      	adds	r3, #4
 800584a:	4619      	mov	r1, r3
 800584c:	4610      	mov	r0, r2
 800584e:	f7ff f812 	bl	8004876 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005856:	4b1d      	ldr	r3, [pc, #116]	; (80058cc <xTaskResumeAll+0x110>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585c:	429a      	cmp	r2, r3
 800585e:	d302      	bcc.n	8005866 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8005860:	4b1b      	ldr	r3, [pc, #108]	; (80058d0 <xTaskResumeAll+0x114>)
 8005862:	2201      	movs	r2, #1
 8005864:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005866:	4b16      	ldr	r3, [pc, #88]	; (80058c0 <xTaskResumeAll+0x104>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1cc      	bne.n	8005808 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d001      	beq.n	8005878 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8005874:	f000 fafc 	bl	8005e70 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005878:	4b16      	ldr	r3, [pc, #88]	; (80058d4 <xTaskResumeAll+0x118>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d010      	beq.n	80058a6 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8005884:	f000 f838 	bl	80058f8 <xTaskIncrementTick>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d002      	beq.n	8005894 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 800588e:	4b10      	ldr	r3, [pc, #64]	; (80058d0 <xTaskResumeAll+0x114>)
 8005890:	2201      	movs	r2, #1
 8005892:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	3b01      	subs	r3, #1
 8005898:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1f1      	bne.n	8005884 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 80058a0:	4b0c      	ldr	r3, [pc, #48]	; (80058d4 <xTaskResumeAll+0x118>)
 80058a2:	2200      	movs	r2, #0
 80058a4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80058a6:	4b0a      	ldr	r3, [pc, #40]	; (80058d0 <xTaskResumeAll+0x114>)
 80058a8:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80058aa:	f001 fb45 	bl	8006f38 <vPortExitCritical>

    return xAlreadyYielded;
 80058ae:	687b      	ldr	r3, [r7, #4]
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3710      	adds	r7, #16
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	20000310 	.word	0x20000310
 80058bc:	200002e8 	.word	0x200002e8
 80058c0:	200002a8 	.word	0x200002a8
 80058c4:	200002f0 	.word	0x200002f0
 80058c8:	20000214 	.word	0x20000214
 80058cc:	20000210 	.word	0x20000210
 80058d0:	200002fc 	.word	0x200002fc
 80058d4:	200002f8 	.word	0x200002f8

080058d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80058de:	4b05      	ldr	r3, [pc, #20]	; (80058f4 <xTaskGetTickCount+0x1c>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80058e4:	687b      	ldr	r3, [r7, #4]
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	200002ec 	.word	0x200002ec

080058f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b086      	sub	sp, #24
 80058fc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80058fe:	2300      	movs	r3, #0
 8005900:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005902:	4b3f      	ldr	r3, [pc, #252]	; (8005a00 <xTaskIncrementTick+0x108>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d16f      	bne.n	80059ea <xTaskIncrementTick+0xf2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800590a:	4b3e      	ldr	r3, [pc, #248]	; (8005a04 <xTaskIncrementTick+0x10c>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	3301      	adds	r3, #1
 8005910:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005912:	4a3c      	ldr	r2, [pc, #240]	; (8005a04 <xTaskIncrementTick+0x10c>)
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d120      	bne.n	8005960 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 800591e:	4b3a      	ldr	r3, [pc, #232]	; (8005a08 <xTaskIncrementTick+0x110>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00a      	beq.n	800593e <xTaskIncrementTick+0x46>
        __asm volatile
 8005928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592c:	f383 8811 	msr	BASEPRI, r3
 8005930:	f3bf 8f6f 	isb	sy
 8005934:	f3bf 8f4f 	dsb	sy
 8005938:	603b      	str	r3, [r7, #0]
    }
 800593a:	bf00      	nop
 800593c:	e7fe      	b.n	800593c <xTaskIncrementTick+0x44>
 800593e:	4b32      	ldr	r3, [pc, #200]	; (8005a08 <xTaskIncrementTick+0x110>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	60fb      	str	r3, [r7, #12]
 8005944:	4b31      	ldr	r3, [pc, #196]	; (8005a0c <xTaskIncrementTick+0x114>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a2f      	ldr	r2, [pc, #188]	; (8005a08 <xTaskIncrementTick+0x110>)
 800594a:	6013      	str	r3, [r2, #0]
 800594c:	4a2f      	ldr	r2, [pc, #188]	; (8005a0c <xTaskIncrementTick+0x114>)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6013      	str	r3, [r2, #0]
 8005952:	4b2f      	ldr	r3, [pc, #188]	; (8005a10 <xTaskIncrementTick+0x118>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	3301      	adds	r3, #1
 8005958:	4a2d      	ldr	r2, [pc, #180]	; (8005a10 <xTaskIncrementTick+0x118>)
 800595a:	6013      	str	r3, [r2, #0]
 800595c:	f000 fa88 	bl	8005e70 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005960:	4b2c      	ldr	r3, [pc, #176]	; (8005a14 <xTaskIncrementTick+0x11c>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	693a      	ldr	r2, [r7, #16]
 8005966:	429a      	cmp	r2, r3
 8005968:	d344      	bcc.n	80059f4 <xTaskIncrementTick+0xfc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800596a:	4b27      	ldr	r3, [pc, #156]	; (8005a08 <xTaskIncrementTick+0x110>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d104      	bne.n	800597e <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005974:	4b27      	ldr	r3, [pc, #156]	; (8005a14 <xTaskIncrementTick+0x11c>)
 8005976:	f04f 32ff 	mov.w	r2, #4294967295
 800597a:	601a      	str	r2, [r3, #0]
                    break;
 800597c:	e03a      	b.n	80059f4 <xTaskIncrementTick+0xfc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800597e:	4b22      	ldr	r3, [pc, #136]	; (8005a08 <xTaskIncrementTick+0x110>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800598e:	693a      	ldr	r2, [r7, #16]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	429a      	cmp	r2, r3
 8005994:	d203      	bcs.n	800599e <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005996:	4a1f      	ldr	r2, [pc, #124]	; (8005a14 <xTaskIncrementTick+0x11c>)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800599c:	e02a      	b.n	80059f4 <xTaskIncrementTick+0xfc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	3304      	adds	r3, #4
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7fe ffc4 	bl	8004930 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d004      	beq.n	80059ba <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	3318      	adds	r3, #24
 80059b4:	4618      	mov	r0, r3
 80059b6:	f7fe ffbb 	bl	8004930 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059be:	2201      	movs	r2, #1
 80059c0:	409a      	lsls	r2, r3
 80059c2:	4b15      	ldr	r3, [pc, #84]	; (8005a18 <xTaskIncrementTick+0x120>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	4a13      	ldr	r2, [pc, #76]	; (8005a18 <xTaskIncrementTick+0x120>)
 80059ca:	6013      	str	r3, [r2, #0]
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d0:	4613      	mov	r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4413      	add	r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4a10      	ldr	r2, [pc, #64]	; (8005a1c <xTaskIncrementTick+0x124>)
 80059da:	441a      	add	r2, r3
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	3304      	adds	r3, #4
 80059e0:	4619      	mov	r1, r3
 80059e2:	4610      	mov	r0, r2
 80059e4:	f7fe ff47 	bl	8004876 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059e8:	e7bf      	b.n	800596a <xTaskIncrementTick+0x72>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80059ea:	4b0d      	ldr	r3, [pc, #52]	; (8005a20 <xTaskIncrementTick+0x128>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	3301      	adds	r3, #1
 80059f0:	4a0b      	ldr	r2, [pc, #44]	; (8005a20 <xTaskIncrementTick+0x128>)
 80059f2:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80059f4:	697b      	ldr	r3, [r7, #20]
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3718      	adds	r7, #24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	20000310 	.word	0x20000310
 8005a04:	200002ec 	.word	0x200002ec
 8005a08:	200002a0 	.word	0x200002a0
 8005a0c:	200002a4 	.word	0x200002a4
 8005a10:	20000300 	.word	0x20000300
 8005a14:	20000308 	.word	0x20000308
 8005a18:	200002f0 	.word	0x200002f0
 8005a1c:	20000214 	.word	0x20000214
 8005a20:	200002f8 	.word	0x200002f8

08005a24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a24:	b480      	push	{r7}
 8005a26:	b087      	sub	sp, #28
 8005a28:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a2a:	4b27      	ldr	r3, [pc, #156]	; (8005ac8 <vTaskSwitchContext+0xa4>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d003      	beq.n	8005a3a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005a32:	4b26      	ldr	r3, [pc, #152]	; (8005acc <vTaskSwitchContext+0xa8>)
 8005a34:	2201      	movs	r2, #1
 8005a36:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8005a38:	e03f      	b.n	8005aba <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8005a3a:	4b24      	ldr	r3, [pc, #144]	; (8005acc <vTaskSwitchContext+0xa8>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a40:	4b23      	ldr	r3, [pc, #140]	; (8005ad0 <vTaskSwitchContext+0xac>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	fab3 f383 	clz	r3, r3
 8005a4c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005a4e:	7afb      	ldrb	r3, [r7, #11]
 8005a50:	f1c3 031f 	rsb	r3, r3, #31
 8005a54:	617b      	str	r3, [r7, #20]
 8005a56:	491f      	ldr	r1, [pc, #124]	; (8005ad4 <vTaskSwitchContext+0xb0>)
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4413      	add	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	440b      	add	r3, r1
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d10a      	bne.n	8005a80 <vTaskSwitchContext+0x5c>
        __asm volatile
 8005a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6e:	f383 8811 	msr	BASEPRI, r3
 8005a72:	f3bf 8f6f 	isb	sy
 8005a76:	f3bf 8f4f 	dsb	sy
 8005a7a:	607b      	str	r3, [r7, #4]
    }
 8005a7c:	bf00      	nop
 8005a7e:	e7fe      	b.n	8005a7e <vTaskSwitchContext+0x5a>
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	4613      	mov	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	4a12      	ldr	r2, [pc, #72]	; (8005ad4 <vTaskSwitchContext+0xb0>)
 8005a8c:	4413      	add	r3, r2
 8005a8e:	613b      	str	r3, [r7, #16]
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	685a      	ldr	r2, [r3, #4]
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	605a      	str	r2, [r3, #4]
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	3308      	adds	r3, #8
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d104      	bne.n	8005ab0 <vTaskSwitchContext+0x8c>
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	685a      	ldr	r2, [r3, #4]
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	605a      	str	r2, [r3, #4]
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	4a08      	ldr	r2, [pc, #32]	; (8005ad8 <vTaskSwitchContext+0xb4>)
 8005ab8:	6013      	str	r3, [r2, #0]
}
 8005aba:	bf00      	nop
 8005abc:	371c      	adds	r7, #28
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	20000310 	.word	0x20000310
 8005acc:	200002fc 	.word	0x200002fc
 8005ad0:	200002f0 	.word	0x200002f0
 8005ad4:	20000214 	.word	0x20000214
 8005ad8:	20000210 	.word	0x20000210

08005adc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d10a      	bne.n	8005b02 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8005aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af0:	f383 8811 	msr	BASEPRI, r3
 8005af4:	f3bf 8f6f 	isb	sy
 8005af8:	f3bf 8f4f 	dsb	sy
 8005afc:	60fb      	str	r3, [r7, #12]
    }
 8005afe:	bf00      	nop
 8005b00:	e7fe      	b.n	8005b00 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b02:	4b07      	ldr	r3, [pc, #28]	; (8005b20 <vTaskPlaceOnEventList+0x44>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	3318      	adds	r3, #24
 8005b08:	4619      	mov	r1, r3
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f7fe fed7 	bl	80048be <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b10:	2101      	movs	r1, #1
 8005b12:	6838      	ldr	r0, [r7, #0]
 8005b14:	f000 fcb4 	bl	8006480 <prvAddCurrentTaskToDelayedList>
}
 8005b18:	bf00      	nop
 8005b1a:	3710      	adds	r7, #16
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	20000210 	.word	0x20000210

08005b24 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b086      	sub	sp, #24
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10a      	bne.n	8005b4c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8005b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3a:	f383 8811 	msr	BASEPRI, r3
 8005b3e:	f3bf 8f6f 	isb	sy
 8005b42:	f3bf 8f4f 	dsb	sy
 8005b46:	617b      	str	r3, [r7, #20]
    }
 8005b48:	bf00      	nop
 8005b4a:	e7fe      	b.n	8005b4a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b4c:	4b0a      	ldr	r3, [pc, #40]	; (8005b78 <vTaskPlaceOnEventListRestricted+0x54>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	3318      	adds	r3, #24
 8005b52:	4619      	mov	r1, r3
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f7fe fe8e 	bl	8004876 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d002      	beq.n	8005b66 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8005b60:	f04f 33ff 	mov.w	r3, #4294967295
 8005b64:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005b66:	6879      	ldr	r1, [r7, #4]
 8005b68:	68b8      	ldr	r0, [r7, #8]
 8005b6a:	f000 fc89 	bl	8006480 <prvAddCurrentTaskToDelayedList>
    }
 8005b6e:	bf00      	nop
 8005b70:	3718      	adds	r7, #24
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	20000210 	.word	0x20000210

08005b7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b086      	sub	sp, #24
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10a      	bne.n	8005ba8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8005b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b96:	f383 8811 	msr	BASEPRI, r3
 8005b9a:	f3bf 8f6f 	isb	sy
 8005b9e:	f3bf 8f4f 	dsb	sy
 8005ba2:	60fb      	str	r3, [r7, #12]
    }
 8005ba4:	bf00      	nop
 8005ba6:	e7fe      	b.n	8005ba6 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	3318      	adds	r3, #24
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7fe febf 	bl	8004930 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bb2:	4b1d      	ldr	r3, [pc, #116]	; (8005c28 <xTaskRemoveFromEventList+0xac>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d11c      	bne.n	8005bf4 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	3304      	adds	r3, #4
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7fe feb6 	bl	8004930 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc8:	2201      	movs	r2, #1
 8005bca:	409a      	lsls	r2, r3
 8005bcc:	4b17      	ldr	r3, [pc, #92]	; (8005c2c <xTaskRemoveFromEventList+0xb0>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	4a16      	ldr	r2, [pc, #88]	; (8005c2c <xTaskRemoveFromEventList+0xb0>)
 8005bd4:	6013      	str	r3, [r2, #0]
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bda:	4613      	mov	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4413      	add	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	4a13      	ldr	r2, [pc, #76]	; (8005c30 <xTaskRemoveFromEventList+0xb4>)
 8005be4:	441a      	add	r2, r3
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	3304      	adds	r3, #4
 8005bea:	4619      	mov	r1, r3
 8005bec:	4610      	mov	r0, r2
 8005bee:	f7fe fe42 	bl	8004876 <vListInsertEnd>
 8005bf2:	e005      	b.n	8005c00 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	3318      	adds	r3, #24
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	480e      	ldr	r0, [pc, #56]	; (8005c34 <xTaskRemoveFromEventList+0xb8>)
 8005bfc:	f7fe fe3b 	bl	8004876 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c04:	4b0c      	ldr	r3, [pc, #48]	; (8005c38 <xTaskRemoveFromEventList+0xbc>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d905      	bls.n	8005c1a <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8005c12:	4b0a      	ldr	r3, [pc, #40]	; (8005c3c <xTaskRemoveFromEventList+0xc0>)
 8005c14:	2201      	movs	r2, #1
 8005c16:	601a      	str	r2, [r3, #0]
 8005c18:	e001      	b.n	8005c1e <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005c1e:	697b      	ldr	r3, [r7, #20]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3718      	adds	r7, #24
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	20000310 	.word	0x20000310
 8005c2c:	200002f0 	.word	0x200002f0
 8005c30:	20000214 	.word	0x20000214
 8005c34:	200002a8 	.word	0x200002a8
 8005c38:	20000210 	.word	0x20000210
 8005c3c:	200002fc 	.word	0x200002fc

08005c40 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c48:	4b06      	ldr	r3, [pc, #24]	; (8005c64 <vTaskInternalSetTimeOutState+0x24>)
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005c50:	4b05      	ldr	r3, [pc, #20]	; (8005c68 <vTaskInternalSetTimeOutState+0x28>)
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	605a      	str	r2, [r3, #4]
}
 8005c58:	bf00      	nop
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr
 8005c64:	20000300 	.word	0x20000300
 8005c68:	200002ec 	.word	0x200002ec

08005c6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b088      	sub	sp, #32
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10a      	bne.n	8005c92 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8005c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c80:	f383 8811 	msr	BASEPRI, r3
 8005c84:	f3bf 8f6f 	isb	sy
 8005c88:	f3bf 8f4f 	dsb	sy
 8005c8c:	613b      	str	r3, [r7, #16]
    }
 8005c8e:	bf00      	nop
 8005c90:	e7fe      	b.n	8005c90 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d10a      	bne.n	8005cae <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8005c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9c:	f383 8811 	msr	BASEPRI, r3
 8005ca0:	f3bf 8f6f 	isb	sy
 8005ca4:	f3bf 8f4f 	dsb	sy
 8005ca8:	60fb      	str	r3, [r7, #12]
    }
 8005caa:	bf00      	nop
 8005cac:	e7fe      	b.n	8005cac <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8005cae:	f001 f913 	bl	8006ed8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005cb2:	4b1f      	ldr	r3, [pc, #124]	; (8005d30 <xTaskCheckForTimeOut+0xc4>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	69ba      	ldr	r2, [r7, #24]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cca:	d102      	bne.n	8005cd2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	61fb      	str	r3, [r7, #28]
 8005cd0:	e026      	b.n	8005d20 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	4b17      	ldr	r3, [pc, #92]	; (8005d34 <xTaskCheckForTimeOut+0xc8>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d00a      	beq.n	8005cf4 <xTaskCheckForTimeOut+0x88>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	69ba      	ldr	r2, [r7, #24]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d305      	bcc.n	8005cf4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	601a      	str	r2, [r3, #0]
 8005cf2:	e015      	b.n	8005d20 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d20b      	bcs.n	8005d16 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	1ad2      	subs	r2, r2, r3
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f7ff ff98 	bl	8005c40 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005d10:	2300      	movs	r3, #0
 8005d12:	61fb      	str	r3, [r7, #28]
 8005d14:	e004      	b.n	8005d20 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8005d20:	f001 f90a 	bl	8006f38 <vPortExitCritical>

    return xReturn;
 8005d24:	69fb      	ldr	r3, [r7, #28]
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3720      	adds	r7, #32
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	200002ec 	.word	0x200002ec
 8005d34:	20000300 	.word	0x20000300

08005d38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d38:	b480      	push	{r7}
 8005d3a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005d3c:	4b03      	ldr	r3, [pc, #12]	; (8005d4c <vTaskMissedYield+0x14>)
 8005d3e:	2201      	movs	r2, #1
 8005d40:	601a      	str	r2, [r3, #0]
}
 8005d42:	bf00      	nop
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr
 8005d4c:	200002fc 	.word	0x200002fc

08005d50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005d58:	f000 f84c 	bl	8005df4 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8005d5c:	4b04      	ldr	r3, [pc, #16]	; (8005d70 <prvIdleTask+0x20>)
 8005d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d62:	601a      	str	r2, [r3, #0]
 8005d64:	f3bf 8f4f 	dsb	sy
 8005d68:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005d6c:	e7f4      	b.n	8005d58 <prvIdleTask+0x8>
 8005d6e:	bf00      	nop
 8005d70:	e000ed04 	.word	0xe000ed04

08005d74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	607b      	str	r3, [r7, #4]
 8005d7e:	e00c      	b.n	8005d9a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	4613      	mov	r3, r2
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	4413      	add	r3, r2
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	4a12      	ldr	r2, [pc, #72]	; (8005dd4 <prvInitialiseTaskLists+0x60>)
 8005d8c:	4413      	add	r3, r2
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7fe fd44 	bl	800481c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	3301      	adds	r3, #1
 8005d98:	607b      	str	r3, [r7, #4]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2b04      	cmp	r3, #4
 8005d9e:	d9ef      	bls.n	8005d80 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005da0:	480d      	ldr	r0, [pc, #52]	; (8005dd8 <prvInitialiseTaskLists+0x64>)
 8005da2:	f7fe fd3b 	bl	800481c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005da6:	480d      	ldr	r0, [pc, #52]	; (8005ddc <prvInitialiseTaskLists+0x68>)
 8005da8:	f7fe fd38 	bl	800481c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005dac:	480c      	ldr	r0, [pc, #48]	; (8005de0 <prvInitialiseTaskLists+0x6c>)
 8005dae:	f7fe fd35 	bl	800481c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8005db2:	480c      	ldr	r0, [pc, #48]	; (8005de4 <prvInitialiseTaskLists+0x70>)
 8005db4:	f7fe fd32 	bl	800481c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8005db8:	480b      	ldr	r0, [pc, #44]	; (8005de8 <prvInitialiseTaskLists+0x74>)
 8005dba:	f7fe fd2f 	bl	800481c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005dbe:	4b0b      	ldr	r3, [pc, #44]	; (8005dec <prvInitialiseTaskLists+0x78>)
 8005dc0:	4a05      	ldr	r2, [pc, #20]	; (8005dd8 <prvInitialiseTaskLists+0x64>)
 8005dc2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005dc4:	4b0a      	ldr	r3, [pc, #40]	; (8005df0 <prvInitialiseTaskLists+0x7c>)
 8005dc6:	4a05      	ldr	r2, [pc, #20]	; (8005ddc <prvInitialiseTaskLists+0x68>)
 8005dc8:	601a      	str	r2, [r3, #0]
}
 8005dca:	bf00      	nop
 8005dcc:	3708      	adds	r7, #8
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	20000214 	.word	0x20000214
 8005dd8:	20000278 	.word	0x20000278
 8005ddc:	2000028c 	.word	0x2000028c
 8005de0:	200002a8 	.word	0x200002a8
 8005de4:	200002bc 	.word	0x200002bc
 8005de8:	200002d4 	.word	0x200002d4
 8005dec:	200002a0 	.word	0x200002a0
 8005df0:	200002a4 	.word	0x200002a4

08005df4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005dfa:	e019      	b.n	8005e30 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8005dfc:	f001 f86c 	bl	8006ed8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e00:	4b10      	ldr	r3, [pc, #64]	; (8005e44 <prvCheckTasksWaitingTermination+0x50>)
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	3304      	adds	r3, #4
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7fe fd8f 	bl	8004930 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8005e12:	4b0d      	ldr	r3, [pc, #52]	; (8005e48 <prvCheckTasksWaitingTermination+0x54>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	3b01      	subs	r3, #1
 8005e18:	4a0b      	ldr	r2, [pc, #44]	; (8005e48 <prvCheckTasksWaitingTermination+0x54>)
 8005e1a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8005e1c:	4b0b      	ldr	r3, [pc, #44]	; (8005e4c <prvCheckTasksWaitingTermination+0x58>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	3b01      	subs	r3, #1
 8005e22:	4a0a      	ldr	r2, [pc, #40]	; (8005e4c <prvCheckTasksWaitingTermination+0x58>)
 8005e24:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8005e26:	f001 f887 	bl	8006f38 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 f810 	bl	8005e50 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e30:	4b06      	ldr	r3, [pc, #24]	; (8005e4c <prvCheckTasksWaitingTermination+0x58>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1e1      	bne.n	8005dfc <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8005e38:	bf00      	nop
 8005e3a:	bf00      	nop
 8005e3c:	3708      	adds	r7, #8
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	200002bc 	.word	0x200002bc
 8005e48:	200002e8 	.word	0x200002e8
 8005e4c:	200002d0 	.word	0x200002d0

08005e50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f001 fa3d 	bl	80072dc <vPortFree>
                vPortFree( pxTCB );
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f001 fa3a 	bl	80072dc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005e68:	bf00      	nop
 8005e6a:	3708      	adds	r7, #8
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e70:	b480      	push	{r7}
 8005e72:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e74:	4b0a      	ldr	r3, [pc, #40]	; (8005ea0 <prvResetNextTaskUnblockTime+0x30>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d104      	bne.n	8005e88 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005e7e:	4b09      	ldr	r3, [pc, #36]	; (8005ea4 <prvResetNextTaskUnblockTime+0x34>)
 8005e80:	f04f 32ff 	mov.w	r2, #4294967295
 8005e84:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005e86:	e005      	b.n	8005e94 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005e88:	4b05      	ldr	r3, [pc, #20]	; (8005ea0 <prvResetNextTaskUnblockTime+0x30>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a04      	ldr	r2, [pc, #16]	; (8005ea4 <prvResetNextTaskUnblockTime+0x34>)
 8005e92:	6013      	str	r3, [r2, #0]
}
 8005e94:	bf00      	nop
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	200002a0 	.word	0x200002a0
 8005ea4:	20000308 	.word	0x20000308

08005ea8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8005eae:	4b0b      	ldr	r3, [pc, #44]	; (8005edc <xTaskGetSchedulerState+0x34>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d102      	bne.n	8005ebc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	607b      	str	r3, [r7, #4]
 8005eba:	e008      	b.n	8005ece <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ebc:	4b08      	ldr	r3, [pc, #32]	; (8005ee0 <xTaskGetSchedulerState+0x38>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d102      	bne.n	8005eca <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	607b      	str	r3, [r7, #4]
 8005ec8:	e001      	b.n	8005ece <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8005ece:	687b      	ldr	r3, [r7, #4]
    }
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr
 8005edc:	200002f4 	.word	0x200002f4
 8005ee0:	20000310 	.word	0x20000310

08005ee4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d063      	beq.n	8005fc2 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005efa:	4b34      	ldr	r3, [pc, #208]	; (8005fcc <xTaskPriorityDisinherit+0xe8>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	693a      	ldr	r2, [r7, #16]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d00a      	beq.n	8005f1a <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8005f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f08:	f383 8811 	msr	BASEPRI, r3
 8005f0c:	f3bf 8f6f 	isb	sy
 8005f10:	f3bf 8f4f 	dsb	sy
 8005f14:	60fb      	str	r3, [r7, #12]
    }
 8005f16:	bf00      	nop
 8005f18:	e7fe      	b.n	8005f18 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10a      	bne.n	8005f38 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8005f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f26:	f383 8811 	msr	BASEPRI, r3
 8005f2a:	f3bf 8f6f 	isb	sy
 8005f2e:	f3bf 8f4f 	dsb	sy
 8005f32:	60bb      	str	r3, [r7, #8]
    }
 8005f34:	bf00      	nop
 8005f36:	e7fe      	b.n	8005f36 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f3c:	1e5a      	subs	r2, r3, #1
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d039      	beq.n	8005fc2 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d135      	bne.n	8005fc2 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	3304      	adds	r3, #4
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7fe fce8 	bl	8004930 <uxListRemove>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10a      	bne.n	8005f7c <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f70:	43da      	mvns	r2, r3
 8005f72:	4b17      	ldr	r3, [pc, #92]	; (8005fd0 <xTaskPriorityDisinherit+0xec>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4013      	ands	r3, r2
 8005f78:	4a15      	ldr	r2, [pc, #84]	; (8005fd0 <xTaskPriorityDisinherit+0xec>)
 8005f7a:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f88:	f1c3 0205 	rsb	r2, r3, #5
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f94:	2201      	movs	r2, #1
 8005f96:	409a      	lsls	r2, r3
 8005f98:	4b0d      	ldr	r3, [pc, #52]	; (8005fd0 <xTaskPriorityDisinherit+0xec>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	4a0c      	ldr	r2, [pc, #48]	; (8005fd0 <xTaskPriorityDisinherit+0xec>)
 8005fa0:	6013      	str	r3, [r2, #0]
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	4413      	add	r3, r2
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	4a09      	ldr	r2, [pc, #36]	; (8005fd4 <xTaskPriorityDisinherit+0xf0>)
 8005fb0:	441a      	add	r2, r3
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	3304      	adds	r3, #4
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	4610      	mov	r0, r2
 8005fba:	f7fe fc5c 	bl	8004876 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005fc2:	697b      	ldr	r3, [r7, #20]
    }
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3718      	adds	r7, #24
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	20000210 	.word	0x20000210
 8005fd0:	200002f0 	.word	0x200002f0
 8005fd4:	20000214 	.word	0x20000214

08005fd8 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b086      	sub	sp, #24
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
 8005fe4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d00a      	beq.n	8006002 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8005fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff0:	f383 8811 	msr	BASEPRI, r3
 8005ff4:	f3bf 8f6f 	isb	sy
 8005ff8:	f3bf 8f4f 	dsb	sy
 8005ffc:	613b      	str	r3, [r7, #16]
    }
 8005ffe:	bf00      	nop
 8006000:	e7fe      	b.n	8006000 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8006002:	f000 ff69 	bl	8006ed8 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006006:	4b32      	ldr	r3, [pc, #200]	; (80060d0 <xTaskGenericNotifyWait+0xf8>)
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	4413      	add	r3, r2
 800600e:	3354      	adds	r3, #84	; 0x54
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	b2db      	uxtb	r3, r3
 8006014:	2b02      	cmp	r3, #2
 8006016:	d022      	beq.n	800605e <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8006018:	4b2d      	ldr	r3, [pc, #180]	; (80060d0 <xTaskGenericNotifyWait+0xf8>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	3214      	adds	r2, #20
 8006020:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006024:	68ba      	ldr	r2, [r7, #8]
 8006026:	43d2      	mvns	r2, r2
 8006028:	4011      	ands	r1, r2
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	3214      	adds	r2, #20
 800602e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8006032:	4b27      	ldr	r3, [pc, #156]	; (80060d0 <xTaskGenericNotifyWait+0xf8>)
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	4413      	add	r3, r2
 800603a:	3354      	adds	r3, #84	; 0x54
 800603c:	2201      	movs	r2, #1
 800603e:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8006040:	6a3b      	ldr	r3, [r7, #32]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00b      	beq.n	800605e <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006046:	2101      	movs	r1, #1
 8006048:	6a38      	ldr	r0, [r7, #32]
 800604a:	f000 fa19 	bl	8006480 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800604e:	4b21      	ldr	r3, [pc, #132]	; (80060d4 <xTaskGenericNotifyWait+0xfc>)
 8006050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006054:	601a      	str	r2, [r3, #0]
 8006056:	f3bf 8f4f 	dsb	sy
 800605a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800605e:	f000 ff6b 	bl	8006f38 <vPortExitCritical>

        taskENTER_CRITICAL();
 8006062:	f000 ff39 	bl	8006ed8 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d007      	beq.n	800607c <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800606c:	4b18      	ldr	r3, [pc, #96]	; (80060d0 <xTaskGenericNotifyWait+0xf8>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	3214      	adds	r2, #20
 8006074:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800607c:	4b14      	ldr	r3, [pc, #80]	; (80060d0 <xTaskGenericNotifyWait+0xf8>)
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	4413      	add	r3, r2
 8006084:	3354      	adds	r3, #84	; 0x54
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b02      	cmp	r3, #2
 800608c:	d002      	beq.n	8006094 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800608e:	2300      	movs	r3, #0
 8006090:	617b      	str	r3, [r7, #20]
 8006092:	e00e      	b.n	80060b2 <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8006094:	4b0e      	ldr	r3, [pc, #56]	; (80060d0 <xTaskGenericNotifyWait+0xf8>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	3214      	adds	r2, #20
 800609c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	43d2      	mvns	r2, r2
 80060a4:	4011      	ands	r1, r2
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	3214      	adds	r2, #20
 80060aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80060ae:	2301      	movs	r3, #1
 80060b0:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80060b2:	4b07      	ldr	r3, [pc, #28]	; (80060d0 <xTaskGenericNotifyWait+0xf8>)
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	4413      	add	r3, r2
 80060ba:	3354      	adds	r3, #84	; 0x54
 80060bc:	2200      	movs	r2, #0
 80060be:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80060c0:	f000 ff3a 	bl	8006f38 <vPortExitCritical>

        return xReturn;
 80060c4:	697b      	ldr	r3, [r7, #20]
    }
 80060c6:	4618      	mov	r0, r3
 80060c8:	3718      	adds	r7, #24
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	20000210 	.word	0x20000210
 80060d4:	e000ed04 	.word	0xe000ed04

080060d8 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80060d8:	b580      	push	{r7, lr}
 80060da:	b08c      	sub	sp, #48	; 0x30
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
 80060e4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80060e6:	2301      	movs	r3, #1
 80060e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00a      	beq.n	8006106 <xTaskGenericNotify+0x2e>
        __asm volatile
 80060f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f4:	f383 8811 	msr	BASEPRI, r3
 80060f8:	f3bf 8f6f 	isb	sy
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	623b      	str	r3, [r7, #32]
    }
 8006102:	bf00      	nop
 8006104:	e7fe      	b.n	8006104 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d10a      	bne.n	8006122 <xTaskGenericNotify+0x4a>
        __asm volatile
 800610c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006110:	f383 8811 	msr	BASEPRI, r3
 8006114:	f3bf 8f6f 	isb	sy
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	61fb      	str	r3, [r7, #28]
    }
 800611e:	bf00      	nop
 8006120:	e7fe      	b.n	8006120 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8006126:	f000 fed7 	bl	8006ed8 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800612a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612c:	2b00      	cmp	r3, #0
 800612e:	d006      	beq.n	800613e <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006132:	68ba      	ldr	r2, [r7, #8]
 8006134:	3214      	adds	r2, #20
 8006136:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800613a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800613e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	4413      	add	r3, r2
 8006144:	3354      	adds	r3, #84	; 0x54
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800614c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	4413      	add	r3, r2
 8006152:	3354      	adds	r3, #84	; 0x54
 8006154:	2202      	movs	r2, #2
 8006156:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006158:	78fb      	ldrb	r3, [r7, #3]
 800615a:	2b04      	cmp	r3, #4
 800615c:	d83b      	bhi.n	80061d6 <xTaskGenericNotify+0xfe>
 800615e:	a201      	add	r2, pc, #4	; (adr r2, 8006164 <xTaskGenericNotify+0x8c>)
 8006160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006164:	080061f5 	.word	0x080061f5
 8006168:	08006179 	.word	0x08006179
 800616c:	08006195 	.word	0x08006195
 8006170:	080061ad 	.word	0x080061ad
 8006174:	080061bb 	.word	0x080061bb
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	3214      	adds	r2, #20
 800617e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	ea42 0103 	orr.w	r1, r2, r3
 8006188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	3214      	adds	r2, #20
 800618e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006192:	e032      	b.n	80061fa <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006196:	68ba      	ldr	r2, [r7, #8]
 8006198:	3214      	adds	r2, #20
 800619a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800619e:	1c59      	adds	r1, r3, #1
 80061a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a2:	68ba      	ldr	r2, [r7, #8]
 80061a4:	3214      	adds	r2, #20
 80061a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80061aa:	e026      	b.n	80061fa <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80061ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	3214      	adds	r2, #20
 80061b2:	6879      	ldr	r1, [r7, #4]
 80061b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80061b8:	e01f      	b.n	80061fa <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80061ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d006      	beq.n	80061d0 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80061c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	3214      	adds	r2, #20
 80061c8:	6879      	ldr	r1, [r7, #4]
 80061ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80061ce:	e014      	b.n	80061fa <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 80061d0:	2300      	movs	r3, #0
 80061d2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 80061d4:	e011      	b.n	80061fa <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80061d6:	4b25      	ldr	r3, [pc, #148]	; (800626c <xTaskGenericNotify+0x194>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00c      	beq.n	80061f8 <xTaskGenericNotify+0x120>
        __asm volatile
 80061de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e2:	f383 8811 	msr	BASEPRI, r3
 80061e6:	f3bf 8f6f 	isb	sy
 80061ea:	f3bf 8f4f 	dsb	sy
 80061ee:	61bb      	str	r3, [r7, #24]
    }
 80061f0:	bf00      	nop
 80061f2:	e7fe      	b.n	80061f2 <xTaskGenericNotify+0x11a>
                    break;
 80061f4:	bf00      	nop
 80061f6:	e000      	b.n	80061fa <xTaskGenericNotify+0x122>

                    break;
 80061f8:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80061fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d12c      	bne.n	800625c <xTaskGenericNotify+0x184>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006204:	3304      	adds	r3, #4
 8006206:	4618      	mov	r0, r3
 8006208:	f7fe fb92 	bl	8004930 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 800620c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006210:	2201      	movs	r2, #1
 8006212:	409a      	lsls	r2, r3
 8006214:	4b16      	ldr	r3, [pc, #88]	; (8006270 <xTaskGenericNotify+0x198>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4313      	orrs	r3, r2
 800621a:	4a15      	ldr	r2, [pc, #84]	; (8006270 <xTaskGenericNotify+0x198>)
 800621c:	6013      	str	r3, [r2, #0]
 800621e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006222:	4613      	mov	r3, r2
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4413      	add	r3, r2
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	4a12      	ldr	r2, [pc, #72]	; (8006274 <xTaskGenericNotify+0x19c>)
 800622c:	441a      	add	r2, r3
 800622e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006230:	3304      	adds	r3, #4
 8006232:	4619      	mov	r1, r3
 8006234:	4610      	mov	r0, r2
 8006236:	f7fe fb1e 	bl	8004876 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800623a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00a      	beq.n	8006258 <xTaskGenericNotify+0x180>
        __asm volatile
 8006242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006246:	f383 8811 	msr	BASEPRI, r3
 800624a:	f3bf 8f6f 	isb	sy
 800624e:	f3bf 8f4f 	dsb	sy
 8006252:	617b      	str	r3, [r7, #20]
    }
 8006254:	bf00      	nop
 8006256:	e7fe      	b.n	8006256 <xTaskGenericNotify+0x17e>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006258:	4b07      	ldr	r3, [pc, #28]	; (8006278 <xTaskGenericNotify+0x1a0>)
 800625a:	681b      	ldr	r3, [r3, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800625c:	f000 fe6c 	bl	8006f38 <vPortExitCritical>

        return xReturn;
 8006260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8006262:	4618      	mov	r0, r3
 8006264:	3730      	adds	r7, #48	; 0x30
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	200002ec 	.word	0x200002ec
 8006270:	200002f0 	.word	0x200002f0
 8006274:	20000214 	.word	0x20000214
 8006278:	20000210 	.word	0x20000210

0800627c <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 800627c:	b580      	push	{r7, lr}
 800627e:	b090      	sub	sp, #64	; 0x40
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
 8006288:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 800628a:	2301      	movs	r3, #1
 800628c:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d10a      	bne.n	80062aa <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8006294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006298:	f383 8811 	msr	BASEPRI, r3
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	f3bf 8f4f 	dsb	sy
 80062a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 80062a6:	bf00      	nop
 80062a8:	e7fe      	b.n	80062a8 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00a      	beq.n	80062c6 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 80062b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b4:	f383 8811 	msr	BASEPRI, r3
 80062b8:	f3bf 8f6f 	isb	sy
 80062bc:	f3bf 8f4f 	dsb	sy
 80062c0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80062c2:	bf00      	nop
 80062c4:	e7fe      	b.n	80062c4 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80062c6:	f000 fee9 	bl	800709c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 80062ce:	f3ef 8211 	mrs	r2, BASEPRI
 80062d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d6:	f383 8811 	msr	BASEPRI, r3
 80062da:	f3bf 8f6f 	isb	sy
 80062de:	f3bf 8f4f 	dsb	sy
 80062e2:	627a      	str	r2, [r7, #36]	; 0x24
 80062e4:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 80062e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80062e8:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 80062ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d006      	beq.n	80062fe <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80062f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f2:	68ba      	ldr	r2, [r7, #8]
 80062f4:	3214      	adds	r2, #20
 80062f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80062fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062fc:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80062fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	4413      	add	r3, r2
 8006304:	3354      	adds	r3, #84	; 0x54
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800630c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	4413      	add	r3, r2
 8006312:	3354      	adds	r3, #84	; 0x54
 8006314:	2202      	movs	r2, #2
 8006316:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006318:	78fb      	ldrb	r3, [r7, #3]
 800631a:	2b04      	cmp	r3, #4
 800631c:	d83b      	bhi.n	8006396 <xTaskGenericNotifyFromISR+0x11a>
 800631e:	a201      	add	r2, pc, #4	; (adr r2, 8006324 <xTaskGenericNotifyFromISR+0xa8>)
 8006320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006324:	080063b5 	.word	0x080063b5
 8006328:	08006339 	.word	0x08006339
 800632c:	08006355 	.word	0x08006355
 8006330:	0800636d 	.word	0x0800636d
 8006334:	0800637b 	.word	0x0800637b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	3214      	adds	r2, #20
 800633e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	ea42 0103 	orr.w	r1, r2, r3
 8006348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	3214      	adds	r2, #20
 800634e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006352:	e032      	b.n	80063ba <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006356:	68ba      	ldr	r2, [r7, #8]
 8006358:	3214      	adds	r2, #20
 800635a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800635e:	1c59      	adds	r1, r3, #1
 8006360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	3214      	adds	r2, #20
 8006366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800636a:	e026      	b.n	80063ba <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800636c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636e:	68ba      	ldr	r2, [r7, #8]
 8006370:	3214      	adds	r2, #20
 8006372:	6879      	ldr	r1, [r7, #4]
 8006374:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006378:	e01f      	b.n	80063ba <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800637a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800637e:	2b02      	cmp	r3, #2
 8006380:	d006      	beq.n	8006390 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006384:	68ba      	ldr	r2, [r7, #8]
 8006386:	3214      	adds	r2, #20
 8006388:	6879      	ldr	r1, [r7, #4]
 800638a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800638e:	e014      	b.n	80063ba <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8006390:	2300      	movs	r3, #0
 8006392:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8006394:	e011      	b.n	80063ba <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006396:	4b33      	ldr	r3, [pc, #204]	; (8006464 <xTaskGenericNotifyFromISR+0x1e8>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00c      	beq.n	80063b8 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 800639e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a2:	f383 8811 	msr	BASEPRI, r3
 80063a6:	f3bf 8f6f 	isb	sy
 80063aa:	f3bf 8f4f 	dsb	sy
 80063ae:	61fb      	str	r3, [r7, #28]
    }
 80063b0:	bf00      	nop
 80063b2:	e7fe      	b.n	80063b2 <xTaskGenericNotifyFromISR+0x136>
                    break;
 80063b4:	bf00      	nop
 80063b6:	e000      	b.n	80063ba <xTaskGenericNotifyFromISR+0x13e>
                    break;
 80063b8:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80063ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d145      	bne.n	800644e <xTaskGenericNotifyFromISR+0x1d2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80063c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00a      	beq.n	80063e0 <xTaskGenericNotifyFromISR+0x164>
        __asm volatile
 80063ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ce:	f383 8811 	msr	BASEPRI, r3
 80063d2:	f3bf 8f6f 	isb	sy
 80063d6:	f3bf 8f4f 	dsb	sy
 80063da:	61bb      	str	r3, [r7, #24]
    }
 80063dc:	bf00      	nop
 80063de:	e7fe      	b.n	80063de <xTaskGenericNotifyFromISR+0x162>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063e0:	4b21      	ldr	r3, [pc, #132]	; (8006468 <xTaskGenericNotifyFromISR+0x1ec>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d11c      	bne.n	8006422 <xTaskGenericNotifyFromISR+0x1a6>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ea:	3304      	adds	r3, #4
 80063ec:	4618      	mov	r0, r3
 80063ee:	f7fe fa9f 	bl	8004930 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80063f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f6:	2201      	movs	r2, #1
 80063f8:	409a      	lsls	r2, r3
 80063fa:	4b1c      	ldr	r3, [pc, #112]	; (800646c <xTaskGenericNotifyFromISR+0x1f0>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4313      	orrs	r3, r2
 8006400:	4a1a      	ldr	r2, [pc, #104]	; (800646c <xTaskGenericNotifyFromISR+0x1f0>)
 8006402:	6013      	str	r3, [r2, #0]
 8006404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006408:	4613      	mov	r3, r2
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	4413      	add	r3, r2
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	4a17      	ldr	r2, [pc, #92]	; (8006470 <xTaskGenericNotifyFromISR+0x1f4>)
 8006412:	441a      	add	r2, r3
 8006414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006416:	3304      	adds	r3, #4
 8006418:	4619      	mov	r1, r3
 800641a:	4610      	mov	r0, r2
 800641c:	f7fe fa2b 	bl	8004876 <vListInsertEnd>
 8006420:	e005      	b.n	800642e <xTaskGenericNotifyFromISR+0x1b2>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006424:	3318      	adds	r3, #24
 8006426:	4619      	mov	r1, r3
 8006428:	4812      	ldr	r0, [pc, #72]	; (8006474 <xTaskGenericNotifyFromISR+0x1f8>)
 800642a:	f7fe fa24 	bl	8004876 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800642e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006432:	4b11      	ldr	r3, [pc, #68]	; (8006478 <xTaskGenericNotifyFromISR+0x1fc>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006438:	429a      	cmp	r2, r3
 800643a:	d908      	bls.n	800644e <xTaskGenericNotifyFromISR+0x1d2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 800643c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800643e:	2b00      	cmp	r3, #0
 8006440:	d002      	beq.n	8006448 <xTaskGenericNotifyFromISR+0x1cc>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8006442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006444:	2201      	movs	r2, #1
 8006446:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8006448:	4b0c      	ldr	r3, [pc, #48]	; (800647c <xTaskGenericNotifyFromISR+0x200>)
 800644a:	2201      	movs	r2, #1
 800644c:	601a      	str	r2, [r3, #0]
 800644e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006450:	617b      	str	r3, [r7, #20]
        __asm volatile
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	f383 8811 	msr	BASEPRI, r3
    }
 8006458:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 800645a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 800645c:	4618      	mov	r0, r3
 800645e:	3740      	adds	r7, #64	; 0x40
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	200002ec 	.word	0x200002ec
 8006468:	20000310 	.word	0x20000310
 800646c:	200002f0 	.word	0x200002f0
 8006470:	20000214 	.word	0x20000214
 8006474:	200002a8 	.word	0x200002a8
 8006478:	20000210 	.word	0x20000210
 800647c:	200002fc 	.word	0x200002fc

08006480 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800648a:	4b29      	ldr	r3, [pc, #164]	; (8006530 <prvAddCurrentTaskToDelayedList+0xb0>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006490:	4b28      	ldr	r3, [pc, #160]	; (8006534 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	3304      	adds	r3, #4
 8006496:	4618      	mov	r0, r3
 8006498:	f7fe fa4a 	bl	8004930 <uxListRemove>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10b      	bne.n	80064ba <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80064a2:	4b24      	ldr	r3, [pc, #144]	; (8006534 <prvAddCurrentTaskToDelayedList+0xb4>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a8:	2201      	movs	r2, #1
 80064aa:	fa02 f303 	lsl.w	r3, r2, r3
 80064ae:	43da      	mvns	r2, r3
 80064b0:	4b21      	ldr	r3, [pc, #132]	; (8006538 <prvAddCurrentTaskToDelayedList+0xb8>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4013      	ands	r3, r2
 80064b6:	4a20      	ldr	r2, [pc, #128]	; (8006538 <prvAddCurrentTaskToDelayedList+0xb8>)
 80064b8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c0:	d10a      	bne.n	80064d8 <prvAddCurrentTaskToDelayedList+0x58>
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d007      	beq.n	80064d8 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064c8:	4b1a      	ldr	r3, [pc, #104]	; (8006534 <prvAddCurrentTaskToDelayedList+0xb4>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	3304      	adds	r3, #4
 80064ce:	4619      	mov	r1, r3
 80064d0:	481a      	ldr	r0, [pc, #104]	; (800653c <prvAddCurrentTaskToDelayedList+0xbc>)
 80064d2:	f7fe f9d0 	bl	8004876 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80064d6:	e026      	b.n	8006526 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4413      	add	r3, r2
 80064de:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80064e0:	4b14      	ldr	r3, [pc, #80]	; (8006534 <prvAddCurrentTaskToDelayedList+0xb4>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68ba      	ldr	r2, [r7, #8]
 80064e6:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80064e8:	68ba      	ldr	r2, [r7, #8]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d209      	bcs.n	8006504 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064f0:	4b13      	ldr	r3, [pc, #76]	; (8006540 <prvAddCurrentTaskToDelayedList+0xc0>)
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	4b0f      	ldr	r3, [pc, #60]	; (8006534 <prvAddCurrentTaskToDelayedList+0xb4>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	3304      	adds	r3, #4
 80064fa:	4619      	mov	r1, r3
 80064fc:	4610      	mov	r0, r2
 80064fe:	f7fe f9de 	bl	80048be <vListInsert>
}
 8006502:	e010      	b.n	8006526 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006504:	4b0f      	ldr	r3, [pc, #60]	; (8006544 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	4b0a      	ldr	r3, [pc, #40]	; (8006534 <prvAddCurrentTaskToDelayedList+0xb4>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	3304      	adds	r3, #4
 800650e:	4619      	mov	r1, r3
 8006510:	4610      	mov	r0, r2
 8006512:	f7fe f9d4 	bl	80048be <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8006516:	4b0c      	ldr	r3, [pc, #48]	; (8006548 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	429a      	cmp	r2, r3
 800651e:	d202      	bcs.n	8006526 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8006520:	4a09      	ldr	r2, [pc, #36]	; (8006548 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	6013      	str	r3, [r2, #0]
}
 8006526:	bf00      	nop
 8006528:	3710      	adds	r7, #16
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	200002ec 	.word	0x200002ec
 8006534:	20000210 	.word	0x20000210
 8006538:	200002f0 	.word	0x200002f0
 800653c:	200002d4 	.word	0x200002d4
 8006540:	200002a4 	.word	0x200002a4
 8006544:	200002a0 	.word	0x200002a0
 8006548:	20000308 	.word	0x20000308

0800654c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8006552:	2300      	movs	r3, #0
 8006554:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8006556:	f000 fb31 	bl	8006bbc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800655a:	4b11      	ldr	r3, [pc, #68]	; (80065a0 <xTimerCreateTimerTask+0x54>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00b      	beq.n	800657a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8006562:	4b10      	ldr	r3, [pc, #64]	; (80065a4 <xTimerCreateTimerTask+0x58>)
 8006564:	9301      	str	r3, [sp, #4]
 8006566:	2302      	movs	r3, #2
 8006568:	9300      	str	r3, [sp, #0]
 800656a:	2300      	movs	r3, #0
 800656c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006570:	490d      	ldr	r1, [pc, #52]	; (80065a8 <xTimerCreateTimerTask+0x5c>)
 8006572:	480e      	ldr	r0, [pc, #56]	; (80065ac <xTimerCreateTimerTask+0x60>)
 8006574:	f7fe ff8a 	bl	800548c <xTaskCreate>
 8006578:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d10a      	bne.n	8006596 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8006580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006584:	f383 8811 	msr	BASEPRI, r3
 8006588:	f3bf 8f6f 	isb	sy
 800658c:	f3bf 8f4f 	dsb	sy
 8006590:	603b      	str	r3, [r7, #0]
    }
 8006592:	bf00      	nop
 8006594:	e7fe      	b.n	8006594 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8006596:	687b      	ldr	r3, [r7, #4]
    }
 8006598:	4618      	mov	r0, r3
 800659a:	3708      	adds	r7, #8
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	20000344 	.word	0x20000344
 80065a4:	20000348 	.word	0x20000348
 80065a8:	08008b00 	.word	0x08008b00
 80065ac:	0800679d 	.word	0x0800679d

080065b0 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b088      	sub	sp, #32
 80065b4:	af02      	add	r7, sp, #8
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
 80065bc:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80065be:	202c      	movs	r0, #44	; 0x2c
 80065c0:	f000 fdac 	bl	800711c <pvPortMalloc>
 80065c4:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00d      	beq.n	80065e8 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	9301      	str	r3, [sp, #4]
 80065d8:	6a3b      	ldr	r3, [r7, #32]
 80065da:	9300      	str	r3, [sp, #0]
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	68b9      	ldr	r1, [r7, #8]
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f000 f805 	bl	80065f2 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 80065e8:	697b      	ldr	r3, [r7, #20]
        }
 80065ea:	4618      	mov	r0, r3
 80065ec:	3718      	adds	r7, #24
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b086      	sub	sp, #24
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	60f8      	str	r0, [r7, #12]
 80065fa:	60b9      	str	r1, [r7, #8]
 80065fc:	607a      	str	r2, [r7, #4]
 80065fe:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d10a      	bne.n	800661c <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8006606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660a:	f383 8811 	msr	BASEPRI, r3
 800660e:	f3bf 8f6f 	isb	sy
 8006612:	f3bf 8f4f 	dsb	sy
 8006616:	617b      	str	r3, [r7, #20]
    }
 8006618:	bf00      	nop
 800661a:	e7fe      	b.n	800661a <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 800661c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661e:	2b00      	cmp	r3, #0
 8006620:	d01e      	beq.n	8006660 <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 8006622:	f000 facb 	bl	8006bbc <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8006626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800662c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 8006632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006634:	683a      	ldr	r2, [r7, #0]
 8006636:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663a:	6a3a      	ldr	r2, [r7, #32]
 800663c:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800663e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006640:	3304      	adds	r3, #4
 8006642:	4618      	mov	r0, r3
 8006644:	f7fe f90a 	bl	800485c <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d008      	beq.n	8006660 <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800664e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006650:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006654:	f043 0304 	orr.w	r3, r3, #4
 8006658:	b2da      	uxtb	r2, r3
 800665a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 8006660:	bf00      	nop
 8006662:	3718      	adds	r7, #24
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8006668:	b580      	push	{r7, lr}
 800666a:	b08a      	sub	sp, #40	; 0x28
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
 8006674:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8006676:	2300      	movs	r3, #0
 8006678:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d10a      	bne.n	8006696 <xTimerGenericCommand+0x2e>
        __asm volatile
 8006680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006684:	f383 8811 	msr	BASEPRI, r3
 8006688:	f3bf 8f6f 	isb	sy
 800668c:	f3bf 8f4f 	dsb	sy
 8006690:	623b      	str	r3, [r7, #32]
    }
 8006692:	bf00      	nop
 8006694:	e7fe      	b.n	8006694 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8006696:	4b1a      	ldr	r3, [pc, #104]	; (8006700 <xTimerGenericCommand+0x98>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d02a      	beq.n	80066f4 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	2b05      	cmp	r3, #5
 80066ae:	dc18      	bgt.n	80066e2 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80066b0:	f7ff fbfa 	bl	8005ea8 <xTaskGetSchedulerState>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d109      	bne.n	80066ce <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80066ba:	4b11      	ldr	r3, [pc, #68]	; (8006700 <xTimerGenericCommand+0x98>)
 80066bc:	6818      	ldr	r0, [r3, #0]
 80066be:	f107 0114 	add.w	r1, r7, #20
 80066c2:	2300      	movs	r3, #0
 80066c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066c6:	f7fe fa3b 	bl	8004b40 <xQueueGenericSend>
 80066ca:	6278      	str	r0, [r7, #36]	; 0x24
 80066cc:	e012      	b.n	80066f4 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80066ce:	4b0c      	ldr	r3, [pc, #48]	; (8006700 <xTimerGenericCommand+0x98>)
 80066d0:	6818      	ldr	r0, [r3, #0]
 80066d2:	f107 0114 	add.w	r1, r7, #20
 80066d6:	2300      	movs	r3, #0
 80066d8:	2200      	movs	r2, #0
 80066da:	f7fe fa31 	bl	8004b40 <xQueueGenericSend>
 80066de:	6278      	str	r0, [r7, #36]	; 0x24
 80066e0:	e008      	b.n	80066f4 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80066e2:	4b07      	ldr	r3, [pc, #28]	; (8006700 <xTimerGenericCommand+0x98>)
 80066e4:	6818      	ldr	r0, [r3, #0]
 80066e6:	f107 0114 	add.w	r1, r7, #20
 80066ea:	2300      	movs	r3, #0
 80066ec:	683a      	ldr	r2, [r7, #0]
 80066ee:	f7fe fb0d 	bl	8004d0c <xQueueGenericSendFromISR>
 80066f2:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80066f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80066f6:	4618      	mov	r0, r3
 80066f8:	3728      	adds	r7, #40	; 0x28
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	20000344 	.word	0x20000344

08006704 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006704:	b580      	push	{r7, lr}
 8006706:	b088      	sub	sp, #32
 8006708:	af02      	add	r7, sp, #8
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800670e:	4b22      	ldr	r3, [pc, #136]	; (8006798 <prvProcessExpiredTimer+0x94>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	3304      	adds	r3, #4
 800671c:	4618      	mov	r0, r3
 800671e:	f7fe f907 	bl	8004930 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006728:	f003 0304 	and.w	r3, r3, #4
 800672c:	2b00      	cmp	r3, #0
 800672e:	d022      	beq.n	8006776 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	699a      	ldr	r2, [r3, #24]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	18d1      	adds	r1, r2, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	6978      	ldr	r0, [r7, #20]
 800673e:	f000 f8d1 	bl	80068e4 <prvInsertTimerInActiveList>
 8006742:	4603      	mov	r3, r0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d01f      	beq.n	8006788 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006748:	2300      	movs	r3, #0
 800674a:	9300      	str	r3, [sp, #0]
 800674c:	2300      	movs	r3, #0
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	2100      	movs	r1, #0
 8006752:	6978      	ldr	r0, [r7, #20]
 8006754:	f7ff ff88 	bl	8006668 <xTimerGenericCommand>
 8006758:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d113      	bne.n	8006788 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8006760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006764:	f383 8811 	msr	BASEPRI, r3
 8006768:	f3bf 8f6f 	isb	sy
 800676c:	f3bf 8f4f 	dsb	sy
 8006770:	60fb      	str	r3, [r7, #12]
    }
 8006772:	bf00      	nop
 8006774:	e7fe      	b.n	8006774 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800677c:	f023 0301 	bic.w	r3, r3, #1
 8006780:	b2da      	uxtb	r2, r3
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	6a1b      	ldr	r3, [r3, #32]
 800678c:	6978      	ldr	r0, [r7, #20]
 800678e:	4798      	blx	r3
    }
 8006790:	bf00      	nop
 8006792:	3718      	adds	r7, #24
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}
 8006798:	2000033c 	.word	0x2000033c

0800679c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80067a4:	f107 0308 	add.w	r3, r7, #8
 80067a8:	4618      	mov	r0, r3
 80067aa:	f000 f857 	bl	800685c <prvGetNextExpireTime>
 80067ae:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	4619      	mov	r1, r3
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f000 f803 	bl	80067c0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80067ba:	f000 f8d5 	bl	8006968 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80067be:	e7f1      	b.n	80067a4 <prvTimerTask+0x8>

080067c0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80067ca:	f7fe ffe9 	bl	80057a0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80067ce:	f107 0308 	add.w	r3, r7, #8
 80067d2:	4618      	mov	r0, r3
 80067d4:	f000 f866 	bl	80068a4 <prvSampleTimeNow>
 80067d8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d130      	bne.n	8006842 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d10a      	bne.n	80067fc <prvProcessTimerOrBlockTask+0x3c>
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d806      	bhi.n	80067fc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80067ee:	f7fe ffe5 	bl	80057bc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80067f2:	68f9      	ldr	r1, [r7, #12]
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f7ff ff85 	bl	8006704 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80067fa:	e024      	b.n	8006846 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d008      	beq.n	8006814 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006802:	4b13      	ldr	r3, [pc, #76]	; (8006850 <prvProcessTimerOrBlockTask+0x90>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d101      	bne.n	8006810 <prvProcessTimerOrBlockTask+0x50>
 800680c:	2301      	movs	r3, #1
 800680e:	e000      	b.n	8006812 <prvProcessTimerOrBlockTask+0x52>
 8006810:	2300      	movs	r3, #0
 8006812:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006814:	4b0f      	ldr	r3, [pc, #60]	; (8006854 <prvProcessTimerOrBlockTask+0x94>)
 8006816:	6818      	ldr	r0, [r3, #0]
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	683a      	ldr	r2, [r7, #0]
 8006820:	4619      	mov	r1, r3
 8006822:	f7fe fdff 	bl	8005424 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006826:	f7fe ffc9 	bl	80057bc <xTaskResumeAll>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d10a      	bne.n	8006846 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8006830:	4b09      	ldr	r3, [pc, #36]	; (8006858 <prvProcessTimerOrBlockTask+0x98>)
 8006832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006836:	601a      	str	r2, [r3, #0]
 8006838:	f3bf 8f4f 	dsb	sy
 800683c:	f3bf 8f6f 	isb	sy
    }
 8006840:	e001      	b.n	8006846 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8006842:	f7fe ffbb 	bl	80057bc <xTaskResumeAll>
    }
 8006846:	bf00      	nop
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	20000340 	.word	0x20000340
 8006854:	20000344 	.word	0x20000344
 8006858:	e000ed04 	.word	0xe000ed04

0800685c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006864:	4b0e      	ldr	r3, [pc, #56]	; (80068a0 <prvGetNextExpireTime+0x44>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d101      	bne.n	8006872 <prvGetNextExpireTime+0x16>
 800686e:	2201      	movs	r2, #1
 8006870:	e000      	b.n	8006874 <prvGetNextExpireTime+0x18>
 8006872:	2200      	movs	r2, #0
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d105      	bne.n	800688c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006880:	4b07      	ldr	r3, [pc, #28]	; (80068a0 <prvGetNextExpireTime+0x44>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	60fb      	str	r3, [r7, #12]
 800688a:	e001      	b.n	8006890 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800688c:	2300      	movs	r3, #0
 800688e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006890:	68fb      	ldr	r3, [r7, #12]
    }
 8006892:	4618      	mov	r0, r3
 8006894:	3714      	adds	r7, #20
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	2000033c 	.word	0x2000033c

080068a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80068ac:	f7ff f814 	bl	80058d8 <xTaskGetTickCount>
 80068b0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80068b2:	4b0b      	ldr	r3, [pc, #44]	; (80068e0 <prvSampleTimeNow+0x3c>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d205      	bcs.n	80068c8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80068bc:	f000 f91a 	bl	8006af4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	601a      	str	r2, [r3, #0]
 80068c6:	e002      	b.n	80068ce <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80068ce:	4a04      	ldr	r2, [pc, #16]	; (80068e0 <prvSampleTimeNow+0x3c>)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80068d4:	68fb      	ldr	r3, [r7, #12]
    }
 80068d6:	4618      	mov	r0, r3
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	2000034c 	.word	0x2000034c

080068e4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b086      	sub	sp, #24
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	607a      	str	r2, [r7, #4]
 80068f0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80068f2:	2300      	movs	r3, #0
 80068f4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	68ba      	ldr	r2, [r7, #8]
 80068fa:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	429a      	cmp	r2, r3
 8006908:	d812      	bhi.n	8006930 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	1ad2      	subs	r2, r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	699b      	ldr	r3, [r3, #24]
 8006914:	429a      	cmp	r2, r3
 8006916:	d302      	bcc.n	800691e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006918:	2301      	movs	r3, #1
 800691a:	617b      	str	r3, [r7, #20]
 800691c:	e01b      	b.n	8006956 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800691e:	4b10      	ldr	r3, [pc, #64]	; (8006960 <prvInsertTimerInActiveList+0x7c>)
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	3304      	adds	r3, #4
 8006926:	4619      	mov	r1, r3
 8006928:	4610      	mov	r0, r2
 800692a:	f7fd ffc8 	bl	80048be <vListInsert>
 800692e:	e012      	b.n	8006956 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	429a      	cmp	r2, r3
 8006936:	d206      	bcs.n	8006946 <prvInsertTimerInActiveList+0x62>
 8006938:	68ba      	ldr	r2, [r7, #8]
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	429a      	cmp	r2, r3
 800693e:	d302      	bcc.n	8006946 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8006940:	2301      	movs	r3, #1
 8006942:	617b      	str	r3, [r7, #20]
 8006944:	e007      	b.n	8006956 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006946:	4b07      	ldr	r3, [pc, #28]	; (8006964 <prvInsertTimerInActiveList+0x80>)
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	3304      	adds	r3, #4
 800694e:	4619      	mov	r1, r3
 8006950:	4610      	mov	r0, r2
 8006952:	f7fd ffb4 	bl	80048be <vListInsert>
            }
        }

        return xProcessTimerNow;
 8006956:	697b      	ldr	r3, [r7, #20]
    }
 8006958:	4618      	mov	r0, r3
 800695a:	3718      	adds	r7, #24
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	20000340 	.word	0x20000340
 8006964:	2000033c 	.word	0x2000033c

08006968 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006968:	b580      	push	{r7, lr}
 800696a:	b08c      	sub	sp, #48	; 0x30
 800696c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800696e:	e0ae      	b.n	8006ace <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	2b00      	cmp	r3, #0
 8006974:	f2c0 80ab 	blt.w	8006ace <prvProcessReceivedCommands+0x166>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697e:	695b      	ldr	r3, [r3, #20]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d004      	beq.n	800698e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006986:	3304      	adds	r3, #4
 8006988:	4618      	mov	r0, r3
 800698a:	f7fd ffd1 	bl	8004930 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800698e:	1d3b      	adds	r3, r7, #4
 8006990:	4618      	mov	r0, r3
 8006992:	f7ff ff87 	bl	80068a4 <prvSampleTimeNow>
 8006996:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	2b09      	cmp	r3, #9
 800699c:	f200 8096 	bhi.w	8006acc <prvProcessReceivedCommands+0x164>
 80069a0:	a201      	add	r2, pc, #4	; (adr r2, 80069a8 <prvProcessReceivedCommands+0x40>)
 80069a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a6:	bf00      	nop
 80069a8:	080069d1 	.word	0x080069d1
 80069ac:	080069d1 	.word	0x080069d1
 80069b0:	080069d1 	.word	0x080069d1
 80069b4:	08006a45 	.word	0x08006a45
 80069b8:	08006a59 	.word	0x08006a59
 80069bc:	08006aa3 	.word	0x08006aa3
 80069c0:	080069d1 	.word	0x080069d1
 80069c4:	080069d1 	.word	0x080069d1
 80069c8:	08006a45 	.word	0x08006a45
 80069cc:	08006a59 	.word	0x08006a59
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80069d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069d6:	f043 0301 	orr.w	r3, r3, #1
 80069da:	b2da      	uxtb	r2, r3
 80069dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e6:	699b      	ldr	r3, [r3, #24]
 80069e8:	18d1      	adds	r1, r2, r3
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6a3a      	ldr	r2, [r7, #32]
 80069ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069f0:	f7ff ff78 	bl	80068e4 <prvInsertTimerInActiveList>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d069      	beq.n	8006ace <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a00:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a08:	f003 0304 	and.w	r3, r3, #4
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d05e      	beq.n	8006ace <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	441a      	add	r2, r3
 8006a18:	2300      	movs	r3, #0
 8006a1a:	9300      	str	r3, [sp, #0]
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	2100      	movs	r1, #0
 8006a20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a22:	f7ff fe21 	bl	8006668 <xTimerGenericCommand>
 8006a26:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d14f      	bne.n	8006ace <prvProcessReceivedCommands+0x166>
        __asm volatile
 8006a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a32:	f383 8811 	msr	BASEPRI, r3
 8006a36:	f3bf 8f6f 	isb	sy
 8006a3a:	f3bf 8f4f 	dsb	sy
 8006a3e:	61bb      	str	r3, [r7, #24]
    }
 8006a40:	bf00      	nop
 8006a42:	e7fe      	b.n	8006a42 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a4a:	f023 0301 	bic.w	r3, r3, #1
 8006a4e:	b2da      	uxtb	r2, r3
 8006a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8006a56:	e03a      	b.n	8006ace <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a5e:	f043 0301 	orr.w	r3, r3, #1
 8006a62:	b2da      	uxtb	r2, r3
 8006a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a72:	699b      	ldr	r3, [r3, #24]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d10a      	bne.n	8006a8e <prvProcessReceivedCommands+0x126>
        __asm volatile
 8006a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7c:	f383 8811 	msr	BASEPRI, r3
 8006a80:	f3bf 8f6f 	isb	sy
 8006a84:	f3bf 8f4f 	dsb	sy
 8006a88:	617b      	str	r3, [r7, #20]
    }
 8006a8a:	bf00      	nop
 8006a8c:	e7fe      	b.n	8006a8c <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a90:	699a      	ldr	r2, [r3, #24]
 8006a92:	6a3b      	ldr	r3, [r7, #32]
 8006a94:	18d1      	adds	r1, r2, r3
 8006a96:	6a3b      	ldr	r3, [r7, #32]
 8006a98:	6a3a      	ldr	r2, [r7, #32]
 8006a9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a9c:	f7ff ff22 	bl	80068e4 <prvInsertTimerInActiveList>
                        break;
 8006aa0:	e015      	b.n	8006ace <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006aa8:	f003 0302 	and.w	r3, r3, #2
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d103      	bne.n	8006ab8 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8006ab0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ab2:	f000 fc13 	bl	80072dc <vPortFree>
 8006ab6:	e00a      	b.n	8006ace <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006abe:	f023 0301 	bic.w	r3, r3, #1
 8006ac2:	b2da      	uxtb	r2, r3
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8006aca:	e000      	b.n	8006ace <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
 8006acc:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ace:	4b08      	ldr	r3, [pc, #32]	; (8006af0 <prvProcessReceivedCommands+0x188>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f107 0108 	add.w	r1, r7, #8
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f7fe f9c1 	bl	8004e60 <xQueueReceive>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f47f af45 	bne.w	8006970 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8006ae6:	bf00      	nop
 8006ae8:	bf00      	nop
 8006aea:	3728      	adds	r7, #40	; 0x28
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	20000344 	.word	0x20000344

08006af4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b088      	sub	sp, #32
 8006af8:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006afa:	e048      	b.n	8006b8e <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006afc:	4b2d      	ldr	r3, [pc, #180]	; (8006bb4 <prvSwitchTimerLists+0xc0>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b06:	4b2b      	ldr	r3, [pc, #172]	; (8006bb4 <prvSwitchTimerLists+0xc0>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	3304      	adds	r3, #4
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7fd ff0b 	bl	8004930 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6a1b      	ldr	r3, [r3, #32]
 8006b1e:	68f8      	ldr	r0, [r7, #12]
 8006b20:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b28:	f003 0304 	and.w	r3, r3, #4
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d02e      	beq.n	8006b8e <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	699b      	ldr	r3, [r3, #24]
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	4413      	add	r3, r2
 8006b38:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d90e      	bls.n	8006b60 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	68ba      	ldr	r2, [r7, #8]
 8006b46:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b4e:	4b19      	ldr	r3, [pc, #100]	; (8006bb4 <prvSwitchTimerLists+0xc0>)
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	3304      	adds	r3, #4
 8006b56:	4619      	mov	r1, r3
 8006b58:	4610      	mov	r0, r2
 8006b5a:	f7fd feb0 	bl	80048be <vListInsert>
 8006b5e:	e016      	b.n	8006b8e <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b60:	2300      	movs	r3, #0
 8006b62:	9300      	str	r3, [sp, #0]
 8006b64:	2300      	movs	r3, #0
 8006b66:	693a      	ldr	r2, [r7, #16]
 8006b68:	2100      	movs	r1, #0
 8006b6a:	68f8      	ldr	r0, [r7, #12]
 8006b6c:	f7ff fd7c 	bl	8006668 <xTimerGenericCommand>
 8006b70:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10a      	bne.n	8006b8e <prvSwitchTimerLists+0x9a>
        __asm volatile
 8006b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7c:	f383 8811 	msr	BASEPRI, r3
 8006b80:	f3bf 8f6f 	isb	sy
 8006b84:	f3bf 8f4f 	dsb	sy
 8006b88:	603b      	str	r3, [r7, #0]
    }
 8006b8a:	bf00      	nop
 8006b8c:	e7fe      	b.n	8006b8c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b8e:	4b09      	ldr	r3, [pc, #36]	; (8006bb4 <prvSwitchTimerLists+0xc0>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d1b1      	bne.n	8006afc <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8006b98:	4b06      	ldr	r3, [pc, #24]	; (8006bb4 <prvSwitchTimerLists+0xc0>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8006b9e:	4b06      	ldr	r3, [pc, #24]	; (8006bb8 <prvSwitchTimerLists+0xc4>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a04      	ldr	r2, [pc, #16]	; (8006bb4 <prvSwitchTimerLists+0xc0>)
 8006ba4:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8006ba6:	4a04      	ldr	r2, [pc, #16]	; (8006bb8 <prvSwitchTimerLists+0xc4>)
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	6013      	str	r3, [r2, #0]
    }
 8006bac:	bf00      	nop
 8006bae:	3718      	adds	r7, #24
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	2000033c 	.word	0x2000033c
 8006bb8:	20000340 	.word	0x20000340

08006bbc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006bc0:	f000 f98a 	bl	8006ed8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8006bc4:	4b12      	ldr	r3, [pc, #72]	; (8006c10 <prvCheckForValidListAndQueue+0x54>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d11d      	bne.n	8006c08 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8006bcc:	4811      	ldr	r0, [pc, #68]	; (8006c14 <prvCheckForValidListAndQueue+0x58>)
 8006bce:	f7fd fe25 	bl	800481c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8006bd2:	4811      	ldr	r0, [pc, #68]	; (8006c18 <prvCheckForValidListAndQueue+0x5c>)
 8006bd4:	f7fd fe22 	bl	800481c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006bd8:	4b10      	ldr	r3, [pc, #64]	; (8006c1c <prvCheckForValidListAndQueue+0x60>)
 8006bda:	4a0e      	ldr	r2, [pc, #56]	; (8006c14 <prvCheckForValidListAndQueue+0x58>)
 8006bdc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8006bde:	4b10      	ldr	r3, [pc, #64]	; (8006c20 <prvCheckForValidListAndQueue+0x64>)
 8006be0:	4a0d      	ldr	r2, [pc, #52]	; (8006c18 <prvCheckForValidListAndQueue+0x5c>)
 8006be2:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006be4:	2200      	movs	r2, #0
 8006be6:	210c      	movs	r1, #12
 8006be8:	200a      	movs	r0, #10
 8006bea:	f7fd ff26 	bl	8004a3a <xQueueGenericCreate>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	4a07      	ldr	r2, [pc, #28]	; (8006c10 <prvCheckForValidListAndQueue+0x54>)
 8006bf2:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8006bf4:	4b06      	ldr	r3, [pc, #24]	; (8006c10 <prvCheckForValidListAndQueue+0x54>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d005      	beq.n	8006c08 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006bfc:	4b04      	ldr	r3, [pc, #16]	; (8006c10 <prvCheckForValidListAndQueue+0x54>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4908      	ldr	r1, [pc, #32]	; (8006c24 <prvCheckForValidListAndQueue+0x68>)
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7fe fbe4 	bl	80053d0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006c08:	f000 f996 	bl	8006f38 <vPortExitCritical>
    }
 8006c0c:	bf00      	nop
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	20000344 	.word	0x20000344
 8006c14:	20000314 	.word	0x20000314
 8006c18:	20000328 	.word	0x20000328
 8006c1c:	2000033c 	.word	0x2000033c
 8006c20:	20000340 	.word	0x20000340
 8006c24:	08008b08 	.word	0x08008b08

08006c28 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

    BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
    {
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b086      	sub	sp, #24
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Timer_t * pxTimer = xTimer;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	613b      	str	r3, [r7, #16]

        configASSERT( xTimer );
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d10a      	bne.n	8006c50 <xTimerIsTimerActive+0x28>
        __asm volatile
 8006c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3e:	f383 8811 	msr	BASEPRI, r3
 8006c42:	f3bf 8f6f 	isb	sy
 8006c46:	f3bf 8f4f 	dsb	sy
 8006c4a:	60fb      	str	r3, [r7, #12]
    }
 8006c4c:	bf00      	nop
 8006c4e:	e7fe      	b.n	8006c4e <xTimerIsTimerActive+0x26>

        /* Is the timer in the list of active timers? */
        taskENTER_CRITICAL();
 8006c50:	f000 f942 	bl	8006ed8 <vPortEnterCritical>
        {
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c5a:	f003 0301 	and.w	r3, r3, #1
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d102      	bne.n	8006c68 <xTimerIsTimerActive+0x40>
            {
                xReturn = pdFALSE;
 8006c62:	2300      	movs	r3, #0
 8006c64:	617b      	str	r3, [r7, #20]
 8006c66:	e001      	b.n	8006c6c <xTimerIsTimerActive+0x44>
            }
            else
            {
                xReturn = pdTRUE;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	617b      	str	r3, [r7, #20]
            }
        }
        taskEXIT_CRITICAL();
 8006c6c:	f000 f964 	bl	8006f38 <vPortExitCritical>

        return xReturn;
 8006c70:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 Can't be pointer to const due to the typedef. */
 8006c72:	4618      	mov	r0, r3
 8006c74:	3718      	adds	r7, #24
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
	...

08006c7c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	3b04      	subs	r3, #4
 8006c8c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006c94:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	3b04      	subs	r3, #4
 8006c9a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	f023 0201 	bic.w	r2, r3, #1
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	3b04      	subs	r3, #4
 8006caa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006cac:	4a0c      	ldr	r2, [pc, #48]	; (8006ce0 <pxPortInitialiseStack+0x64>)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	3b14      	subs	r3, #20
 8006cb6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	3b04      	subs	r3, #4
 8006cc2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f06f 0202 	mvn.w	r2, #2
 8006cca:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	3b20      	subs	r3, #32
 8006cd0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3714      	adds	r7, #20
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr
 8006ce0:	08006ce5 	.word	0x08006ce5

08006ce4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b085      	sub	sp, #20
 8006ce8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8006cea:	2300      	movs	r3, #0
 8006cec:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006cee:	4b12      	ldr	r3, [pc, #72]	; (8006d38 <prvTaskExitError+0x54>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cf6:	d00a      	beq.n	8006d0e <prvTaskExitError+0x2a>
        __asm volatile
 8006cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfc:	f383 8811 	msr	BASEPRI, r3
 8006d00:	f3bf 8f6f 	isb	sy
 8006d04:	f3bf 8f4f 	dsb	sy
 8006d08:	60fb      	str	r3, [r7, #12]
    }
 8006d0a:	bf00      	nop
 8006d0c:	e7fe      	b.n	8006d0c <prvTaskExitError+0x28>
        __asm volatile
 8006d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d12:	f383 8811 	msr	BASEPRI, r3
 8006d16:	f3bf 8f6f 	isb	sy
 8006d1a:	f3bf 8f4f 	dsb	sy
 8006d1e:	60bb      	str	r3, [r7, #8]
    }
 8006d20:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8006d22:	bf00      	nop
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d0fc      	beq.n	8006d24 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8006d2a:	bf00      	nop
 8006d2c:	bf00      	nop
 8006d2e:	3714      	adds	r7, #20
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr
 8006d38:	20000020 	.word	0x20000020
 8006d3c:	00000000 	.word	0x00000000

08006d40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006d40:	4b07      	ldr	r3, [pc, #28]	; (8006d60 <pxCurrentTCBConst2>)
 8006d42:	6819      	ldr	r1, [r3, #0]
 8006d44:	6808      	ldr	r0, [r1, #0]
 8006d46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d4a:	f380 8809 	msr	PSP, r0
 8006d4e:	f3bf 8f6f 	isb	sy
 8006d52:	f04f 0000 	mov.w	r0, #0
 8006d56:	f380 8811 	msr	BASEPRI, r0
 8006d5a:	4770      	bx	lr
 8006d5c:	f3af 8000 	nop.w

08006d60 <pxCurrentTCBConst2>:
 8006d60:	20000210 	.word	0x20000210
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006d64:	bf00      	nop
 8006d66:	bf00      	nop

08006d68 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006d68:	4808      	ldr	r0, [pc, #32]	; (8006d8c <prvPortStartFirstTask+0x24>)
 8006d6a:	6800      	ldr	r0, [r0, #0]
 8006d6c:	6800      	ldr	r0, [r0, #0]
 8006d6e:	f380 8808 	msr	MSP, r0
 8006d72:	f04f 0000 	mov.w	r0, #0
 8006d76:	f380 8814 	msr	CONTROL, r0
 8006d7a:	b662      	cpsie	i
 8006d7c:	b661      	cpsie	f
 8006d7e:	f3bf 8f4f 	dsb	sy
 8006d82:	f3bf 8f6f 	isb	sy
 8006d86:	df00      	svc	0
 8006d88:	bf00      	nop
 8006d8a:	0000      	.short	0x0000
 8006d8c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8006d90:	bf00      	nop
 8006d92:	bf00      	nop

08006d94 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b086      	sub	sp, #24
 8006d98:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006d9a:	4b46      	ldr	r3, [pc, #280]	; (8006eb4 <xPortStartScheduler+0x120>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a46      	ldr	r2, [pc, #280]	; (8006eb8 <xPortStartScheduler+0x124>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d10a      	bne.n	8006dba <xPortStartScheduler+0x26>
        __asm volatile
 8006da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da8:	f383 8811 	msr	BASEPRI, r3
 8006dac:	f3bf 8f6f 	isb	sy
 8006db0:	f3bf 8f4f 	dsb	sy
 8006db4:	613b      	str	r3, [r7, #16]
    }
 8006db6:	bf00      	nop
 8006db8:	e7fe      	b.n	8006db8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006dba:	4b3e      	ldr	r3, [pc, #248]	; (8006eb4 <xPortStartScheduler+0x120>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a3f      	ldr	r2, [pc, #252]	; (8006ebc <xPortStartScheduler+0x128>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d10a      	bne.n	8006dda <xPortStartScheduler+0x46>
        __asm volatile
 8006dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc8:	f383 8811 	msr	BASEPRI, r3
 8006dcc:	f3bf 8f6f 	isb	sy
 8006dd0:	f3bf 8f4f 	dsb	sy
 8006dd4:	60fb      	str	r3, [r7, #12]
    }
 8006dd6:	bf00      	nop
 8006dd8:	e7fe      	b.n	8006dd8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006dda:	4b39      	ldr	r3, [pc, #228]	; (8006ec0 <xPortStartScheduler+0x12c>)
 8006ddc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	22ff      	movs	r2, #255	; 0xff
 8006dea:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006df4:	78fb      	ldrb	r3, [r7, #3]
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006dfc:	b2da      	uxtb	r2, r3
 8006dfe:	4b31      	ldr	r3, [pc, #196]	; (8006ec4 <xPortStartScheduler+0x130>)
 8006e00:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006e02:	4b31      	ldr	r3, [pc, #196]	; (8006ec8 <xPortStartScheduler+0x134>)
 8006e04:	2207      	movs	r2, #7
 8006e06:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e08:	e009      	b.n	8006e1e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8006e0a:	4b2f      	ldr	r3, [pc, #188]	; (8006ec8 <xPortStartScheduler+0x134>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	3b01      	subs	r3, #1
 8006e10:	4a2d      	ldr	r2, [pc, #180]	; (8006ec8 <xPortStartScheduler+0x134>)
 8006e12:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006e14:	78fb      	ldrb	r3, [r7, #3]
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	005b      	lsls	r3, r3, #1
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e1e:	78fb      	ldrb	r3, [r7, #3]
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e26:	2b80      	cmp	r3, #128	; 0x80
 8006e28:	d0ef      	beq.n	8006e0a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006e2a:	4b27      	ldr	r3, [pc, #156]	; (8006ec8 <xPortStartScheduler+0x134>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f1c3 0307 	rsb	r3, r3, #7
 8006e32:	2b04      	cmp	r3, #4
 8006e34:	d00a      	beq.n	8006e4c <xPortStartScheduler+0xb8>
        __asm volatile
 8006e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3a:	f383 8811 	msr	BASEPRI, r3
 8006e3e:	f3bf 8f6f 	isb	sy
 8006e42:	f3bf 8f4f 	dsb	sy
 8006e46:	60bb      	str	r3, [r7, #8]
    }
 8006e48:	bf00      	nop
 8006e4a:	e7fe      	b.n	8006e4a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006e4c:	4b1e      	ldr	r3, [pc, #120]	; (8006ec8 <xPortStartScheduler+0x134>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	021b      	lsls	r3, r3, #8
 8006e52:	4a1d      	ldr	r2, [pc, #116]	; (8006ec8 <xPortStartScheduler+0x134>)
 8006e54:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006e56:	4b1c      	ldr	r3, [pc, #112]	; (8006ec8 <xPortStartScheduler+0x134>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e5e:	4a1a      	ldr	r2, [pc, #104]	; (8006ec8 <xPortStartScheduler+0x134>)
 8006e60:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	b2da      	uxtb	r2, r3
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8006e6a:	4b18      	ldr	r3, [pc, #96]	; (8006ecc <xPortStartScheduler+0x138>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a17      	ldr	r2, [pc, #92]	; (8006ecc <xPortStartScheduler+0x138>)
 8006e70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e74:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006e76:	4b15      	ldr	r3, [pc, #84]	; (8006ecc <xPortStartScheduler+0x138>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a14      	ldr	r2, [pc, #80]	; (8006ecc <xPortStartScheduler+0x138>)
 8006e7c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006e80:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006e82:	f000 f8db 	bl	800703c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006e86:	4b12      	ldr	r3, [pc, #72]	; (8006ed0 <xPortStartScheduler+0x13c>)
 8006e88:	2200      	movs	r2, #0
 8006e8a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8006e8c:	f000 f8fa 	bl	8007084 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006e90:	4b10      	ldr	r3, [pc, #64]	; (8006ed4 <xPortStartScheduler+0x140>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a0f      	ldr	r2, [pc, #60]	; (8006ed4 <xPortStartScheduler+0x140>)
 8006e96:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006e9a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8006e9c:	f7ff ff64 	bl	8006d68 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006ea0:	f7fe fdc0 	bl	8005a24 <vTaskSwitchContext>
    prvTaskExitError();
 8006ea4:	f7ff ff1e 	bl	8006ce4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3718      	adds	r7, #24
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	e000ed00 	.word	0xe000ed00
 8006eb8:	410fc271 	.word	0x410fc271
 8006ebc:	410fc270 	.word	0x410fc270
 8006ec0:	e000e400 	.word	0xe000e400
 8006ec4:	20000350 	.word	0x20000350
 8006ec8:	20000354 	.word	0x20000354
 8006ecc:	e000ed20 	.word	0xe000ed20
 8006ed0:	20000020 	.word	0x20000020
 8006ed4:	e000ef34 	.word	0xe000ef34

08006ed8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
        __asm volatile
 8006ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee2:	f383 8811 	msr	BASEPRI, r3
 8006ee6:	f3bf 8f6f 	isb	sy
 8006eea:	f3bf 8f4f 	dsb	sy
 8006eee:	607b      	str	r3, [r7, #4]
    }
 8006ef0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8006ef2:	4b0f      	ldr	r3, [pc, #60]	; (8006f30 <vPortEnterCritical+0x58>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	4a0d      	ldr	r2, [pc, #52]	; (8006f30 <vPortEnterCritical+0x58>)
 8006efa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006efc:	4b0c      	ldr	r3, [pc, #48]	; (8006f30 <vPortEnterCritical+0x58>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d10f      	bne.n	8006f24 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006f04:	4b0b      	ldr	r3, [pc, #44]	; (8006f34 <vPortEnterCritical+0x5c>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00a      	beq.n	8006f24 <vPortEnterCritical+0x4c>
        __asm volatile
 8006f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f12:	f383 8811 	msr	BASEPRI, r3
 8006f16:	f3bf 8f6f 	isb	sy
 8006f1a:	f3bf 8f4f 	dsb	sy
 8006f1e:	603b      	str	r3, [r7, #0]
    }
 8006f20:	bf00      	nop
 8006f22:	e7fe      	b.n	8006f22 <vPortEnterCritical+0x4a>
    }
}
 8006f24:	bf00      	nop
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr
 8006f30:	20000020 	.word	0x20000020
 8006f34:	e000ed04 	.word	0xe000ed04

08006f38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8006f3e:	4b12      	ldr	r3, [pc, #72]	; (8006f88 <vPortExitCritical+0x50>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10a      	bne.n	8006f5c <vPortExitCritical+0x24>
        __asm volatile
 8006f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4a:	f383 8811 	msr	BASEPRI, r3
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	f3bf 8f4f 	dsb	sy
 8006f56:	607b      	str	r3, [r7, #4]
    }
 8006f58:	bf00      	nop
 8006f5a:	e7fe      	b.n	8006f5a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8006f5c:	4b0a      	ldr	r3, [pc, #40]	; (8006f88 <vPortExitCritical+0x50>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	3b01      	subs	r3, #1
 8006f62:	4a09      	ldr	r2, [pc, #36]	; (8006f88 <vPortExitCritical+0x50>)
 8006f64:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006f66:	4b08      	ldr	r3, [pc, #32]	; (8006f88 <vPortExitCritical+0x50>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d105      	bne.n	8006f7a <vPortExitCritical+0x42>
 8006f6e:	2300      	movs	r3, #0
 8006f70:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	f383 8811 	msr	BASEPRI, r3
    }
 8006f78:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8006f7a:	bf00      	nop
 8006f7c:	370c      	adds	r7, #12
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	20000020 	.word	0x20000020
 8006f8c:	00000000 	.word	0x00000000

08006f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006f90:	f3ef 8009 	mrs	r0, PSP
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	4b15      	ldr	r3, [pc, #84]	; (8006ff0 <pxCurrentTCBConst>)
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	f01e 0f10 	tst.w	lr, #16
 8006fa0:	bf08      	it	eq
 8006fa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006fa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006faa:	6010      	str	r0, [r2, #0]
 8006fac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006fb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006fb4:	f380 8811 	msr	BASEPRI, r0
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	f3bf 8f6f 	isb	sy
 8006fc0:	f7fe fd30 	bl	8005a24 <vTaskSwitchContext>
 8006fc4:	f04f 0000 	mov.w	r0, #0
 8006fc8:	f380 8811 	msr	BASEPRI, r0
 8006fcc:	bc09      	pop	{r0, r3}
 8006fce:	6819      	ldr	r1, [r3, #0]
 8006fd0:	6808      	ldr	r0, [r1, #0]
 8006fd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fd6:	f01e 0f10 	tst.w	lr, #16
 8006fda:	bf08      	it	eq
 8006fdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006fe0:	f380 8809 	msr	PSP, r0
 8006fe4:	f3bf 8f6f 	isb	sy
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	f3af 8000 	nop.w

08006ff0 <pxCurrentTCBConst>:
 8006ff0:	20000210 	.word	0x20000210
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006ff4:	bf00      	nop
 8006ff6:	bf00      	nop

08006ff8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
        __asm volatile
 8006ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007002:	f383 8811 	msr	BASEPRI, r3
 8007006:	f3bf 8f6f 	isb	sy
 800700a:	f3bf 8f4f 	dsb	sy
 800700e:	607b      	str	r3, [r7, #4]
    }
 8007010:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007012:	f7fe fc71 	bl	80058f8 <xTaskIncrementTick>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d003      	beq.n	8007024 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800701c:	4b06      	ldr	r3, [pc, #24]	; (8007038 <SysTick_Handler+0x40>)
 800701e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007022:	601a      	str	r2, [r3, #0]
 8007024:	2300      	movs	r3, #0
 8007026:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	f383 8811 	msr	BASEPRI, r3
    }
 800702e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8007030:	bf00      	nop
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	e000ed04 	.word	0xe000ed04

0800703c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800703c:	b480      	push	{r7}
 800703e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007040:	4b0b      	ldr	r3, [pc, #44]	; (8007070 <vPortSetupTimerInterrupt+0x34>)
 8007042:	2200      	movs	r2, #0
 8007044:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007046:	4b0b      	ldr	r3, [pc, #44]	; (8007074 <vPortSetupTimerInterrupt+0x38>)
 8007048:	2200      	movs	r2, #0
 800704a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800704c:	4b0a      	ldr	r3, [pc, #40]	; (8007078 <vPortSetupTimerInterrupt+0x3c>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a0a      	ldr	r2, [pc, #40]	; (800707c <vPortSetupTimerInterrupt+0x40>)
 8007052:	fba2 2303 	umull	r2, r3, r2, r3
 8007056:	099b      	lsrs	r3, r3, #6
 8007058:	4a09      	ldr	r2, [pc, #36]	; (8007080 <vPortSetupTimerInterrupt+0x44>)
 800705a:	3b01      	subs	r3, #1
 800705c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800705e:	4b04      	ldr	r3, [pc, #16]	; (8007070 <vPortSetupTimerInterrupt+0x34>)
 8007060:	2207      	movs	r2, #7
 8007062:	601a      	str	r2, [r3, #0]
}
 8007064:	bf00      	nop
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	e000e010 	.word	0xe000e010
 8007074:	e000e018 	.word	0xe000e018
 8007078:	2000000c 	.word	0x2000000c
 800707c:	10624dd3 	.word	0x10624dd3
 8007080:	e000e014 	.word	0xe000e014

08007084 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007084:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007094 <vPortEnableVFP+0x10>
 8007088:	6801      	ldr	r1, [r0, #0]
 800708a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800708e:	6001      	str	r1, [r0, #0]
 8007090:	4770      	bx	lr
 8007092:	0000      	.short	0x0000
 8007094:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007098:	bf00      	nop
 800709a:	bf00      	nop

0800709c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80070a2:	f3ef 8305 	mrs	r3, IPSR
 80070a6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2b0f      	cmp	r3, #15
 80070ac:	d914      	bls.n	80070d8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80070ae:	4a17      	ldr	r2, [pc, #92]	; (800710c <vPortValidateInterruptPriority+0x70>)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	4413      	add	r3, r2
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80070b8:	4b15      	ldr	r3, [pc, #84]	; (8007110 <vPortValidateInterruptPriority+0x74>)
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	7afa      	ldrb	r2, [r7, #11]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d20a      	bcs.n	80070d8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80070c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c6:	f383 8811 	msr	BASEPRI, r3
 80070ca:	f3bf 8f6f 	isb	sy
 80070ce:	f3bf 8f4f 	dsb	sy
 80070d2:	607b      	str	r3, [r7, #4]
    }
 80070d4:	bf00      	nop
 80070d6:	e7fe      	b.n	80070d6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80070d8:	4b0e      	ldr	r3, [pc, #56]	; (8007114 <vPortValidateInterruptPriority+0x78>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80070e0:	4b0d      	ldr	r3, [pc, #52]	; (8007118 <vPortValidateInterruptPriority+0x7c>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d90a      	bls.n	80070fe <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80070e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ec:	f383 8811 	msr	BASEPRI, r3
 80070f0:	f3bf 8f6f 	isb	sy
 80070f4:	f3bf 8f4f 	dsb	sy
 80070f8:	603b      	str	r3, [r7, #0]
    }
 80070fa:	bf00      	nop
 80070fc:	e7fe      	b.n	80070fc <vPortValidateInterruptPriority+0x60>
    }
 80070fe:	bf00      	nop
 8007100:	3714      	adds	r7, #20
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	e000e3f0 	.word	0xe000e3f0
 8007110:	20000350 	.word	0x20000350
 8007114:	e000ed0c 	.word	0xe000ed0c
 8007118:	20000354 	.word	0x20000354

0800711c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b08a      	sub	sp, #40	; 0x28
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8007124:	2300      	movs	r3, #0
 8007126:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8007128:	f7fe fb3a 	bl	80057a0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800712c:	4b65      	ldr	r3, [pc, #404]	; (80072c4 <pvPortMalloc+0x1a8>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d101      	bne.n	8007138 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007134:	f000 f934 	bl	80073a0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007138:	4b63      	ldr	r3, [pc, #396]	; (80072c8 <pvPortMalloc+0x1ac>)
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4013      	ands	r3, r2
 8007140:	2b00      	cmp	r3, #0
 8007142:	f040 80a7 	bne.w	8007294 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d02d      	beq.n	80071a8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800714c:	2208      	movs	r2, #8
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	429a      	cmp	r2, r3
 8007156:	d227      	bcs.n	80071a8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8007158:	2208      	movs	r2, #8
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4413      	add	r3, r2
 800715e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f003 0307 	and.w	r3, r3, #7
 8007166:	2b00      	cmp	r3, #0
 8007168:	d021      	beq.n	80071ae <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f023 0307 	bic.w	r3, r3, #7
 8007170:	3308      	adds	r3, #8
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	429a      	cmp	r2, r3
 8007176:	d214      	bcs.n	80071a2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f023 0307 	bic.w	r3, r3, #7
 800717e:	3308      	adds	r3, #8
 8007180:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f003 0307 	and.w	r3, r3, #7
 8007188:	2b00      	cmp	r3, #0
 800718a:	d010      	beq.n	80071ae <pvPortMalloc+0x92>
        __asm volatile
 800718c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007190:	f383 8811 	msr	BASEPRI, r3
 8007194:	f3bf 8f6f 	isb	sy
 8007198:	f3bf 8f4f 	dsb	sy
 800719c:	617b      	str	r3, [r7, #20]
    }
 800719e:	bf00      	nop
 80071a0:	e7fe      	b.n	80071a0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80071a2:	2300      	movs	r3, #0
 80071a4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80071a6:	e002      	b.n	80071ae <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80071a8:	2300      	movs	r3, #0
 80071aa:	607b      	str	r3, [r7, #4]
 80071ac:	e000      	b.n	80071b0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80071ae:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d06e      	beq.n	8007294 <pvPortMalloc+0x178>
 80071b6:	4b45      	ldr	r3, [pc, #276]	; (80072cc <pvPortMalloc+0x1b0>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d869      	bhi.n	8007294 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80071c0:	4b43      	ldr	r3, [pc, #268]	; (80072d0 <pvPortMalloc+0x1b4>)
 80071c2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80071c4:	4b42      	ldr	r3, [pc, #264]	; (80072d0 <pvPortMalloc+0x1b4>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80071ca:	e004      	b.n	80071d6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80071cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ce:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80071d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80071d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d903      	bls.n	80071e8 <pvPortMalloc+0xcc>
 80071e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d1f1      	bne.n	80071cc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80071e8:	4b36      	ldr	r3, [pc, #216]	; (80072c4 <pvPortMalloc+0x1a8>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d050      	beq.n	8007294 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80071f2:	6a3b      	ldr	r3, [r7, #32]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	2208      	movs	r2, #8
 80071f8:	4413      	add	r3, r2
 80071fa:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80071fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	6a3b      	ldr	r3, [r7, #32]
 8007202:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007206:	685a      	ldr	r2, [r3, #4]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	1ad2      	subs	r2, r2, r3
 800720c:	2308      	movs	r3, #8
 800720e:	005b      	lsls	r3, r3, #1
 8007210:	429a      	cmp	r2, r3
 8007212:	d91f      	bls.n	8007254 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4413      	add	r3, r2
 800721a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	f003 0307 	and.w	r3, r3, #7
 8007222:	2b00      	cmp	r3, #0
 8007224:	d00a      	beq.n	800723c <pvPortMalloc+0x120>
        __asm volatile
 8007226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800722a:	f383 8811 	msr	BASEPRI, r3
 800722e:	f3bf 8f6f 	isb	sy
 8007232:	f3bf 8f4f 	dsb	sy
 8007236:	613b      	str	r3, [r7, #16]
    }
 8007238:	bf00      	nop
 800723a:	e7fe      	b.n	800723a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800723c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723e:	685a      	ldr	r2, [r3, #4]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	1ad2      	subs	r2, r2, r3
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800724e:	69b8      	ldr	r0, [r7, #24]
 8007250:	f000 f908 	bl	8007464 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007254:	4b1d      	ldr	r3, [pc, #116]	; (80072cc <pvPortMalloc+0x1b0>)
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	4a1b      	ldr	r2, [pc, #108]	; (80072cc <pvPortMalloc+0x1b0>)
 8007260:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007262:	4b1a      	ldr	r3, [pc, #104]	; (80072cc <pvPortMalloc+0x1b0>)
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	4b1b      	ldr	r3, [pc, #108]	; (80072d4 <pvPortMalloc+0x1b8>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	429a      	cmp	r2, r3
 800726c:	d203      	bcs.n	8007276 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800726e:	4b17      	ldr	r3, [pc, #92]	; (80072cc <pvPortMalloc+0x1b0>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a18      	ldr	r2, [pc, #96]	; (80072d4 <pvPortMalloc+0x1b8>)
 8007274:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007278:	685a      	ldr	r2, [r3, #4]
 800727a:	4b13      	ldr	r3, [pc, #76]	; (80072c8 <pvPortMalloc+0x1ac>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	431a      	orrs	r2, r3
 8007280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007282:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8007284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007286:	2200      	movs	r2, #0
 8007288:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800728a:	4b13      	ldr	r3, [pc, #76]	; (80072d8 <pvPortMalloc+0x1bc>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	3301      	adds	r3, #1
 8007290:	4a11      	ldr	r2, [pc, #68]	; (80072d8 <pvPortMalloc+0x1bc>)
 8007292:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007294:	f7fe fa92 	bl	80057bc <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	f003 0307 	and.w	r3, r3, #7
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00a      	beq.n	80072b8 <pvPortMalloc+0x19c>
        __asm volatile
 80072a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a6:	f383 8811 	msr	BASEPRI, r3
 80072aa:	f3bf 8f6f 	isb	sy
 80072ae:	f3bf 8f4f 	dsb	sy
 80072b2:	60fb      	str	r3, [r7, #12]
    }
 80072b4:	bf00      	nop
 80072b6:	e7fe      	b.n	80072b6 <pvPortMalloc+0x19a>
    return pvReturn;
 80072b8:	69fb      	ldr	r3, [r7, #28]
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3728      	adds	r7, #40	; 0x28
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	20012f60 	.word	0x20012f60
 80072c8:	20012f74 	.word	0x20012f74
 80072cc:	20012f64 	.word	0x20012f64
 80072d0:	20012f58 	.word	0x20012f58
 80072d4:	20012f68 	.word	0x20012f68
 80072d8:	20012f6c 	.word	0x20012f6c

080072dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b086      	sub	sp, #24
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d04d      	beq.n	800738a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80072ee:	2308      	movs	r3, #8
 80072f0:	425b      	negs	r3, r3
 80072f2:	697a      	ldr	r2, [r7, #20]
 80072f4:	4413      	add	r3, r2
 80072f6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	685a      	ldr	r2, [r3, #4]
 8007300:	4b24      	ldr	r3, [pc, #144]	; (8007394 <vPortFree+0xb8>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4013      	ands	r3, r2
 8007306:	2b00      	cmp	r3, #0
 8007308:	d10a      	bne.n	8007320 <vPortFree+0x44>
        __asm volatile
 800730a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730e:	f383 8811 	msr	BASEPRI, r3
 8007312:	f3bf 8f6f 	isb	sy
 8007316:	f3bf 8f4f 	dsb	sy
 800731a:	60fb      	str	r3, [r7, #12]
    }
 800731c:	bf00      	nop
 800731e:	e7fe      	b.n	800731e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d00a      	beq.n	800733e <vPortFree+0x62>
        __asm volatile
 8007328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732c:	f383 8811 	msr	BASEPRI, r3
 8007330:	f3bf 8f6f 	isb	sy
 8007334:	f3bf 8f4f 	dsb	sy
 8007338:	60bb      	str	r3, [r7, #8]
    }
 800733a:	bf00      	nop
 800733c:	e7fe      	b.n	800733c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	4b14      	ldr	r3, [pc, #80]	; (8007394 <vPortFree+0xb8>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4013      	ands	r3, r2
 8007348:	2b00      	cmp	r3, #0
 800734a:	d01e      	beq.n	800738a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d11a      	bne.n	800738a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	685a      	ldr	r2, [r3, #4]
 8007358:	4b0e      	ldr	r3, [pc, #56]	; (8007394 <vPortFree+0xb8>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	43db      	mvns	r3, r3
 800735e:	401a      	ands	r2, r3
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8007364:	f7fe fa1c 	bl	80057a0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	685a      	ldr	r2, [r3, #4]
 800736c:	4b0a      	ldr	r3, [pc, #40]	; (8007398 <vPortFree+0xbc>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4413      	add	r3, r2
 8007372:	4a09      	ldr	r2, [pc, #36]	; (8007398 <vPortFree+0xbc>)
 8007374:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007376:	6938      	ldr	r0, [r7, #16]
 8007378:	f000 f874 	bl	8007464 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800737c:	4b07      	ldr	r3, [pc, #28]	; (800739c <vPortFree+0xc0>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	3301      	adds	r3, #1
 8007382:	4a06      	ldr	r2, [pc, #24]	; (800739c <vPortFree+0xc0>)
 8007384:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8007386:	f7fe fa19 	bl	80057bc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800738a:	bf00      	nop
 800738c:	3718      	adds	r7, #24
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	20012f74 	.word	0x20012f74
 8007398:	20012f64 	.word	0x20012f64
 800739c:	20012f70 	.word	0x20012f70

080073a0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80073a6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80073aa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80073ac:	4b27      	ldr	r3, [pc, #156]	; (800744c <prvHeapInit+0xac>)
 80073ae:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f003 0307 	and.w	r3, r3, #7
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00c      	beq.n	80073d4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	3307      	adds	r3, #7
 80073be:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f023 0307 	bic.w	r3, r3, #7
 80073c6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80073c8:	68ba      	ldr	r2, [r7, #8]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	4a1f      	ldr	r2, [pc, #124]	; (800744c <prvHeapInit+0xac>)
 80073d0:	4413      	add	r3, r2
 80073d2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80073d8:	4a1d      	ldr	r2, [pc, #116]	; (8007450 <prvHeapInit+0xb0>)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80073de:	4b1c      	ldr	r3, [pc, #112]	; (8007450 <prvHeapInit+0xb0>)
 80073e0:	2200      	movs	r2, #0
 80073e2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	68ba      	ldr	r2, [r7, #8]
 80073e8:	4413      	add	r3, r2
 80073ea:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80073ec:	2208      	movs	r2, #8
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	1a9b      	subs	r3, r3, r2
 80073f2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f023 0307 	bic.w	r3, r3, #7
 80073fa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	4a15      	ldr	r2, [pc, #84]	; (8007454 <prvHeapInit+0xb4>)
 8007400:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8007402:	4b14      	ldr	r3, [pc, #80]	; (8007454 <prvHeapInit+0xb4>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2200      	movs	r2, #0
 8007408:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800740a:	4b12      	ldr	r3, [pc, #72]	; (8007454 <prvHeapInit+0xb4>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2200      	movs	r2, #0
 8007410:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	1ad2      	subs	r2, r2, r3
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007420:	4b0c      	ldr	r3, [pc, #48]	; (8007454 <prvHeapInit+0xb4>)
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	4a0a      	ldr	r2, [pc, #40]	; (8007458 <prvHeapInit+0xb8>)
 800742e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	4a09      	ldr	r2, [pc, #36]	; (800745c <prvHeapInit+0xbc>)
 8007436:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007438:	4b09      	ldr	r3, [pc, #36]	; (8007460 <prvHeapInit+0xc0>)
 800743a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800743e:	601a      	str	r2, [r3, #0]
}
 8007440:	bf00      	nop
 8007442:	3714      	adds	r7, #20
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr
 800744c:	20000358 	.word	0x20000358
 8007450:	20012f58 	.word	0x20012f58
 8007454:	20012f60 	.word	0x20012f60
 8007458:	20012f68 	.word	0x20012f68
 800745c:	20012f64 	.word	0x20012f64
 8007460:	20012f74 	.word	0x20012f74

08007464 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800746c:	4b28      	ldr	r3, [pc, #160]	; (8007510 <prvInsertBlockIntoFreeList+0xac>)
 800746e:	60fb      	str	r3, [r7, #12]
 8007470:	e002      	b.n	8007478 <prvInsertBlockIntoFreeList+0x14>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	60fb      	str	r3, [r7, #12]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	429a      	cmp	r2, r3
 8007480:	d8f7      	bhi.n	8007472 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	68ba      	ldr	r2, [r7, #8]
 800748c:	4413      	add	r3, r2
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	429a      	cmp	r2, r3
 8007492:	d108      	bne.n	80074a6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	685a      	ldr	r2, [r3, #4]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	441a      	add	r2, r3
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	68ba      	ldr	r2, [r7, #8]
 80074b0:	441a      	add	r2, r3
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d118      	bne.n	80074ec <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	4b15      	ldr	r3, [pc, #84]	; (8007514 <prvInsertBlockIntoFreeList+0xb0>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d00d      	beq.n	80074e2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	685a      	ldr	r2, [r3, #4]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	441a      	add	r2, r3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	601a      	str	r2, [r3, #0]
 80074e0:	e008      	b.n	80074f4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80074e2:	4b0c      	ldr	r3, [pc, #48]	; (8007514 <prvInsertBlockIntoFreeList+0xb0>)
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	601a      	str	r2, [r3, #0]
 80074ea:	e003      	b.n	80074f4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d002      	beq.n	8007502 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007502:	bf00      	nop
 8007504:	3714      	adds	r7, #20
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr
 800750e:	bf00      	nop
 8007510:	20012f58 	.word	0x20012f58
 8007514:	20012f60 	.word	0x20012f60

08007518 <std>:
 8007518:	2300      	movs	r3, #0
 800751a:	b510      	push	{r4, lr}
 800751c:	4604      	mov	r4, r0
 800751e:	e9c0 3300 	strd	r3, r3, [r0]
 8007522:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007526:	6083      	str	r3, [r0, #8]
 8007528:	8181      	strh	r1, [r0, #12]
 800752a:	6643      	str	r3, [r0, #100]	; 0x64
 800752c:	81c2      	strh	r2, [r0, #14]
 800752e:	6183      	str	r3, [r0, #24]
 8007530:	4619      	mov	r1, r3
 8007532:	2208      	movs	r2, #8
 8007534:	305c      	adds	r0, #92	; 0x5c
 8007536:	f000 f926 	bl	8007786 <memset>
 800753a:	4b0d      	ldr	r3, [pc, #52]	; (8007570 <std+0x58>)
 800753c:	6263      	str	r3, [r4, #36]	; 0x24
 800753e:	4b0d      	ldr	r3, [pc, #52]	; (8007574 <std+0x5c>)
 8007540:	62a3      	str	r3, [r4, #40]	; 0x28
 8007542:	4b0d      	ldr	r3, [pc, #52]	; (8007578 <std+0x60>)
 8007544:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007546:	4b0d      	ldr	r3, [pc, #52]	; (800757c <std+0x64>)
 8007548:	6323      	str	r3, [r4, #48]	; 0x30
 800754a:	4b0d      	ldr	r3, [pc, #52]	; (8007580 <std+0x68>)
 800754c:	6224      	str	r4, [r4, #32]
 800754e:	429c      	cmp	r4, r3
 8007550:	d006      	beq.n	8007560 <std+0x48>
 8007552:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007556:	4294      	cmp	r4, r2
 8007558:	d002      	beq.n	8007560 <std+0x48>
 800755a:	33d0      	adds	r3, #208	; 0xd0
 800755c:	429c      	cmp	r4, r3
 800755e:	d105      	bne.n	800756c <std+0x54>
 8007560:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007568:	f000 b986 	b.w	8007878 <__retarget_lock_init_recursive>
 800756c:	bd10      	pop	{r4, pc}
 800756e:	bf00      	nop
 8007570:	08007701 	.word	0x08007701
 8007574:	08007723 	.word	0x08007723
 8007578:	0800775b 	.word	0x0800775b
 800757c:	0800777f 	.word	0x0800777f
 8007580:	20012f78 	.word	0x20012f78

08007584 <stdio_exit_handler>:
 8007584:	4a02      	ldr	r2, [pc, #8]	; (8007590 <stdio_exit_handler+0xc>)
 8007586:	4903      	ldr	r1, [pc, #12]	; (8007594 <stdio_exit_handler+0x10>)
 8007588:	4803      	ldr	r0, [pc, #12]	; (8007598 <stdio_exit_handler+0x14>)
 800758a:	f000 b869 	b.w	8007660 <_fwalk_sglue>
 800758e:	bf00      	nop
 8007590:	20000024 	.word	0x20000024
 8007594:	080083f1 	.word	0x080083f1
 8007598:	20000030 	.word	0x20000030

0800759c <cleanup_stdio>:
 800759c:	6841      	ldr	r1, [r0, #4]
 800759e:	4b0c      	ldr	r3, [pc, #48]	; (80075d0 <cleanup_stdio+0x34>)
 80075a0:	4299      	cmp	r1, r3
 80075a2:	b510      	push	{r4, lr}
 80075a4:	4604      	mov	r4, r0
 80075a6:	d001      	beq.n	80075ac <cleanup_stdio+0x10>
 80075a8:	f000 ff22 	bl	80083f0 <_fflush_r>
 80075ac:	68a1      	ldr	r1, [r4, #8]
 80075ae:	4b09      	ldr	r3, [pc, #36]	; (80075d4 <cleanup_stdio+0x38>)
 80075b0:	4299      	cmp	r1, r3
 80075b2:	d002      	beq.n	80075ba <cleanup_stdio+0x1e>
 80075b4:	4620      	mov	r0, r4
 80075b6:	f000 ff1b 	bl	80083f0 <_fflush_r>
 80075ba:	68e1      	ldr	r1, [r4, #12]
 80075bc:	4b06      	ldr	r3, [pc, #24]	; (80075d8 <cleanup_stdio+0x3c>)
 80075be:	4299      	cmp	r1, r3
 80075c0:	d004      	beq.n	80075cc <cleanup_stdio+0x30>
 80075c2:	4620      	mov	r0, r4
 80075c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075c8:	f000 bf12 	b.w	80083f0 <_fflush_r>
 80075cc:	bd10      	pop	{r4, pc}
 80075ce:	bf00      	nop
 80075d0:	20012f78 	.word	0x20012f78
 80075d4:	20012fe0 	.word	0x20012fe0
 80075d8:	20013048 	.word	0x20013048

080075dc <global_stdio_init.part.0>:
 80075dc:	b510      	push	{r4, lr}
 80075de:	4b0b      	ldr	r3, [pc, #44]	; (800760c <global_stdio_init.part.0+0x30>)
 80075e0:	4c0b      	ldr	r4, [pc, #44]	; (8007610 <global_stdio_init.part.0+0x34>)
 80075e2:	4a0c      	ldr	r2, [pc, #48]	; (8007614 <global_stdio_init.part.0+0x38>)
 80075e4:	601a      	str	r2, [r3, #0]
 80075e6:	4620      	mov	r0, r4
 80075e8:	2200      	movs	r2, #0
 80075ea:	2104      	movs	r1, #4
 80075ec:	f7ff ff94 	bl	8007518 <std>
 80075f0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80075f4:	2201      	movs	r2, #1
 80075f6:	2109      	movs	r1, #9
 80075f8:	f7ff ff8e 	bl	8007518 <std>
 80075fc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007600:	2202      	movs	r2, #2
 8007602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007606:	2112      	movs	r1, #18
 8007608:	f7ff bf86 	b.w	8007518 <std>
 800760c:	200130b0 	.word	0x200130b0
 8007610:	20012f78 	.word	0x20012f78
 8007614:	08007585 	.word	0x08007585

08007618 <__sfp_lock_acquire>:
 8007618:	4801      	ldr	r0, [pc, #4]	; (8007620 <__sfp_lock_acquire+0x8>)
 800761a:	f000 b92e 	b.w	800787a <__retarget_lock_acquire_recursive>
 800761e:	bf00      	nop
 8007620:	200130b9 	.word	0x200130b9

08007624 <__sfp_lock_release>:
 8007624:	4801      	ldr	r0, [pc, #4]	; (800762c <__sfp_lock_release+0x8>)
 8007626:	f000 b929 	b.w	800787c <__retarget_lock_release_recursive>
 800762a:	bf00      	nop
 800762c:	200130b9 	.word	0x200130b9

08007630 <__sinit>:
 8007630:	b510      	push	{r4, lr}
 8007632:	4604      	mov	r4, r0
 8007634:	f7ff fff0 	bl	8007618 <__sfp_lock_acquire>
 8007638:	6a23      	ldr	r3, [r4, #32]
 800763a:	b11b      	cbz	r3, 8007644 <__sinit+0x14>
 800763c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007640:	f7ff bff0 	b.w	8007624 <__sfp_lock_release>
 8007644:	4b04      	ldr	r3, [pc, #16]	; (8007658 <__sinit+0x28>)
 8007646:	6223      	str	r3, [r4, #32]
 8007648:	4b04      	ldr	r3, [pc, #16]	; (800765c <__sinit+0x2c>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1f5      	bne.n	800763c <__sinit+0xc>
 8007650:	f7ff ffc4 	bl	80075dc <global_stdio_init.part.0>
 8007654:	e7f2      	b.n	800763c <__sinit+0xc>
 8007656:	bf00      	nop
 8007658:	0800759d 	.word	0x0800759d
 800765c:	200130b0 	.word	0x200130b0

08007660 <_fwalk_sglue>:
 8007660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007664:	4607      	mov	r7, r0
 8007666:	4688      	mov	r8, r1
 8007668:	4614      	mov	r4, r2
 800766a:	2600      	movs	r6, #0
 800766c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007670:	f1b9 0901 	subs.w	r9, r9, #1
 8007674:	d505      	bpl.n	8007682 <_fwalk_sglue+0x22>
 8007676:	6824      	ldr	r4, [r4, #0]
 8007678:	2c00      	cmp	r4, #0
 800767a:	d1f7      	bne.n	800766c <_fwalk_sglue+0xc>
 800767c:	4630      	mov	r0, r6
 800767e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007682:	89ab      	ldrh	r3, [r5, #12]
 8007684:	2b01      	cmp	r3, #1
 8007686:	d907      	bls.n	8007698 <_fwalk_sglue+0x38>
 8007688:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800768c:	3301      	adds	r3, #1
 800768e:	d003      	beq.n	8007698 <_fwalk_sglue+0x38>
 8007690:	4629      	mov	r1, r5
 8007692:	4638      	mov	r0, r7
 8007694:	47c0      	blx	r8
 8007696:	4306      	orrs	r6, r0
 8007698:	3568      	adds	r5, #104	; 0x68
 800769a:	e7e9      	b.n	8007670 <_fwalk_sglue+0x10>

0800769c <iprintf>:
 800769c:	b40f      	push	{r0, r1, r2, r3}
 800769e:	b507      	push	{r0, r1, r2, lr}
 80076a0:	4906      	ldr	r1, [pc, #24]	; (80076bc <iprintf+0x20>)
 80076a2:	ab04      	add	r3, sp, #16
 80076a4:	6808      	ldr	r0, [r1, #0]
 80076a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80076aa:	6881      	ldr	r1, [r0, #8]
 80076ac:	9301      	str	r3, [sp, #4]
 80076ae:	f000 fb6f 	bl	8007d90 <_vfiprintf_r>
 80076b2:	b003      	add	sp, #12
 80076b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80076b8:	b004      	add	sp, #16
 80076ba:	4770      	bx	lr
 80076bc:	2000007c 	.word	0x2000007c

080076c0 <siprintf>:
 80076c0:	b40e      	push	{r1, r2, r3}
 80076c2:	b500      	push	{lr}
 80076c4:	b09c      	sub	sp, #112	; 0x70
 80076c6:	ab1d      	add	r3, sp, #116	; 0x74
 80076c8:	9002      	str	r0, [sp, #8]
 80076ca:	9006      	str	r0, [sp, #24]
 80076cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80076d0:	4809      	ldr	r0, [pc, #36]	; (80076f8 <siprintf+0x38>)
 80076d2:	9107      	str	r1, [sp, #28]
 80076d4:	9104      	str	r1, [sp, #16]
 80076d6:	4909      	ldr	r1, [pc, #36]	; (80076fc <siprintf+0x3c>)
 80076d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80076dc:	9105      	str	r1, [sp, #20]
 80076de:	6800      	ldr	r0, [r0, #0]
 80076e0:	9301      	str	r3, [sp, #4]
 80076e2:	a902      	add	r1, sp, #8
 80076e4:	f000 fa2c 	bl	8007b40 <_svfiprintf_r>
 80076e8:	9b02      	ldr	r3, [sp, #8]
 80076ea:	2200      	movs	r2, #0
 80076ec:	701a      	strb	r2, [r3, #0]
 80076ee:	b01c      	add	sp, #112	; 0x70
 80076f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80076f4:	b003      	add	sp, #12
 80076f6:	4770      	bx	lr
 80076f8:	2000007c 	.word	0x2000007c
 80076fc:	ffff0208 	.word	0xffff0208

08007700 <__sread>:
 8007700:	b510      	push	{r4, lr}
 8007702:	460c      	mov	r4, r1
 8007704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007708:	f000 f868 	bl	80077dc <_read_r>
 800770c:	2800      	cmp	r0, #0
 800770e:	bfab      	itete	ge
 8007710:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007712:	89a3      	ldrhlt	r3, [r4, #12]
 8007714:	181b      	addge	r3, r3, r0
 8007716:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800771a:	bfac      	ite	ge
 800771c:	6563      	strge	r3, [r4, #84]	; 0x54
 800771e:	81a3      	strhlt	r3, [r4, #12]
 8007720:	bd10      	pop	{r4, pc}

08007722 <__swrite>:
 8007722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007726:	461f      	mov	r7, r3
 8007728:	898b      	ldrh	r3, [r1, #12]
 800772a:	05db      	lsls	r3, r3, #23
 800772c:	4605      	mov	r5, r0
 800772e:	460c      	mov	r4, r1
 8007730:	4616      	mov	r6, r2
 8007732:	d505      	bpl.n	8007740 <__swrite+0x1e>
 8007734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007738:	2302      	movs	r3, #2
 800773a:	2200      	movs	r2, #0
 800773c:	f000 f83c 	bl	80077b8 <_lseek_r>
 8007740:	89a3      	ldrh	r3, [r4, #12]
 8007742:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007746:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800774a:	81a3      	strh	r3, [r4, #12]
 800774c:	4632      	mov	r2, r6
 800774e:	463b      	mov	r3, r7
 8007750:	4628      	mov	r0, r5
 8007752:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007756:	f000 b853 	b.w	8007800 <_write_r>

0800775a <__sseek>:
 800775a:	b510      	push	{r4, lr}
 800775c:	460c      	mov	r4, r1
 800775e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007762:	f000 f829 	bl	80077b8 <_lseek_r>
 8007766:	1c43      	adds	r3, r0, #1
 8007768:	89a3      	ldrh	r3, [r4, #12]
 800776a:	bf15      	itete	ne
 800776c:	6560      	strne	r0, [r4, #84]	; 0x54
 800776e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007772:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007776:	81a3      	strheq	r3, [r4, #12]
 8007778:	bf18      	it	ne
 800777a:	81a3      	strhne	r3, [r4, #12]
 800777c:	bd10      	pop	{r4, pc}

0800777e <__sclose>:
 800777e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007782:	f000 b809 	b.w	8007798 <_close_r>

08007786 <memset>:
 8007786:	4402      	add	r2, r0
 8007788:	4603      	mov	r3, r0
 800778a:	4293      	cmp	r3, r2
 800778c:	d100      	bne.n	8007790 <memset+0xa>
 800778e:	4770      	bx	lr
 8007790:	f803 1b01 	strb.w	r1, [r3], #1
 8007794:	e7f9      	b.n	800778a <memset+0x4>
	...

08007798 <_close_r>:
 8007798:	b538      	push	{r3, r4, r5, lr}
 800779a:	4d06      	ldr	r5, [pc, #24]	; (80077b4 <_close_r+0x1c>)
 800779c:	2300      	movs	r3, #0
 800779e:	4604      	mov	r4, r0
 80077a0:	4608      	mov	r0, r1
 80077a2:	602b      	str	r3, [r5, #0]
 80077a4:	f7f9 fcc7 	bl	8001136 <_close>
 80077a8:	1c43      	adds	r3, r0, #1
 80077aa:	d102      	bne.n	80077b2 <_close_r+0x1a>
 80077ac:	682b      	ldr	r3, [r5, #0]
 80077ae:	b103      	cbz	r3, 80077b2 <_close_r+0x1a>
 80077b0:	6023      	str	r3, [r4, #0]
 80077b2:	bd38      	pop	{r3, r4, r5, pc}
 80077b4:	200130b4 	.word	0x200130b4

080077b8 <_lseek_r>:
 80077b8:	b538      	push	{r3, r4, r5, lr}
 80077ba:	4d07      	ldr	r5, [pc, #28]	; (80077d8 <_lseek_r+0x20>)
 80077bc:	4604      	mov	r4, r0
 80077be:	4608      	mov	r0, r1
 80077c0:	4611      	mov	r1, r2
 80077c2:	2200      	movs	r2, #0
 80077c4:	602a      	str	r2, [r5, #0]
 80077c6:	461a      	mov	r2, r3
 80077c8:	f7f9 fcdc 	bl	8001184 <_lseek>
 80077cc:	1c43      	adds	r3, r0, #1
 80077ce:	d102      	bne.n	80077d6 <_lseek_r+0x1e>
 80077d0:	682b      	ldr	r3, [r5, #0]
 80077d2:	b103      	cbz	r3, 80077d6 <_lseek_r+0x1e>
 80077d4:	6023      	str	r3, [r4, #0]
 80077d6:	bd38      	pop	{r3, r4, r5, pc}
 80077d8:	200130b4 	.word	0x200130b4

080077dc <_read_r>:
 80077dc:	b538      	push	{r3, r4, r5, lr}
 80077de:	4d07      	ldr	r5, [pc, #28]	; (80077fc <_read_r+0x20>)
 80077e0:	4604      	mov	r4, r0
 80077e2:	4608      	mov	r0, r1
 80077e4:	4611      	mov	r1, r2
 80077e6:	2200      	movs	r2, #0
 80077e8:	602a      	str	r2, [r5, #0]
 80077ea:	461a      	mov	r2, r3
 80077ec:	f7f9 fc6a 	bl	80010c4 <_read>
 80077f0:	1c43      	adds	r3, r0, #1
 80077f2:	d102      	bne.n	80077fa <_read_r+0x1e>
 80077f4:	682b      	ldr	r3, [r5, #0]
 80077f6:	b103      	cbz	r3, 80077fa <_read_r+0x1e>
 80077f8:	6023      	str	r3, [r4, #0]
 80077fa:	bd38      	pop	{r3, r4, r5, pc}
 80077fc:	200130b4 	.word	0x200130b4

08007800 <_write_r>:
 8007800:	b538      	push	{r3, r4, r5, lr}
 8007802:	4d07      	ldr	r5, [pc, #28]	; (8007820 <_write_r+0x20>)
 8007804:	4604      	mov	r4, r0
 8007806:	4608      	mov	r0, r1
 8007808:	4611      	mov	r1, r2
 800780a:	2200      	movs	r2, #0
 800780c:	602a      	str	r2, [r5, #0]
 800780e:	461a      	mov	r2, r3
 8007810:	f7f9 fc75 	bl	80010fe <_write>
 8007814:	1c43      	adds	r3, r0, #1
 8007816:	d102      	bne.n	800781e <_write_r+0x1e>
 8007818:	682b      	ldr	r3, [r5, #0]
 800781a:	b103      	cbz	r3, 800781e <_write_r+0x1e>
 800781c:	6023      	str	r3, [r4, #0]
 800781e:	bd38      	pop	{r3, r4, r5, pc}
 8007820:	200130b4 	.word	0x200130b4

08007824 <__errno>:
 8007824:	4b01      	ldr	r3, [pc, #4]	; (800782c <__errno+0x8>)
 8007826:	6818      	ldr	r0, [r3, #0]
 8007828:	4770      	bx	lr
 800782a:	bf00      	nop
 800782c:	2000007c 	.word	0x2000007c

08007830 <__libc_init_array>:
 8007830:	b570      	push	{r4, r5, r6, lr}
 8007832:	4d0d      	ldr	r5, [pc, #52]	; (8007868 <__libc_init_array+0x38>)
 8007834:	4c0d      	ldr	r4, [pc, #52]	; (800786c <__libc_init_array+0x3c>)
 8007836:	1b64      	subs	r4, r4, r5
 8007838:	10a4      	asrs	r4, r4, #2
 800783a:	2600      	movs	r6, #0
 800783c:	42a6      	cmp	r6, r4
 800783e:	d109      	bne.n	8007854 <__libc_init_array+0x24>
 8007840:	4d0b      	ldr	r5, [pc, #44]	; (8007870 <__libc_init_array+0x40>)
 8007842:	4c0c      	ldr	r4, [pc, #48]	; (8007874 <__libc_init_array+0x44>)
 8007844:	f000 ff78 	bl	8008738 <_init>
 8007848:	1b64      	subs	r4, r4, r5
 800784a:	10a4      	asrs	r4, r4, #2
 800784c:	2600      	movs	r6, #0
 800784e:	42a6      	cmp	r6, r4
 8007850:	d105      	bne.n	800785e <__libc_init_array+0x2e>
 8007852:	bd70      	pop	{r4, r5, r6, pc}
 8007854:	f855 3b04 	ldr.w	r3, [r5], #4
 8007858:	4798      	blx	r3
 800785a:	3601      	adds	r6, #1
 800785c:	e7ee      	b.n	800783c <__libc_init_array+0xc>
 800785e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007862:	4798      	blx	r3
 8007864:	3601      	adds	r6, #1
 8007866:	e7f2      	b.n	800784e <__libc_init_array+0x1e>
 8007868:	08008b64 	.word	0x08008b64
 800786c:	08008b64 	.word	0x08008b64
 8007870:	08008b64 	.word	0x08008b64
 8007874:	08008b68 	.word	0x08008b68

08007878 <__retarget_lock_init_recursive>:
 8007878:	4770      	bx	lr

0800787a <__retarget_lock_acquire_recursive>:
 800787a:	4770      	bx	lr

0800787c <__retarget_lock_release_recursive>:
 800787c:	4770      	bx	lr

0800787e <memcpy>:
 800787e:	440a      	add	r2, r1
 8007880:	4291      	cmp	r1, r2
 8007882:	f100 33ff 	add.w	r3, r0, #4294967295
 8007886:	d100      	bne.n	800788a <memcpy+0xc>
 8007888:	4770      	bx	lr
 800788a:	b510      	push	{r4, lr}
 800788c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007890:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007894:	4291      	cmp	r1, r2
 8007896:	d1f9      	bne.n	800788c <memcpy+0xe>
 8007898:	bd10      	pop	{r4, pc}
	...

0800789c <_free_r>:
 800789c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800789e:	2900      	cmp	r1, #0
 80078a0:	d044      	beq.n	800792c <_free_r+0x90>
 80078a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078a6:	9001      	str	r0, [sp, #4]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	f1a1 0404 	sub.w	r4, r1, #4
 80078ae:	bfb8      	it	lt
 80078b0:	18e4      	addlt	r4, r4, r3
 80078b2:	f000 f8df 	bl	8007a74 <__malloc_lock>
 80078b6:	4a1e      	ldr	r2, [pc, #120]	; (8007930 <_free_r+0x94>)
 80078b8:	9801      	ldr	r0, [sp, #4]
 80078ba:	6813      	ldr	r3, [r2, #0]
 80078bc:	b933      	cbnz	r3, 80078cc <_free_r+0x30>
 80078be:	6063      	str	r3, [r4, #4]
 80078c0:	6014      	str	r4, [r2, #0]
 80078c2:	b003      	add	sp, #12
 80078c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078c8:	f000 b8da 	b.w	8007a80 <__malloc_unlock>
 80078cc:	42a3      	cmp	r3, r4
 80078ce:	d908      	bls.n	80078e2 <_free_r+0x46>
 80078d0:	6825      	ldr	r5, [r4, #0]
 80078d2:	1961      	adds	r1, r4, r5
 80078d4:	428b      	cmp	r3, r1
 80078d6:	bf01      	itttt	eq
 80078d8:	6819      	ldreq	r1, [r3, #0]
 80078da:	685b      	ldreq	r3, [r3, #4]
 80078dc:	1949      	addeq	r1, r1, r5
 80078de:	6021      	streq	r1, [r4, #0]
 80078e0:	e7ed      	b.n	80078be <_free_r+0x22>
 80078e2:	461a      	mov	r2, r3
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	b10b      	cbz	r3, 80078ec <_free_r+0x50>
 80078e8:	42a3      	cmp	r3, r4
 80078ea:	d9fa      	bls.n	80078e2 <_free_r+0x46>
 80078ec:	6811      	ldr	r1, [r2, #0]
 80078ee:	1855      	adds	r5, r2, r1
 80078f0:	42a5      	cmp	r5, r4
 80078f2:	d10b      	bne.n	800790c <_free_r+0x70>
 80078f4:	6824      	ldr	r4, [r4, #0]
 80078f6:	4421      	add	r1, r4
 80078f8:	1854      	adds	r4, r2, r1
 80078fa:	42a3      	cmp	r3, r4
 80078fc:	6011      	str	r1, [r2, #0]
 80078fe:	d1e0      	bne.n	80078c2 <_free_r+0x26>
 8007900:	681c      	ldr	r4, [r3, #0]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	6053      	str	r3, [r2, #4]
 8007906:	440c      	add	r4, r1
 8007908:	6014      	str	r4, [r2, #0]
 800790a:	e7da      	b.n	80078c2 <_free_r+0x26>
 800790c:	d902      	bls.n	8007914 <_free_r+0x78>
 800790e:	230c      	movs	r3, #12
 8007910:	6003      	str	r3, [r0, #0]
 8007912:	e7d6      	b.n	80078c2 <_free_r+0x26>
 8007914:	6825      	ldr	r5, [r4, #0]
 8007916:	1961      	adds	r1, r4, r5
 8007918:	428b      	cmp	r3, r1
 800791a:	bf04      	itt	eq
 800791c:	6819      	ldreq	r1, [r3, #0]
 800791e:	685b      	ldreq	r3, [r3, #4]
 8007920:	6063      	str	r3, [r4, #4]
 8007922:	bf04      	itt	eq
 8007924:	1949      	addeq	r1, r1, r5
 8007926:	6021      	streq	r1, [r4, #0]
 8007928:	6054      	str	r4, [r2, #4]
 800792a:	e7ca      	b.n	80078c2 <_free_r+0x26>
 800792c:	b003      	add	sp, #12
 800792e:	bd30      	pop	{r4, r5, pc}
 8007930:	200130bc 	.word	0x200130bc

08007934 <sbrk_aligned>:
 8007934:	b570      	push	{r4, r5, r6, lr}
 8007936:	4e0e      	ldr	r6, [pc, #56]	; (8007970 <sbrk_aligned+0x3c>)
 8007938:	460c      	mov	r4, r1
 800793a:	6831      	ldr	r1, [r6, #0]
 800793c:	4605      	mov	r5, r0
 800793e:	b911      	cbnz	r1, 8007946 <sbrk_aligned+0x12>
 8007940:	f000 fe2e 	bl	80085a0 <_sbrk_r>
 8007944:	6030      	str	r0, [r6, #0]
 8007946:	4621      	mov	r1, r4
 8007948:	4628      	mov	r0, r5
 800794a:	f000 fe29 	bl	80085a0 <_sbrk_r>
 800794e:	1c43      	adds	r3, r0, #1
 8007950:	d00a      	beq.n	8007968 <sbrk_aligned+0x34>
 8007952:	1cc4      	adds	r4, r0, #3
 8007954:	f024 0403 	bic.w	r4, r4, #3
 8007958:	42a0      	cmp	r0, r4
 800795a:	d007      	beq.n	800796c <sbrk_aligned+0x38>
 800795c:	1a21      	subs	r1, r4, r0
 800795e:	4628      	mov	r0, r5
 8007960:	f000 fe1e 	bl	80085a0 <_sbrk_r>
 8007964:	3001      	adds	r0, #1
 8007966:	d101      	bne.n	800796c <sbrk_aligned+0x38>
 8007968:	f04f 34ff 	mov.w	r4, #4294967295
 800796c:	4620      	mov	r0, r4
 800796e:	bd70      	pop	{r4, r5, r6, pc}
 8007970:	200130c0 	.word	0x200130c0

08007974 <_malloc_r>:
 8007974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007978:	1ccd      	adds	r5, r1, #3
 800797a:	f025 0503 	bic.w	r5, r5, #3
 800797e:	3508      	adds	r5, #8
 8007980:	2d0c      	cmp	r5, #12
 8007982:	bf38      	it	cc
 8007984:	250c      	movcc	r5, #12
 8007986:	2d00      	cmp	r5, #0
 8007988:	4607      	mov	r7, r0
 800798a:	db01      	blt.n	8007990 <_malloc_r+0x1c>
 800798c:	42a9      	cmp	r1, r5
 800798e:	d905      	bls.n	800799c <_malloc_r+0x28>
 8007990:	230c      	movs	r3, #12
 8007992:	603b      	str	r3, [r7, #0]
 8007994:	2600      	movs	r6, #0
 8007996:	4630      	mov	r0, r6
 8007998:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800799c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007a70 <_malloc_r+0xfc>
 80079a0:	f000 f868 	bl	8007a74 <__malloc_lock>
 80079a4:	f8d8 3000 	ldr.w	r3, [r8]
 80079a8:	461c      	mov	r4, r3
 80079aa:	bb5c      	cbnz	r4, 8007a04 <_malloc_r+0x90>
 80079ac:	4629      	mov	r1, r5
 80079ae:	4638      	mov	r0, r7
 80079b0:	f7ff ffc0 	bl	8007934 <sbrk_aligned>
 80079b4:	1c43      	adds	r3, r0, #1
 80079b6:	4604      	mov	r4, r0
 80079b8:	d155      	bne.n	8007a66 <_malloc_r+0xf2>
 80079ba:	f8d8 4000 	ldr.w	r4, [r8]
 80079be:	4626      	mov	r6, r4
 80079c0:	2e00      	cmp	r6, #0
 80079c2:	d145      	bne.n	8007a50 <_malloc_r+0xdc>
 80079c4:	2c00      	cmp	r4, #0
 80079c6:	d048      	beq.n	8007a5a <_malloc_r+0xe6>
 80079c8:	6823      	ldr	r3, [r4, #0]
 80079ca:	4631      	mov	r1, r6
 80079cc:	4638      	mov	r0, r7
 80079ce:	eb04 0903 	add.w	r9, r4, r3
 80079d2:	f000 fde5 	bl	80085a0 <_sbrk_r>
 80079d6:	4581      	cmp	r9, r0
 80079d8:	d13f      	bne.n	8007a5a <_malloc_r+0xe6>
 80079da:	6821      	ldr	r1, [r4, #0]
 80079dc:	1a6d      	subs	r5, r5, r1
 80079de:	4629      	mov	r1, r5
 80079e0:	4638      	mov	r0, r7
 80079e2:	f7ff ffa7 	bl	8007934 <sbrk_aligned>
 80079e6:	3001      	adds	r0, #1
 80079e8:	d037      	beq.n	8007a5a <_malloc_r+0xe6>
 80079ea:	6823      	ldr	r3, [r4, #0]
 80079ec:	442b      	add	r3, r5
 80079ee:	6023      	str	r3, [r4, #0]
 80079f0:	f8d8 3000 	ldr.w	r3, [r8]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d038      	beq.n	8007a6a <_malloc_r+0xf6>
 80079f8:	685a      	ldr	r2, [r3, #4]
 80079fa:	42a2      	cmp	r2, r4
 80079fc:	d12b      	bne.n	8007a56 <_malloc_r+0xe2>
 80079fe:	2200      	movs	r2, #0
 8007a00:	605a      	str	r2, [r3, #4]
 8007a02:	e00f      	b.n	8007a24 <_malloc_r+0xb0>
 8007a04:	6822      	ldr	r2, [r4, #0]
 8007a06:	1b52      	subs	r2, r2, r5
 8007a08:	d41f      	bmi.n	8007a4a <_malloc_r+0xd6>
 8007a0a:	2a0b      	cmp	r2, #11
 8007a0c:	d917      	bls.n	8007a3e <_malloc_r+0xca>
 8007a0e:	1961      	adds	r1, r4, r5
 8007a10:	42a3      	cmp	r3, r4
 8007a12:	6025      	str	r5, [r4, #0]
 8007a14:	bf18      	it	ne
 8007a16:	6059      	strne	r1, [r3, #4]
 8007a18:	6863      	ldr	r3, [r4, #4]
 8007a1a:	bf08      	it	eq
 8007a1c:	f8c8 1000 	streq.w	r1, [r8]
 8007a20:	5162      	str	r2, [r4, r5]
 8007a22:	604b      	str	r3, [r1, #4]
 8007a24:	4638      	mov	r0, r7
 8007a26:	f104 060b 	add.w	r6, r4, #11
 8007a2a:	f000 f829 	bl	8007a80 <__malloc_unlock>
 8007a2e:	f026 0607 	bic.w	r6, r6, #7
 8007a32:	1d23      	adds	r3, r4, #4
 8007a34:	1af2      	subs	r2, r6, r3
 8007a36:	d0ae      	beq.n	8007996 <_malloc_r+0x22>
 8007a38:	1b9b      	subs	r3, r3, r6
 8007a3a:	50a3      	str	r3, [r4, r2]
 8007a3c:	e7ab      	b.n	8007996 <_malloc_r+0x22>
 8007a3e:	42a3      	cmp	r3, r4
 8007a40:	6862      	ldr	r2, [r4, #4]
 8007a42:	d1dd      	bne.n	8007a00 <_malloc_r+0x8c>
 8007a44:	f8c8 2000 	str.w	r2, [r8]
 8007a48:	e7ec      	b.n	8007a24 <_malloc_r+0xb0>
 8007a4a:	4623      	mov	r3, r4
 8007a4c:	6864      	ldr	r4, [r4, #4]
 8007a4e:	e7ac      	b.n	80079aa <_malloc_r+0x36>
 8007a50:	4634      	mov	r4, r6
 8007a52:	6876      	ldr	r6, [r6, #4]
 8007a54:	e7b4      	b.n	80079c0 <_malloc_r+0x4c>
 8007a56:	4613      	mov	r3, r2
 8007a58:	e7cc      	b.n	80079f4 <_malloc_r+0x80>
 8007a5a:	230c      	movs	r3, #12
 8007a5c:	603b      	str	r3, [r7, #0]
 8007a5e:	4638      	mov	r0, r7
 8007a60:	f000 f80e 	bl	8007a80 <__malloc_unlock>
 8007a64:	e797      	b.n	8007996 <_malloc_r+0x22>
 8007a66:	6025      	str	r5, [r4, #0]
 8007a68:	e7dc      	b.n	8007a24 <_malloc_r+0xb0>
 8007a6a:	605b      	str	r3, [r3, #4]
 8007a6c:	deff      	udf	#255	; 0xff
 8007a6e:	bf00      	nop
 8007a70:	200130bc 	.word	0x200130bc

08007a74 <__malloc_lock>:
 8007a74:	4801      	ldr	r0, [pc, #4]	; (8007a7c <__malloc_lock+0x8>)
 8007a76:	f7ff bf00 	b.w	800787a <__retarget_lock_acquire_recursive>
 8007a7a:	bf00      	nop
 8007a7c:	200130b8 	.word	0x200130b8

08007a80 <__malloc_unlock>:
 8007a80:	4801      	ldr	r0, [pc, #4]	; (8007a88 <__malloc_unlock+0x8>)
 8007a82:	f7ff befb 	b.w	800787c <__retarget_lock_release_recursive>
 8007a86:	bf00      	nop
 8007a88:	200130b8 	.word	0x200130b8

08007a8c <__ssputs_r>:
 8007a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a90:	688e      	ldr	r6, [r1, #8]
 8007a92:	461f      	mov	r7, r3
 8007a94:	42be      	cmp	r6, r7
 8007a96:	680b      	ldr	r3, [r1, #0]
 8007a98:	4682      	mov	sl, r0
 8007a9a:	460c      	mov	r4, r1
 8007a9c:	4690      	mov	r8, r2
 8007a9e:	d82c      	bhi.n	8007afa <__ssputs_r+0x6e>
 8007aa0:	898a      	ldrh	r2, [r1, #12]
 8007aa2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007aa6:	d026      	beq.n	8007af6 <__ssputs_r+0x6a>
 8007aa8:	6965      	ldr	r5, [r4, #20]
 8007aaa:	6909      	ldr	r1, [r1, #16]
 8007aac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ab0:	eba3 0901 	sub.w	r9, r3, r1
 8007ab4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ab8:	1c7b      	adds	r3, r7, #1
 8007aba:	444b      	add	r3, r9
 8007abc:	106d      	asrs	r5, r5, #1
 8007abe:	429d      	cmp	r5, r3
 8007ac0:	bf38      	it	cc
 8007ac2:	461d      	movcc	r5, r3
 8007ac4:	0553      	lsls	r3, r2, #21
 8007ac6:	d527      	bpl.n	8007b18 <__ssputs_r+0x8c>
 8007ac8:	4629      	mov	r1, r5
 8007aca:	f7ff ff53 	bl	8007974 <_malloc_r>
 8007ace:	4606      	mov	r6, r0
 8007ad0:	b360      	cbz	r0, 8007b2c <__ssputs_r+0xa0>
 8007ad2:	6921      	ldr	r1, [r4, #16]
 8007ad4:	464a      	mov	r2, r9
 8007ad6:	f7ff fed2 	bl	800787e <memcpy>
 8007ada:	89a3      	ldrh	r3, [r4, #12]
 8007adc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ae4:	81a3      	strh	r3, [r4, #12]
 8007ae6:	6126      	str	r6, [r4, #16]
 8007ae8:	6165      	str	r5, [r4, #20]
 8007aea:	444e      	add	r6, r9
 8007aec:	eba5 0509 	sub.w	r5, r5, r9
 8007af0:	6026      	str	r6, [r4, #0]
 8007af2:	60a5      	str	r5, [r4, #8]
 8007af4:	463e      	mov	r6, r7
 8007af6:	42be      	cmp	r6, r7
 8007af8:	d900      	bls.n	8007afc <__ssputs_r+0x70>
 8007afa:	463e      	mov	r6, r7
 8007afc:	6820      	ldr	r0, [r4, #0]
 8007afe:	4632      	mov	r2, r6
 8007b00:	4641      	mov	r1, r8
 8007b02:	f000 fd33 	bl	800856c <memmove>
 8007b06:	68a3      	ldr	r3, [r4, #8]
 8007b08:	1b9b      	subs	r3, r3, r6
 8007b0a:	60a3      	str	r3, [r4, #8]
 8007b0c:	6823      	ldr	r3, [r4, #0]
 8007b0e:	4433      	add	r3, r6
 8007b10:	6023      	str	r3, [r4, #0]
 8007b12:	2000      	movs	r0, #0
 8007b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b18:	462a      	mov	r2, r5
 8007b1a:	f000 fd51 	bl	80085c0 <_realloc_r>
 8007b1e:	4606      	mov	r6, r0
 8007b20:	2800      	cmp	r0, #0
 8007b22:	d1e0      	bne.n	8007ae6 <__ssputs_r+0x5a>
 8007b24:	6921      	ldr	r1, [r4, #16]
 8007b26:	4650      	mov	r0, sl
 8007b28:	f7ff feb8 	bl	800789c <_free_r>
 8007b2c:	230c      	movs	r3, #12
 8007b2e:	f8ca 3000 	str.w	r3, [sl]
 8007b32:	89a3      	ldrh	r3, [r4, #12]
 8007b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b38:	81a3      	strh	r3, [r4, #12]
 8007b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b3e:	e7e9      	b.n	8007b14 <__ssputs_r+0x88>

08007b40 <_svfiprintf_r>:
 8007b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b44:	4698      	mov	r8, r3
 8007b46:	898b      	ldrh	r3, [r1, #12]
 8007b48:	061b      	lsls	r3, r3, #24
 8007b4a:	b09d      	sub	sp, #116	; 0x74
 8007b4c:	4607      	mov	r7, r0
 8007b4e:	460d      	mov	r5, r1
 8007b50:	4614      	mov	r4, r2
 8007b52:	d50e      	bpl.n	8007b72 <_svfiprintf_r+0x32>
 8007b54:	690b      	ldr	r3, [r1, #16]
 8007b56:	b963      	cbnz	r3, 8007b72 <_svfiprintf_r+0x32>
 8007b58:	2140      	movs	r1, #64	; 0x40
 8007b5a:	f7ff ff0b 	bl	8007974 <_malloc_r>
 8007b5e:	6028      	str	r0, [r5, #0]
 8007b60:	6128      	str	r0, [r5, #16]
 8007b62:	b920      	cbnz	r0, 8007b6e <_svfiprintf_r+0x2e>
 8007b64:	230c      	movs	r3, #12
 8007b66:	603b      	str	r3, [r7, #0]
 8007b68:	f04f 30ff 	mov.w	r0, #4294967295
 8007b6c:	e0d0      	b.n	8007d10 <_svfiprintf_r+0x1d0>
 8007b6e:	2340      	movs	r3, #64	; 0x40
 8007b70:	616b      	str	r3, [r5, #20]
 8007b72:	2300      	movs	r3, #0
 8007b74:	9309      	str	r3, [sp, #36]	; 0x24
 8007b76:	2320      	movs	r3, #32
 8007b78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b80:	2330      	movs	r3, #48	; 0x30
 8007b82:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007d28 <_svfiprintf_r+0x1e8>
 8007b86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b8a:	f04f 0901 	mov.w	r9, #1
 8007b8e:	4623      	mov	r3, r4
 8007b90:	469a      	mov	sl, r3
 8007b92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b96:	b10a      	cbz	r2, 8007b9c <_svfiprintf_r+0x5c>
 8007b98:	2a25      	cmp	r2, #37	; 0x25
 8007b9a:	d1f9      	bne.n	8007b90 <_svfiprintf_r+0x50>
 8007b9c:	ebba 0b04 	subs.w	fp, sl, r4
 8007ba0:	d00b      	beq.n	8007bba <_svfiprintf_r+0x7a>
 8007ba2:	465b      	mov	r3, fp
 8007ba4:	4622      	mov	r2, r4
 8007ba6:	4629      	mov	r1, r5
 8007ba8:	4638      	mov	r0, r7
 8007baa:	f7ff ff6f 	bl	8007a8c <__ssputs_r>
 8007bae:	3001      	adds	r0, #1
 8007bb0:	f000 80a9 	beq.w	8007d06 <_svfiprintf_r+0x1c6>
 8007bb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bb6:	445a      	add	r2, fp
 8007bb8:	9209      	str	r2, [sp, #36]	; 0x24
 8007bba:	f89a 3000 	ldrb.w	r3, [sl]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	f000 80a1 	beq.w	8007d06 <_svfiprintf_r+0x1c6>
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8007bca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bce:	f10a 0a01 	add.w	sl, sl, #1
 8007bd2:	9304      	str	r3, [sp, #16]
 8007bd4:	9307      	str	r3, [sp, #28]
 8007bd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007bda:	931a      	str	r3, [sp, #104]	; 0x68
 8007bdc:	4654      	mov	r4, sl
 8007bde:	2205      	movs	r2, #5
 8007be0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007be4:	4850      	ldr	r0, [pc, #320]	; (8007d28 <_svfiprintf_r+0x1e8>)
 8007be6:	f7f8 fb13 	bl	8000210 <memchr>
 8007bea:	9a04      	ldr	r2, [sp, #16]
 8007bec:	b9d8      	cbnz	r0, 8007c26 <_svfiprintf_r+0xe6>
 8007bee:	06d0      	lsls	r0, r2, #27
 8007bf0:	bf44      	itt	mi
 8007bf2:	2320      	movmi	r3, #32
 8007bf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bf8:	0711      	lsls	r1, r2, #28
 8007bfa:	bf44      	itt	mi
 8007bfc:	232b      	movmi	r3, #43	; 0x2b
 8007bfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c02:	f89a 3000 	ldrb.w	r3, [sl]
 8007c06:	2b2a      	cmp	r3, #42	; 0x2a
 8007c08:	d015      	beq.n	8007c36 <_svfiprintf_r+0xf6>
 8007c0a:	9a07      	ldr	r2, [sp, #28]
 8007c0c:	4654      	mov	r4, sl
 8007c0e:	2000      	movs	r0, #0
 8007c10:	f04f 0c0a 	mov.w	ip, #10
 8007c14:	4621      	mov	r1, r4
 8007c16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c1a:	3b30      	subs	r3, #48	; 0x30
 8007c1c:	2b09      	cmp	r3, #9
 8007c1e:	d94d      	bls.n	8007cbc <_svfiprintf_r+0x17c>
 8007c20:	b1b0      	cbz	r0, 8007c50 <_svfiprintf_r+0x110>
 8007c22:	9207      	str	r2, [sp, #28]
 8007c24:	e014      	b.n	8007c50 <_svfiprintf_r+0x110>
 8007c26:	eba0 0308 	sub.w	r3, r0, r8
 8007c2a:	fa09 f303 	lsl.w	r3, r9, r3
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	9304      	str	r3, [sp, #16]
 8007c32:	46a2      	mov	sl, r4
 8007c34:	e7d2      	b.n	8007bdc <_svfiprintf_r+0x9c>
 8007c36:	9b03      	ldr	r3, [sp, #12]
 8007c38:	1d19      	adds	r1, r3, #4
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	9103      	str	r1, [sp, #12]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	bfbb      	ittet	lt
 8007c42:	425b      	neglt	r3, r3
 8007c44:	f042 0202 	orrlt.w	r2, r2, #2
 8007c48:	9307      	strge	r3, [sp, #28]
 8007c4a:	9307      	strlt	r3, [sp, #28]
 8007c4c:	bfb8      	it	lt
 8007c4e:	9204      	strlt	r2, [sp, #16]
 8007c50:	7823      	ldrb	r3, [r4, #0]
 8007c52:	2b2e      	cmp	r3, #46	; 0x2e
 8007c54:	d10c      	bne.n	8007c70 <_svfiprintf_r+0x130>
 8007c56:	7863      	ldrb	r3, [r4, #1]
 8007c58:	2b2a      	cmp	r3, #42	; 0x2a
 8007c5a:	d134      	bne.n	8007cc6 <_svfiprintf_r+0x186>
 8007c5c:	9b03      	ldr	r3, [sp, #12]
 8007c5e:	1d1a      	adds	r2, r3, #4
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	9203      	str	r2, [sp, #12]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	bfb8      	it	lt
 8007c68:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c6c:	3402      	adds	r4, #2
 8007c6e:	9305      	str	r3, [sp, #20]
 8007c70:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007d38 <_svfiprintf_r+0x1f8>
 8007c74:	7821      	ldrb	r1, [r4, #0]
 8007c76:	2203      	movs	r2, #3
 8007c78:	4650      	mov	r0, sl
 8007c7a:	f7f8 fac9 	bl	8000210 <memchr>
 8007c7e:	b138      	cbz	r0, 8007c90 <_svfiprintf_r+0x150>
 8007c80:	9b04      	ldr	r3, [sp, #16]
 8007c82:	eba0 000a 	sub.w	r0, r0, sl
 8007c86:	2240      	movs	r2, #64	; 0x40
 8007c88:	4082      	lsls	r2, r0
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	3401      	adds	r4, #1
 8007c8e:	9304      	str	r3, [sp, #16]
 8007c90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c94:	4825      	ldr	r0, [pc, #148]	; (8007d2c <_svfiprintf_r+0x1ec>)
 8007c96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c9a:	2206      	movs	r2, #6
 8007c9c:	f7f8 fab8 	bl	8000210 <memchr>
 8007ca0:	2800      	cmp	r0, #0
 8007ca2:	d038      	beq.n	8007d16 <_svfiprintf_r+0x1d6>
 8007ca4:	4b22      	ldr	r3, [pc, #136]	; (8007d30 <_svfiprintf_r+0x1f0>)
 8007ca6:	bb1b      	cbnz	r3, 8007cf0 <_svfiprintf_r+0x1b0>
 8007ca8:	9b03      	ldr	r3, [sp, #12]
 8007caa:	3307      	adds	r3, #7
 8007cac:	f023 0307 	bic.w	r3, r3, #7
 8007cb0:	3308      	adds	r3, #8
 8007cb2:	9303      	str	r3, [sp, #12]
 8007cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cb6:	4433      	add	r3, r6
 8007cb8:	9309      	str	r3, [sp, #36]	; 0x24
 8007cba:	e768      	b.n	8007b8e <_svfiprintf_r+0x4e>
 8007cbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007cc0:	460c      	mov	r4, r1
 8007cc2:	2001      	movs	r0, #1
 8007cc4:	e7a6      	b.n	8007c14 <_svfiprintf_r+0xd4>
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	3401      	adds	r4, #1
 8007cca:	9305      	str	r3, [sp, #20]
 8007ccc:	4619      	mov	r1, r3
 8007cce:	f04f 0c0a 	mov.w	ip, #10
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cd8:	3a30      	subs	r2, #48	; 0x30
 8007cda:	2a09      	cmp	r2, #9
 8007cdc:	d903      	bls.n	8007ce6 <_svfiprintf_r+0x1a6>
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d0c6      	beq.n	8007c70 <_svfiprintf_r+0x130>
 8007ce2:	9105      	str	r1, [sp, #20]
 8007ce4:	e7c4      	b.n	8007c70 <_svfiprintf_r+0x130>
 8007ce6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cea:	4604      	mov	r4, r0
 8007cec:	2301      	movs	r3, #1
 8007cee:	e7f0      	b.n	8007cd2 <_svfiprintf_r+0x192>
 8007cf0:	ab03      	add	r3, sp, #12
 8007cf2:	9300      	str	r3, [sp, #0]
 8007cf4:	462a      	mov	r2, r5
 8007cf6:	4b0f      	ldr	r3, [pc, #60]	; (8007d34 <_svfiprintf_r+0x1f4>)
 8007cf8:	a904      	add	r1, sp, #16
 8007cfa:	4638      	mov	r0, r7
 8007cfc:	f3af 8000 	nop.w
 8007d00:	1c42      	adds	r2, r0, #1
 8007d02:	4606      	mov	r6, r0
 8007d04:	d1d6      	bne.n	8007cb4 <_svfiprintf_r+0x174>
 8007d06:	89ab      	ldrh	r3, [r5, #12]
 8007d08:	065b      	lsls	r3, r3, #25
 8007d0a:	f53f af2d 	bmi.w	8007b68 <_svfiprintf_r+0x28>
 8007d0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d10:	b01d      	add	sp, #116	; 0x74
 8007d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d16:	ab03      	add	r3, sp, #12
 8007d18:	9300      	str	r3, [sp, #0]
 8007d1a:	462a      	mov	r2, r5
 8007d1c:	4b05      	ldr	r3, [pc, #20]	; (8007d34 <_svfiprintf_r+0x1f4>)
 8007d1e:	a904      	add	r1, sp, #16
 8007d20:	4638      	mov	r0, r7
 8007d22:	f000 f9bd 	bl	80080a0 <_printf_i>
 8007d26:	e7eb      	b.n	8007d00 <_svfiprintf_r+0x1c0>
 8007d28:	08008b28 	.word	0x08008b28
 8007d2c:	08008b32 	.word	0x08008b32
 8007d30:	00000000 	.word	0x00000000
 8007d34:	08007a8d 	.word	0x08007a8d
 8007d38:	08008b2e 	.word	0x08008b2e

08007d3c <__sfputc_r>:
 8007d3c:	6893      	ldr	r3, [r2, #8]
 8007d3e:	3b01      	subs	r3, #1
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	b410      	push	{r4}
 8007d44:	6093      	str	r3, [r2, #8]
 8007d46:	da08      	bge.n	8007d5a <__sfputc_r+0x1e>
 8007d48:	6994      	ldr	r4, [r2, #24]
 8007d4a:	42a3      	cmp	r3, r4
 8007d4c:	db01      	blt.n	8007d52 <__sfputc_r+0x16>
 8007d4e:	290a      	cmp	r1, #10
 8007d50:	d103      	bne.n	8007d5a <__sfputc_r+0x1e>
 8007d52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d56:	f000 bb73 	b.w	8008440 <__swbuf_r>
 8007d5a:	6813      	ldr	r3, [r2, #0]
 8007d5c:	1c58      	adds	r0, r3, #1
 8007d5e:	6010      	str	r0, [r2, #0]
 8007d60:	7019      	strb	r1, [r3, #0]
 8007d62:	4608      	mov	r0, r1
 8007d64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d68:	4770      	bx	lr

08007d6a <__sfputs_r>:
 8007d6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d6c:	4606      	mov	r6, r0
 8007d6e:	460f      	mov	r7, r1
 8007d70:	4614      	mov	r4, r2
 8007d72:	18d5      	adds	r5, r2, r3
 8007d74:	42ac      	cmp	r4, r5
 8007d76:	d101      	bne.n	8007d7c <__sfputs_r+0x12>
 8007d78:	2000      	movs	r0, #0
 8007d7a:	e007      	b.n	8007d8c <__sfputs_r+0x22>
 8007d7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d80:	463a      	mov	r2, r7
 8007d82:	4630      	mov	r0, r6
 8007d84:	f7ff ffda 	bl	8007d3c <__sfputc_r>
 8007d88:	1c43      	adds	r3, r0, #1
 8007d8a:	d1f3      	bne.n	8007d74 <__sfputs_r+0xa>
 8007d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d90 <_vfiprintf_r>:
 8007d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d94:	460d      	mov	r5, r1
 8007d96:	b09d      	sub	sp, #116	; 0x74
 8007d98:	4614      	mov	r4, r2
 8007d9a:	4698      	mov	r8, r3
 8007d9c:	4606      	mov	r6, r0
 8007d9e:	b118      	cbz	r0, 8007da8 <_vfiprintf_r+0x18>
 8007da0:	6a03      	ldr	r3, [r0, #32]
 8007da2:	b90b      	cbnz	r3, 8007da8 <_vfiprintf_r+0x18>
 8007da4:	f7ff fc44 	bl	8007630 <__sinit>
 8007da8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007daa:	07d9      	lsls	r1, r3, #31
 8007dac:	d405      	bmi.n	8007dba <_vfiprintf_r+0x2a>
 8007dae:	89ab      	ldrh	r3, [r5, #12]
 8007db0:	059a      	lsls	r2, r3, #22
 8007db2:	d402      	bmi.n	8007dba <_vfiprintf_r+0x2a>
 8007db4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007db6:	f7ff fd60 	bl	800787a <__retarget_lock_acquire_recursive>
 8007dba:	89ab      	ldrh	r3, [r5, #12]
 8007dbc:	071b      	lsls	r3, r3, #28
 8007dbe:	d501      	bpl.n	8007dc4 <_vfiprintf_r+0x34>
 8007dc0:	692b      	ldr	r3, [r5, #16]
 8007dc2:	b99b      	cbnz	r3, 8007dec <_vfiprintf_r+0x5c>
 8007dc4:	4629      	mov	r1, r5
 8007dc6:	4630      	mov	r0, r6
 8007dc8:	f000 fb78 	bl	80084bc <__swsetup_r>
 8007dcc:	b170      	cbz	r0, 8007dec <_vfiprintf_r+0x5c>
 8007dce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007dd0:	07dc      	lsls	r4, r3, #31
 8007dd2:	d504      	bpl.n	8007dde <_vfiprintf_r+0x4e>
 8007dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd8:	b01d      	add	sp, #116	; 0x74
 8007dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dde:	89ab      	ldrh	r3, [r5, #12]
 8007de0:	0598      	lsls	r0, r3, #22
 8007de2:	d4f7      	bmi.n	8007dd4 <_vfiprintf_r+0x44>
 8007de4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007de6:	f7ff fd49 	bl	800787c <__retarget_lock_release_recursive>
 8007dea:	e7f3      	b.n	8007dd4 <_vfiprintf_r+0x44>
 8007dec:	2300      	movs	r3, #0
 8007dee:	9309      	str	r3, [sp, #36]	; 0x24
 8007df0:	2320      	movs	r3, #32
 8007df2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007df6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007dfa:	2330      	movs	r3, #48	; 0x30
 8007dfc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007fb0 <_vfiprintf_r+0x220>
 8007e00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e04:	f04f 0901 	mov.w	r9, #1
 8007e08:	4623      	mov	r3, r4
 8007e0a:	469a      	mov	sl, r3
 8007e0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e10:	b10a      	cbz	r2, 8007e16 <_vfiprintf_r+0x86>
 8007e12:	2a25      	cmp	r2, #37	; 0x25
 8007e14:	d1f9      	bne.n	8007e0a <_vfiprintf_r+0x7a>
 8007e16:	ebba 0b04 	subs.w	fp, sl, r4
 8007e1a:	d00b      	beq.n	8007e34 <_vfiprintf_r+0xa4>
 8007e1c:	465b      	mov	r3, fp
 8007e1e:	4622      	mov	r2, r4
 8007e20:	4629      	mov	r1, r5
 8007e22:	4630      	mov	r0, r6
 8007e24:	f7ff ffa1 	bl	8007d6a <__sfputs_r>
 8007e28:	3001      	adds	r0, #1
 8007e2a:	f000 80a9 	beq.w	8007f80 <_vfiprintf_r+0x1f0>
 8007e2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e30:	445a      	add	r2, fp
 8007e32:	9209      	str	r2, [sp, #36]	; 0x24
 8007e34:	f89a 3000 	ldrb.w	r3, [sl]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	f000 80a1 	beq.w	8007f80 <_vfiprintf_r+0x1f0>
 8007e3e:	2300      	movs	r3, #0
 8007e40:	f04f 32ff 	mov.w	r2, #4294967295
 8007e44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e48:	f10a 0a01 	add.w	sl, sl, #1
 8007e4c:	9304      	str	r3, [sp, #16]
 8007e4e:	9307      	str	r3, [sp, #28]
 8007e50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e54:	931a      	str	r3, [sp, #104]	; 0x68
 8007e56:	4654      	mov	r4, sl
 8007e58:	2205      	movs	r2, #5
 8007e5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e5e:	4854      	ldr	r0, [pc, #336]	; (8007fb0 <_vfiprintf_r+0x220>)
 8007e60:	f7f8 f9d6 	bl	8000210 <memchr>
 8007e64:	9a04      	ldr	r2, [sp, #16]
 8007e66:	b9d8      	cbnz	r0, 8007ea0 <_vfiprintf_r+0x110>
 8007e68:	06d1      	lsls	r1, r2, #27
 8007e6a:	bf44      	itt	mi
 8007e6c:	2320      	movmi	r3, #32
 8007e6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e72:	0713      	lsls	r3, r2, #28
 8007e74:	bf44      	itt	mi
 8007e76:	232b      	movmi	r3, #43	; 0x2b
 8007e78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e7c:	f89a 3000 	ldrb.w	r3, [sl]
 8007e80:	2b2a      	cmp	r3, #42	; 0x2a
 8007e82:	d015      	beq.n	8007eb0 <_vfiprintf_r+0x120>
 8007e84:	9a07      	ldr	r2, [sp, #28]
 8007e86:	4654      	mov	r4, sl
 8007e88:	2000      	movs	r0, #0
 8007e8a:	f04f 0c0a 	mov.w	ip, #10
 8007e8e:	4621      	mov	r1, r4
 8007e90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e94:	3b30      	subs	r3, #48	; 0x30
 8007e96:	2b09      	cmp	r3, #9
 8007e98:	d94d      	bls.n	8007f36 <_vfiprintf_r+0x1a6>
 8007e9a:	b1b0      	cbz	r0, 8007eca <_vfiprintf_r+0x13a>
 8007e9c:	9207      	str	r2, [sp, #28]
 8007e9e:	e014      	b.n	8007eca <_vfiprintf_r+0x13a>
 8007ea0:	eba0 0308 	sub.w	r3, r0, r8
 8007ea4:	fa09 f303 	lsl.w	r3, r9, r3
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	9304      	str	r3, [sp, #16]
 8007eac:	46a2      	mov	sl, r4
 8007eae:	e7d2      	b.n	8007e56 <_vfiprintf_r+0xc6>
 8007eb0:	9b03      	ldr	r3, [sp, #12]
 8007eb2:	1d19      	adds	r1, r3, #4
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	9103      	str	r1, [sp, #12]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	bfbb      	ittet	lt
 8007ebc:	425b      	neglt	r3, r3
 8007ebe:	f042 0202 	orrlt.w	r2, r2, #2
 8007ec2:	9307      	strge	r3, [sp, #28]
 8007ec4:	9307      	strlt	r3, [sp, #28]
 8007ec6:	bfb8      	it	lt
 8007ec8:	9204      	strlt	r2, [sp, #16]
 8007eca:	7823      	ldrb	r3, [r4, #0]
 8007ecc:	2b2e      	cmp	r3, #46	; 0x2e
 8007ece:	d10c      	bne.n	8007eea <_vfiprintf_r+0x15a>
 8007ed0:	7863      	ldrb	r3, [r4, #1]
 8007ed2:	2b2a      	cmp	r3, #42	; 0x2a
 8007ed4:	d134      	bne.n	8007f40 <_vfiprintf_r+0x1b0>
 8007ed6:	9b03      	ldr	r3, [sp, #12]
 8007ed8:	1d1a      	adds	r2, r3, #4
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	9203      	str	r2, [sp, #12]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	bfb8      	it	lt
 8007ee2:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ee6:	3402      	adds	r4, #2
 8007ee8:	9305      	str	r3, [sp, #20]
 8007eea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007fc0 <_vfiprintf_r+0x230>
 8007eee:	7821      	ldrb	r1, [r4, #0]
 8007ef0:	2203      	movs	r2, #3
 8007ef2:	4650      	mov	r0, sl
 8007ef4:	f7f8 f98c 	bl	8000210 <memchr>
 8007ef8:	b138      	cbz	r0, 8007f0a <_vfiprintf_r+0x17a>
 8007efa:	9b04      	ldr	r3, [sp, #16]
 8007efc:	eba0 000a 	sub.w	r0, r0, sl
 8007f00:	2240      	movs	r2, #64	; 0x40
 8007f02:	4082      	lsls	r2, r0
 8007f04:	4313      	orrs	r3, r2
 8007f06:	3401      	adds	r4, #1
 8007f08:	9304      	str	r3, [sp, #16]
 8007f0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f0e:	4829      	ldr	r0, [pc, #164]	; (8007fb4 <_vfiprintf_r+0x224>)
 8007f10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f14:	2206      	movs	r2, #6
 8007f16:	f7f8 f97b 	bl	8000210 <memchr>
 8007f1a:	2800      	cmp	r0, #0
 8007f1c:	d03f      	beq.n	8007f9e <_vfiprintf_r+0x20e>
 8007f1e:	4b26      	ldr	r3, [pc, #152]	; (8007fb8 <_vfiprintf_r+0x228>)
 8007f20:	bb1b      	cbnz	r3, 8007f6a <_vfiprintf_r+0x1da>
 8007f22:	9b03      	ldr	r3, [sp, #12]
 8007f24:	3307      	adds	r3, #7
 8007f26:	f023 0307 	bic.w	r3, r3, #7
 8007f2a:	3308      	adds	r3, #8
 8007f2c:	9303      	str	r3, [sp, #12]
 8007f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f30:	443b      	add	r3, r7
 8007f32:	9309      	str	r3, [sp, #36]	; 0x24
 8007f34:	e768      	b.n	8007e08 <_vfiprintf_r+0x78>
 8007f36:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f3a:	460c      	mov	r4, r1
 8007f3c:	2001      	movs	r0, #1
 8007f3e:	e7a6      	b.n	8007e8e <_vfiprintf_r+0xfe>
 8007f40:	2300      	movs	r3, #0
 8007f42:	3401      	adds	r4, #1
 8007f44:	9305      	str	r3, [sp, #20]
 8007f46:	4619      	mov	r1, r3
 8007f48:	f04f 0c0a 	mov.w	ip, #10
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f52:	3a30      	subs	r2, #48	; 0x30
 8007f54:	2a09      	cmp	r2, #9
 8007f56:	d903      	bls.n	8007f60 <_vfiprintf_r+0x1d0>
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d0c6      	beq.n	8007eea <_vfiprintf_r+0x15a>
 8007f5c:	9105      	str	r1, [sp, #20]
 8007f5e:	e7c4      	b.n	8007eea <_vfiprintf_r+0x15a>
 8007f60:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f64:	4604      	mov	r4, r0
 8007f66:	2301      	movs	r3, #1
 8007f68:	e7f0      	b.n	8007f4c <_vfiprintf_r+0x1bc>
 8007f6a:	ab03      	add	r3, sp, #12
 8007f6c:	9300      	str	r3, [sp, #0]
 8007f6e:	462a      	mov	r2, r5
 8007f70:	4b12      	ldr	r3, [pc, #72]	; (8007fbc <_vfiprintf_r+0x22c>)
 8007f72:	a904      	add	r1, sp, #16
 8007f74:	4630      	mov	r0, r6
 8007f76:	f3af 8000 	nop.w
 8007f7a:	4607      	mov	r7, r0
 8007f7c:	1c78      	adds	r0, r7, #1
 8007f7e:	d1d6      	bne.n	8007f2e <_vfiprintf_r+0x19e>
 8007f80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f82:	07d9      	lsls	r1, r3, #31
 8007f84:	d405      	bmi.n	8007f92 <_vfiprintf_r+0x202>
 8007f86:	89ab      	ldrh	r3, [r5, #12]
 8007f88:	059a      	lsls	r2, r3, #22
 8007f8a:	d402      	bmi.n	8007f92 <_vfiprintf_r+0x202>
 8007f8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f8e:	f7ff fc75 	bl	800787c <__retarget_lock_release_recursive>
 8007f92:	89ab      	ldrh	r3, [r5, #12]
 8007f94:	065b      	lsls	r3, r3, #25
 8007f96:	f53f af1d 	bmi.w	8007dd4 <_vfiprintf_r+0x44>
 8007f9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f9c:	e71c      	b.n	8007dd8 <_vfiprintf_r+0x48>
 8007f9e:	ab03      	add	r3, sp, #12
 8007fa0:	9300      	str	r3, [sp, #0]
 8007fa2:	462a      	mov	r2, r5
 8007fa4:	4b05      	ldr	r3, [pc, #20]	; (8007fbc <_vfiprintf_r+0x22c>)
 8007fa6:	a904      	add	r1, sp, #16
 8007fa8:	4630      	mov	r0, r6
 8007faa:	f000 f879 	bl	80080a0 <_printf_i>
 8007fae:	e7e4      	b.n	8007f7a <_vfiprintf_r+0x1ea>
 8007fb0:	08008b28 	.word	0x08008b28
 8007fb4:	08008b32 	.word	0x08008b32
 8007fb8:	00000000 	.word	0x00000000
 8007fbc:	08007d6b 	.word	0x08007d6b
 8007fc0:	08008b2e 	.word	0x08008b2e

08007fc4 <_printf_common>:
 8007fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fc8:	4616      	mov	r6, r2
 8007fca:	4699      	mov	r9, r3
 8007fcc:	688a      	ldr	r2, [r1, #8]
 8007fce:	690b      	ldr	r3, [r1, #16]
 8007fd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	bfb8      	it	lt
 8007fd8:	4613      	movlt	r3, r2
 8007fda:	6033      	str	r3, [r6, #0]
 8007fdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007fe0:	4607      	mov	r7, r0
 8007fe2:	460c      	mov	r4, r1
 8007fe4:	b10a      	cbz	r2, 8007fea <_printf_common+0x26>
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	6033      	str	r3, [r6, #0]
 8007fea:	6823      	ldr	r3, [r4, #0]
 8007fec:	0699      	lsls	r1, r3, #26
 8007fee:	bf42      	ittt	mi
 8007ff0:	6833      	ldrmi	r3, [r6, #0]
 8007ff2:	3302      	addmi	r3, #2
 8007ff4:	6033      	strmi	r3, [r6, #0]
 8007ff6:	6825      	ldr	r5, [r4, #0]
 8007ff8:	f015 0506 	ands.w	r5, r5, #6
 8007ffc:	d106      	bne.n	800800c <_printf_common+0x48>
 8007ffe:	f104 0a19 	add.w	sl, r4, #25
 8008002:	68e3      	ldr	r3, [r4, #12]
 8008004:	6832      	ldr	r2, [r6, #0]
 8008006:	1a9b      	subs	r3, r3, r2
 8008008:	42ab      	cmp	r3, r5
 800800a:	dc26      	bgt.n	800805a <_printf_common+0x96>
 800800c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008010:	1e13      	subs	r3, r2, #0
 8008012:	6822      	ldr	r2, [r4, #0]
 8008014:	bf18      	it	ne
 8008016:	2301      	movne	r3, #1
 8008018:	0692      	lsls	r2, r2, #26
 800801a:	d42b      	bmi.n	8008074 <_printf_common+0xb0>
 800801c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008020:	4649      	mov	r1, r9
 8008022:	4638      	mov	r0, r7
 8008024:	47c0      	blx	r8
 8008026:	3001      	adds	r0, #1
 8008028:	d01e      	beq.n	8008068 <_printf_common+0xa4>
 800802a:	6823      	ldr	r3, [r4, #0]
 800802c:	6922      	ldr	r2, [r4, #16]
 800802e:	f003 0306 	and.w	r3, r3, #6
 8008032:	2b04      	cmp	r3, #4
 8008034:	bf02      	ittt	eq
 8008036:	68e5      	ldreq	r5, [r4, #12]
 8008038:	6833      	ldreq	r3, [r6, #0]
 800803a:	1aed      	subeq	r5, r5, r3
 800803c:	68a3      	ldr	r3, [r4, #8]
 800803e:	bf0c      	ite	eq
 8008040:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008044:	2500      	movne	r5, #0
 8008046:	4293      	cmp	r3, r2
 8008048:	bfc4      	itt	gt
 800804a:	1a9b      	subgt	r3, r3, r2
 800804c:	18ed      	addgt	r5, r5, r3
 800804e:	2600      	movs	r6, #0
 8008050:	341a      	adds	r4, #26
 8008052:	42b5      	cmp	r5, r6
 8008054:	d11a      	bne.n	800808c <_printf_common+0xc8>
 8008056:	2000      	movs	r0, #0
 8008058:	e008      	b.n	800806c <_printf_common+0xa8>
 800805a:	2301      	movs	r3, #1
 800805c:	4652      	mov	r2, sl
 800805e:	4649      	mov	r1, r9
 8008060:	4638      	mov	r0, r7
 8008062:	47c0      	blx	r8
 8008064:	3001      	adds	r0, #1
 8008066:	d103      	bne.n	8008070 <_printf_common+0xac>
 8008068:	f04f 30ff 	mov.w	r0, #4294967295
 800806c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008070:	3501      	adds	r5, #1
 8008072:	e7c6      	b.n	8008002 <_printf_common+0x3e>
 8008074:	18e1      	adds	r1, r4, r3
 8008076:	1c5a      	adds	r2, r3, #1
 8008078:	2030      	movs	r0, #48	; 0x30
 800807a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800807e:	4422      	add	r2, r4
 8008080:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008084:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008088:	3302      	adds	r3, #2
 800808a:	e7c7      	b.n	800801c <_printf_common+0x58>
 800808c:	2301      	movs	r3, #1
 800808e:	4622      	mov	r2, r4
 8008090:	4649      	mov	r1, r9
 8008092:	4638      	mov	r0, r7
 8008094:	47c0      	blx	r8
 8008096:	3001      	adds	r0, #1
 8008098:	d0e6      	beq.n	8008068 <_printf_common+0xa4>
 800809a:	3601      	adds	r6, #1
 800809c:	e7d9      	b.n	8008052 <_printf_common+0x8e>
	...

080080a0 <_printf_i>:
 80080a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080a4:	7e0f      	ldrb	r7, [r1, #24]
 80080a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80080a8:	2f78      	cmp	r7, #120	; 0x78
 80080aa:	4691      	mov	r9, r2
 80080ac:	4680      	mov	r8, r0
 80080ae:	460c      	mov	r4, r1
 80080b0:	469a      	mov	sl, r3
 80080b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80080b6:	d807      	bhi.n	80080c8 <_printf_i+0x28>
 80080b8:	2f62      	cmp	r7, #98	; 0x62
 80080ba:	d80a      	bhi.n	80080d2 <_printf_i+0x32>
 80080bc:	2f00      	cmp	r7, #0
 80080be:	f000 80d4 	beq.w	800826a <_printf_i+0x1ca>
 80080c2:	2f58      	cmp	r7, #88	; 0x58
 80080c4:	f000 80c0 	beq.w	8008248 <_printf_i+0x1a8>
 80080c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80080d0:	e03a      	b.n	8008148 <_printf_i+0xa8>
 80080d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80080d6:	2b15      	cmp	r3, #21
 80080d8:	d8f6      	bhi.n	80080c8 <_printf_i+0x28>
 80080da:	a101      	add	r1, pc, #4	; (adr r1, 80080e0 <_printf_i+0x40>)
 80080dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80080e0:	08008139 	.word	0x08008139
 80080e4:	0800814d 	.word	0x0800814d
 80080e8:	080080c9 	.word	0x080080c9
 80080ec:	080080c9 	.word	0x080080c9
 80080f0:	080080c9 	.word	0x080080c9
 80080f4:	080080c9 	.word	0x080080c9
 80080f8:	0800814d 	.word	0x0800814d
 80080fc:	080080c9 	.word	0x080080c9
 8008100:	080080c9 	.word	0x080080c9
 8008104:	080080c9 	.word	0x080080c9
 8008108:	080080c9 	.word	0x080080c9
 800810c:	08008251 	.word	0x08008251
 8008110:	08008179 	.word	0x08008179
 8008114:	0800820b 	.word	0x0800820b
 8008118:	080080c9 	.word	0x080080c9
 800811c:	080080c9 	.word	0x080080c9
 8008120:	08008273 	.word	0x08008273
 8008124:	080080c9 	.word	0x080080c9
 8008128:	08008179 	.word	0x08008179
 800812c:	080080c9 	.word	0x080080c9
 8008130:	080080c9 	.word	0x080080c9
 8008134:	08008213 	.word	0x08008213
 8008138:	682b      	ldr	r3, [r5, #0]
 800813a:	1d1a      	adds	r2, r3, #4
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	602a      	str	r2, [r5, #0]
 8008140:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008144:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008148:	2301      	movs	r3, #1
 800814a:	e09f      	b.n	800828c <_printf_i+0x1ec>
 800814c:	6820      	ldr	r0, [r4, #0]
 800814e:	682b      	ldr	r3, [r5, #0]
 8008150:	0607      	lsls	r7, r0, #24
 8008152:	f103 0104 	add.w	r1, r3, #4
 8008156:	6029      	str	r1, [r5, #0]
 8008158:	d501      	bpl.n	800815e <_printf_i+0xbe>
 800815a:	681e      	ldr	r6, [r3, #0]
 800815c:	e003      	b.n	8008166 <_printf_i+0xc6>
 800815e:	0646      	lsls	r6, r0, #25
 8008160:	d5fb      	bpl.n	800815a <_printf_i+0xba>
 8008162:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008166:	2e00      	cmp	r6, #0
 8008168:	da03      	bge.n	8008172 <_printf_i+0xd2>
 800816a:	232d      	movs	r3, #45	; 0x2d
 800816c:	4276      	negs	r6, r6
 800816e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008172:	485a      	ldr	r0, [pc, #360]	; (80082dc <_printf_i+0x23c>)
 8008174:	230a      	movs	r3, #10
 8008176:	e012      	b.n	800819e <_printf_i+0xfe>
 8008178:	682b      	ldr	r3, [r5, #0]
 800817a:	6820      	ldr	r0, [r4, #0]
 800817c:	1d19      	adds	r1, r3, #4
 800817e:	6029      	str	r1, [r5, #0]
 8008180:	0605      	lsls	r5, r0, #24
 8008182:	d501      	bpl.n	8008188 <_printf_i+0xe8>
 8008184:	681e      	ldr	r6, [r3, #0]
 8008186:	e002      	b.n	800818e <_printf_i+0xee>
 8008188:	0641      	lsls	r1, r0, #25
 800818a:	d5fb      	bpl.n	8008184 <_printf_i+0xe4>
 800818c:	881e      	ldrh	r6, [r3, #0]
 800818e:	4853      	ldr	r0, [pc, #332]	; (80082dc <_printf_i+0x23c>)
 8008190:	2f6f      	cmp	r7, #111	; 0x6f
 8008192:	bf0c      	ite	eq
 8008194:	2308      	moveq	r3, #8
 8008196:	230a      	movne	r3, #10
 8008198:	2100      	movs	r1, #0
 800819a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800819e:	6865      	ldr	r5, [r4, #4]
 80081a0:	60a5      	str	r5, [r4, #8]
 80081a2:	2d00      	cmp	r5, #0
 80081a4:	bfa2      	ittt	ge
 80081a6:	6821      	ldrge	r1, [r4, #0]
 80081a8:	f021 0104 	bicge.w	r1, r1, #4
 80081ac:	6021      	strge	r1, [r4, #0]
 80081ae:	b90e      	cbnz	r6, 80081b4 <_printf_i+0x114>
 80081b0:	2d00      	cmp	r5, #0
 80081b2:	d04b      	beq.n	800824c <_printf_i+0x1ac>
 80081b4:	4615      	mov	r5, r2
 80081b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80081ba:	fb03 6711 	mls	r7, r3, r1, r6
 80081be:	5dc7      	ldrb	r7, [r0, r7]
 80081c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80081c4:	4637      	mov	r7, r6
 80081c6:	42bb      	cmp	r3, r7
 80081c8:	460e      	mov	r6, r1
 80081ca:	d9f4      	bls.n	80081b6 <_printf_i+0x116>
 80081cc:	2b08      	cmp	r3, #8
 80081ce:	d10b      	bne.n	80081e8 <_printf_i+0x148>
 80081d0:	6823      	ldr	r3, [r4, #0]
 80081d2:	07de      	lsls	r6, r3, #31
 80081d4:	d508      	bpl.n	80081e8 <_printf_i+0x148>
 80081d6:	6923      	ldr	r3, [r4, #16]
 80081d8:	6861      	ldr	r1, [r4, #4]
 80081da:	4299      	cmp	r1, r3
 80081dc:	bfde      	ittt	le
 80081de:	2330      	movle	r3, #48	; 0x30
 80081e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80081e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80081e8:	1b52      	subs	r2, r2, r5
 80081ea:	6122      	str	r2, [r4, #16]
 80081ec:	f8cd a000 	str.w	sl, [sp]
 80081f0:	464b      	mov	r3, r9
 80081f2:	aa03      	add	r2, sp, #12
 80081f4:	4621      	mov	r1, r4
 80081f6:	4640      	mov	r0, r8
 80081f8:	f7ff fee4 	bl	8007fc4 <_printf_common>
 80081fc:	3001      	adds	r0, #1
 80081fe:	d14a      	bne.n	8008296 <_printf_i+0x1f6>
 8008200:	f04f 30ff 	mov.w	r0, #4294967295
 8008204:	b004      	add	sp, #16
 8008206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800820a:	6823      	ldr	r3, [r4, #0]
 800820c:	f043 0320 	orr.w	r3, r3, #32
 8008210:	6023      	str	r3, [r4, #0]
 8008212:	4833      	ldr	r0, [pc, #204]	; (80082e0 <_printf_i+0x240>)
 8008214:	2778      	movs	r7, #120	; 0x78
 8008216:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800821a:	6823      	ldr	r3, [r4, #0]
 800821c:	6829      	ldr	r1, [r5, #0]
 800821e:	061f      	lsls	r7, r3, #24
 8008220:	f851 6b04 	ldr.w	r6, [r1], #4
 8008224:	d402      	bmi.n	800822c <_printf_i+0x18c>
 8008226:	065f      	lsls	r7, r3, #25
 8008228:	bf48      	it	mi
 800822a:	b2b6      	uxthmi	r6, r6
 800822c:	07df      	lsls	r7, r3, #31
 800822e:	bf48      	it	mi
 8008230:	f043 0320 	orrmi.w	r3, r3, #32
 8008234:	6029      	str	r1, [r5, #0]
 8008236:	bf48      	it	mi
 8008238:	6023      	strmi	r3, [r4, #0]
 800823a:	b91e      	cbnz	r6, 8008244 <_printf_i+0x1a4>
 800823c:	6823      	ldr	r3, [r4, #0]
 800823e:	f023 0320 	bic.w	r3, r3, #32
 8008242:	6023      	str	r3, [r4, #0]
 8008244:	2310      	movs	r3, #16
 8008246:	e7a7      	b.n	8008198 <_printf_i+0xf8>
 8008248:	4824      	ldr	r0, [pc, #144]	; (80082dc <_printf_i+0x23c>)
 800824a:	e7e4      	b.n	8008216 <_printf_i+0x176>
 800824c:	4615      	mov	r5, r2
 800824e:	e7bd      	b.n	80081cc <_printf_i+0x12c>
 8008250:	682b      	ldr	r3, [r5, #0]
 8008252:	6826      	ldr	r6, [r4, #0]
 8008254:	6961      	ldr	r1, [r4, #20]
 8008256:	1d18      	adds	r0, r3, #4
 8008258:	6028      	str	r0, [r5, #0]
 800825a:	0635      	lsls	r5, r6, #24
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	d501      	bpl.n	8008264 <_printf_i+0x1c4>
 8008260:	6019      	str	r1, [r3, #0]
 8008262:	e002      	b.n	800826a <_printf_i+0x1ca>
 8008264:	0670      	lsls	r0, r6, #25
 8008266:	d5fb      	bpl.n	8008260 <_printf_i+0x1c0>
 8008268:	8019      	strh	r1, [r3, #0]
 800826a:	2300      	movs	r3, #0
 800826c:	6123      	str	r3, [r4, #16]
 800826e:	4615      	mov	r5, r2
 8008270:	e7bc      	b.n	80081ec <_printf_i+0x14c>
 8008272:	682b      	ldr	r3, [r5, #0]
 8008274:	1d1a      	adds	r2, r3, #4
 8008276:	602a      	str	r2, [r5, #0]
 8008278:	681d      	ldr	r5, [r3, #0]
 800827a:	6862      	ldr	r2, [r4, #4]
 800827c:	2100      	movs	r1, #0
 800827e:	4628      	mov	r0, r5
 8008280:	f7f7 ffc6 	bl	8000210 <memchr>
 8008284:	b108      	cbz	r0, 800828a <_printf_i+0x1ea>
 8008286:	1b40      	subs	r0, r0, r5
 8008288:	6060      	str	r0, [r4, #4]
 800828a:	6863      	ldr	r3, [r4, #4]
 800828c:	6123      	str	r3, [r4, #16]
 800828e:	2300      	movs	r3, #0
 8008290:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008294:	e7aa      	b.n	80081ec <_printf_i+0x14c>
 8008296:	6923      	ldr	r3, [r4, #16]
 8008298:	462a      	mov	r2, r5
 800829a:	4649      	mov	r1, r9
 800829c:	4640      	mov	r0, r8
 800829e:	47d0      	blx	sl
 80082a0:	3001      	adds	r0, #1
 80082a2:	d0ad      	beq.n	8008200 <_printf_i+0x160>
 80082a4:	6823      	ldr	r3, [r4, #0]
 80082a6:	079b      	lsls	r3, r3, #30
 80082a8:	d413      	bmi.n	80082d2 <_printf_i+0x232>
 80082aa:	68e0      	ldr	r0, [r4, #12]
 80082ac:	9b03      	ldr	r3, [sp, #12]
 80082ae:	4298      	cmp	r0, r3
 80082b0:	bfb8      	it	lt
 80082b2:	4618      	movlt	r0, r3
 80082b4:	e7a6      	b.n	8008204 <_printf_i+0x164>
 80082b6:	2301      	movs	r3, #1
 80082b8:	4632      	mov	r2, r6
 80082ba:	4649      	mov	r1, r9
 80082bc:	4640      	mov	r0, r8
 80082be:	47d0      	blx	sl
 80082c0:	3001      	adds	r0, #1
 80082c2:	d09d      	beq.n	8008200 <_printf_i+0x160>
 80082c4:	3501      	adds	r5, #1
 80082c6:	68e3      	ldr	r3, [r4, #12]
 80082c8:	9903      	ldr	r1, [sp, #12]
 80082ca:	1a5b      	subs	r3, r3, r1
 80082cc:	42ab      	cmp	r3, r5
 80082ce:	dcf2      	bgt.n	80082b6 <_printf_i+0x216>
 80082d0:	e7eb      	b.n	80082aa <_printf_i+0x20a>
 80082d2:	2500      	movs	r5, #0
 80082d4:	f104 0619 	add.w	r6, r4, #25
 80082d8:	e7f5      	b.n	80082c6 <_printf_i+0x226>
 80082da:	bf00      	nop
 80082dc:	08008b39 	.word	0x08008b39
 80082e0:	08008b4a 	.word	0x08008b4a

080082e4 <__sflush_r>:
 80082e4:	898a      	ldrh	r2, [r1, #12]
 80082e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082ea:	4605      	mov	r5, r0
 80082ec:	0710      	lsls	r0, r2, #28
 80082ee:	460c      	mov	r4, r1
 80082f0:	d458      	bmi.n	80083a4 <__sflush_r+0xc0>
 80082f2:	684b      	ldr	r3, [r1, #4]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	dc05      	bgt.n	8008304 <__sflush_r+0x20>
 80082f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	dc02      	bgt.n	8008304 <__sflush_r+0x20>
 80082fe:	2000      	movs	r0, #0
 8008300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008304:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008306:	2e00      	cmp	r6, #0
 8008308:	d0f9      	beq.n	80082fe <__sflush_r+0x1a>
 800830a:	2300      	movs	r3, #0
 800830c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008310:	682f      	ldr	r7, [r5, #0]
 8008312:	6a21      	ldr	r1, [r4, #32]
 8008314:	602b      	str	r3, [r5, #0]
 8008316:	d032      	beq.n	800837e <__sflush_r+0x9a>
 8008318:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800831a:	89a3      	ldrh	r3, [r4, #12]
 800831c:	075a      	lsls	r2, r3, #29
 800831e:	d505      	bpl.n	800832c <__sflush_r+0x48>
 8008320:	6863      	ldr	r3, [r4, #4]
 8008322:	1ac0      	subs	r0, r0, r3
 8008324:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008326:	b10b      	cbz	r3, 800832c <__sflush_r+0x48>
 8008328:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800832a:	1ac0      	subs	r0, r0, r3
 800832c:	2300      	movs	r3, #0
 800832e:	4602      	mov	r2, r0
 8008330:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008332:	6a21      	ldr	r1, [r4, #32]
 8008334:	4628      	mov	r0, r5
 8008336:	47b0      	blx	r6
 8008338:	1c43      	adds	r3, r0, #1
 800833a:	89a3      	ldrh	r3, [r4, #12]
 800833c:	d106      	bne.n	800834c <__sflush_r+0x68>
 800833e:	6829      	ldr	r1, [r5, #0]
 8008340:	291d      	cmp	r1, #29
 8008342:	d82b      	bhi.n	800839c <__sflush_r+0xb8>
 8008344:	4a29      	ldr	r2, [pc, #164]	; (80083ec <__sflush_r+0x108>)
 8008346:	410a      	asrs	r2, r1
 8008348:	07d6      	lsls	r6, r2, #31
 800834a:	d427      	bmi.n	800839c <__sflush_r+0xb8>
 800834c:	2200      	movs	r2, #0
 800834e:	6062      	str	r2, [r4, #4]
 8008350:	04d9      	lsls	r1, r3, #19
 8008352:	6922      	ldr	r2, [r4, #16]
 8008354:	6022      	str	r2, [r4, #0]
 8008356:	d504      	bpl.n	8008362 <__sflush_r+0x7e>
 8008358:	1c42      	adds	r2, r0, #1
 800835a:	d101      	bne.n	8008360 <__sflush_r+0x7c>
 800835c:	682b      	ldr	r3, [r5, #0]
 800835e:	b903      	cbnz	r3, 8008362 <__sflush_r+0x7e>
 8008360:	6560      	str	r0, [r4, #84]	; 0x54
 8008362:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008364:	602f      	str	r7, [r5, #0]
 8008366:	2900      	cmp	r1, #0
 8008368:	d0c9      	beq.n	80082fe <__sflush_r+0x1a>
 800836a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800836e:	4299      	cmp	r1, r3
 8008370:	d002      	beq.n	8008378 <__sflush_r+0x94>
 8008372:	4628      	mov	r0, r5
 8008374:	f7ff fa92 	bl	800789c <_free_r>
 8008378:	2000      	movs	r0, #0
 800837a:	6360      	str	r0, [r4, #52]	; 0x34
 800837c:	e7c0      	b.n	8008300 <__sflush_r+0x1c>
 800837e:	2301      	movs	r3, #1
 8008380:	4628      	mov	r0, r5
 8008382:	47b0      	blx	r6
 8008384:	1c41      	adds	r1, r0, #1
 8008386:	d1c8      	bne.n	800831a <__sflush_r+0x36>
 8008388:	682b      	ldr	r3, [r5, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d0c5      	beq.n	800831a <__sflush_r+0x36>
 800838e:	2b1d      	cmp	r3, #29
 8008390:	d001      	beq.n	8008396 <__sflush_r+0xb2>
 8008392:	2b16      	cmp	r3, #22
 8008394:	d101      	bne.n	800839a <__sflush_r+0xb6>
 8008396:	602f      	str	r7, [r5, #0]
 8008398:	e7b1      	b.n	80082fe <__sflush_r+0x1a>
 800839a:	89a3      	ldrh	r3, [r4, #12]
 800839c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083a0:	81a3      	strh	r3, [r4, #12]
 80083a2:	e7ad      	b.n	8008300 <__sflush_r+0x1c>
 80083a4:	690f      	ldr	r7, [r1, #16]
 80083a6:	2f00      	cmp	r7, #0
 80083a8:	d0a9      	beq.n	80082fe <__sflush_r+0x1a>
 80083aa:	0793      	lsls	r3, r2, #30
 80083ac:	680e      	ldr	r6, [r1, #0]
 80083ae:	bf08      	it	eq
 80083b0:	694b      	ldreq	r3, [r1, #20]
 80083b2:	600f      	str	r7, [r1, #0]
 80083b4:	bf18      	it	ne
 80083b6:	2300      	movne	r3, #0
 80083b8:	eba6 0807 	sub.w	r8, r6, r7
 80083bc:	608b      	str	r3, [r1, #8]
 80083be:	f1b8 0f00 	cmp.w	r8, #0
 80083c2:	dd9c      	ble.n	80082fe <__sflush_r+0x1a>
 80083c4:	6a21      	ldr	r1, [r4, #32]
 80083c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80083c8:	4643      	mov	r3, r8
 80083ca:	463a      	mov	r2, r7
 80083cc:	4628      	mov	r0, r5
 80083ce:	47b0      	blx	r6
 80083d0:	2800      	cmp	r0, #0
 80083d2:	dc06      	bgt.n	80083e2 <__sflush_r+0xfe>
 80083d4:	89a3      	ldrh	r3, [r4, #12]
 80083d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083da:	81a3      	strh	r3, [r4, #12]
 80083dc:	f04f 30ff 	mov.w	r0, #4294967295
 80083e0:	e78e      	b.n	8008300 <__sflush_r+0x1c>
 80083e2:	4407      	add	r7, r0
 80083e4:	eba8 0800 	sub.w	r8, r8, r0
 80083e8:	e7e9      	b.n	80083be <__sflush_r+0xda>
 80083ea:	bf00      	nop
 80083ec:	dfbffffe 	.word	0xdfbffffe

080083f0 <_fflush_r>:
 80083f0:	b538      	push	{r3, r4, r5, lr}
 80083f2:	690b      	ldr	r3, [r1, #16]
 80083f4:	4605      	mov	r5, r0
 80083f6:	460c      	mov	r4, r1
 80083f8:	b913      	cbnz	r3, 8008400 <_fflush_r+0x10>
 80083fa:	2500      	movs	r5, #0
 80083fc:	4628      	mov	r0, r5
 80083fe:	bd38      	pop	{r3, r4, r5, pc}
 8008400:	b118      	cbz	r0, 800840a <_fflush_r+0x1a>
 8008402:	6a03      	ldr	r3, [r0, #32]
 8008404:	b90b      	cbnz	r3, 800840a <_fflush_r+0x1a>
 8008406:	f7ff f913 	bl	8007630 <__sinit>
 800840a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d0f3      	beq.n	80083fa <_fflush_r+0xa>
 8008412:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008414:	07d0      	lsls	r0, r2, #31
 8008416:	d404      	bmi.n	8008422 <_fflush_r+0x32>
 8008418:	0599      	lsls	r1, r3, #22
 800841a:	d402      	bmi.n	8008422 <_fflush_r+0x32>
 800841c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800841e:	f7ff fa2c 	bl	800787a <__retarget_lock_acquire_recursive>
 8008422:	4628      	mov	r0, r5
 8008424:	4621      	mov	r1, r4
 8008426:	f7ff ff5d 	bl	80082e4 <__sflush_r>
 800842a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800842c:	07da      	lsls	r2, r3, #31
 800842e:	4605      	mov	r5, r0
 8008430:	d4e4      	bmi.n	80083fc <_fflush_r+0xc>
 8008432:	89a3      	ldrh	r3, [r4, #12]
 8008434:	059b      	lsls	r3, r3, #22
 8008436:	d4e1      	bmi.n	80083fc <_fflush_r+0xc>
 8008438:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800843a:	f7ff fa1f 	bl	800787c <__retarget_lock_release_recursive>
 800843e:	e7dd      	b.n	80083fc <_fflush_r+0xc>

08008440 <__swbuf_r>:
 8008440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008442:	460e      	mov	r6, r1
 8008444:	4614      	mov	r4, r2
 8008446:	4605      	mov	r5, r0
 8008448:	b118      	cbz	r0, 8008452 <__swbuf_r+0x12>
 800844a:	6a03      	ldr	r3, [r0, #32]
 800844c:	b90b      	cbnz	r3, 8008452 <__swbuf_r+0x12>
 800844e:	f7ff f8ef 	bl	8007630 <__sinit>
 8008452:	69a3      	ldr	r3, [r4, #24]
 8008454:	60a3      	str	r3, [r4, #8]
 8008456:	89a3      	ldrh	r3, [r4, #12]
 8008458:	071a      	lsls	r2, r3, #28
 800845a:	d525      	bpl.n	80084a8 <__swbuf_r+0x68>
 800845c:	6923      	ldr	r3, [r4, #16]
 800845e:	b31b      	cbz	r3, 80084a8 <__swbuf_r+0x68>
 8008460:	6823      	ldr	r3, [r4, #0]
 8008462:	6922      	ldr	r2, [r4, #16]
 8008464:	1a98      	subs	r0, r3, r2
 8008466:	6963      	ldr	r3, [r4, #20]
 8008468:	b2f6      	uxtb	r6, r6
 800846a:	4283      	cmp	r3, r0
 800846c:	4637      	mov	r7, r6
 800846e:	dc04      	bgt.n	800847a <__swbuf_r+0x3a>
 8008470:	4621      	mov	r1, r4
 8008472:	4628      	mov	r0, r5
 8008474:	f7ff ffbc 	bl	80083f0 <_fflush_r>
 8008478:	b9e0      	cbnz	r0, 80084b4 <__swbuf_r+0x74>
 800847a:	68a3      	ldr	r3, [r4, #8]
 800847c:	3b01      	subs	r3, #1
 800847e:	60a3      	str	r3, [r4, #8]
 8008480:	6823      	ldr	r3, [r4, #0]
 8008482:	1c5a      	adds	r2, r3, #1
 8008484:	6022      	str	r2, [r4, #0]
 8008486:	701e      	strb	r6, [r3, #0]
 8008488:	6962      	ldr	r2, [r4, #20]
 800848a:	1c43      	adds	r3, r0, #1
 800848c:	429a      	cmp	r2, r3
 800848e:	d004      	beq.n	800849a <__swbuf_r+0x5a>
 8008490:	89a3      	ldrh	r3, [r4, #12]
 8008492:	07db      	lsls	r3, r3, #31
 8008494:	d506      	bpl.n	80084a4 <__swbuf_r+0x64>
 8008496:	2e0a      	cmp	r6, #10
 8008498:	d104      	bne.n	80084a4 <__swbuf_r+0x64>
 800849a:	4621      	mov	r1, r4
 800849c:	4628      	mov	r0, r5
 800849e:	f7ff ffa7 	bl	80083f0 <_fflush_r>
 80084a2:	b938      	cbnz	r0, 80084b4 <__swbuf_r+0x74>
 80084a4:	4638      	mov	r0, r7
 80084a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084a8:	4621      	mov	r1, r4
 80084aa:	4628      	mov	r0, r5
 80084ac:	f000 f806 	bl	80084bc <__swsetup_r>
 80084b0:	2800      	cmp	r0, #0
 80084b2:	d0d5      	beq.n	8008460 <__swbuf_r+0x20>
 80084b4:	f04f 37ff 	mov.w	r7, #4294967295
 80084b8:	e7f4      	b.n	80084a4 <__swbuf_r+0x64>
	...

080084bc <__swsetup_r>:
 80084bc:	b538      	push	{r3, r4, r5, lr}
 80084be:	4b2a      	ldr	r3, [pc, #168]	; (8008568 <__swsetup_r+0xac>)
 80084c0:	4605      	mov	r5, r0
 80084c2:	6818      	ldr	r0, [r3, #0]
 80084c4:	460c      	mov	r4, r1
 80084c6:	b118      	cbz	r0, 80084d0 <__swsetup_r+0x14>
 80084c8:	6a03      	ldr	r3, [r0, #32]
 80084ca:	b90b      	cbnz	r3, 80084d0 <__swsetup_r+0x14>
 80084cc:	f7ff f8b0 	bl	8007630 <__sinit>
 80084d0:	89a3      	ldrh	r3, [r4, #12]
 80084d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80084d6:	0718      	lsls	r0, r3, #28
 80084d8:	d422      	bmi.n	8008520 <__swsetup_r+0x64>
 80084da:	06d9      	lsls	r1, r3, #27
 80084dc:	d407      	bmi.n	80084ee <__swsetup_r+0x32>
 80084de:	2309      	movs	r3, #9
 80084e0:	602b      	str	r3, [r5, #0]
 80084e2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80084e6:	81a3      	strh	r3, [r4, #12]
 80084e8:	f04f 30ff 	mov.w	r0, #4294967295
 80084ec:	e034      	b.n	8008558 <__swsetup_r+0x9c>
 80084ee:	0758      	lsls	r0, r3, #29
 80084f0:	d512      	bpl.n	8008518 <__swsetup_r+0x5c>
 80084f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084f4:	b141      	cbz	r1, 8008508 <__swsetup_r+0x4c>
 80084f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084fa:	4299      	cmp	r1, r3
 80084fc:	d002      	beq.n	8008504 <__swsetup_r+0x48>
 80084fe:	4628      	mov	r0, r5
 8008500:	f7ff f9cc 	bl	800789c <_free_r>
 8008504:	2300      	movs	r3, #0
 8008506:	6363      	str	r3, [r4, #52]	; 0x34
 8008508:	89a3      	ldrh	r3, [r4, #12]
 800850a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800850e:	81a3      	strh	r3, [r4, #12]
 8008510:	2300      	movs	r3, #0
 8008512:	6063      	str	r3, [r4, #4]
 8008514:	6923      	ldr	r3, [r4, #16]
 8008516:	6023      	str	r3, [r4, #0]
 8008518:	89a3      	ldrh	r3, [r4, #12]
 800851a:	f043 0308 	orr.w	r3, r3, #8
 800851e:	81a3      	strh	r3, [r4, #12]
 8008520:	6923      	ldr	r3, [r4, #16]
 8008522:	b94b      	cbnz	r3, 8008538 <__swsetup_r+0x7c>
 8008524:	89a3      	ldrh	r3, [r4, #12]
 8008526:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800852a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800852e:	d003      	beq.n	8008538 <__swsetup_r+0x7c>
 8008530:	4621      	mov	r1, r4
 8008532:	4628      	mov	r0, r5
 8008534:	f000 f899 	bl	800866a <__smakebuf_r>
 8008538:	89a0      	ldrh	r0, [r4, #12]
 800853a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800853e:	f010 0301 	ands.w	r3, r0, #1
 8008542:	d00a      	beq.n	800855a <__swsetup_r+0x9e>
 8008544:	2300      	movs	r3, #0
 8008546:	60a3      	str	r3, [r4, #8]
 8008548:	6963      	ldr	r3, [r4, #20]
 800854a:	425b      	negs	r3, r3
 800854c:	61a3      	str	r3, [r4, #24]
 800854e:	6923      	ldr	r3, [r4, #16]
 8008550:	b943      	cbnz	r3, 8008564 <__swsetup_r+0xa8>
 8008552:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008556:	d1c4      	bne.n	80084e2 <__swsetup_r+0x26>
 8008558:	bd38      	pop	{r3, r4, r5, pc}
 800855a:	0781      	lsls	r1, r0, #30
 800855c:	bf58      	it	pl
 800855e:	6963      	ldrpl	r3, [r4, #20]
 8008560:	60a3      	str	r3, [r4, #8]
 8008562:	e7f4      	b.n	800854e <__swsetup_r+0x92>
 8008564:	2000      	movs	r0, #0
 8008566:	e7f7      	b.n	8008558 <__swsetup_r+0x9c>
 8008568:	2000007c 	.word	0x2000007c

0800856c <memmove>:
 800856c:	4288      	cmp	r0, r1
 800856e:	b510      	push	{r4, lr}
 8008570:	eb01 0402 	add.w	r4, r1, r2
 8008574:	d902      	bls.n	800857c <memmove+0x10>
 8008576:	4284      	cmp	r4, r0
 8008578:	4623      	mov	r3, r4
 800857a:	d807      	bhi.n	800858c <memmove+0x20>
 800857c:	1e43      	subs	r3, r0, #1
 800857e:	42a1      	cmp	r1, r4
 8008580:	d008      	beq.n	8008594 <memmove+0x28>
 8008582:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008586:	f803 2f01 	strb.w	r2, [r3, #1]!
 800858a:	e7f8      	b.n	800857e <memmove+0x12>
 800858c:	4402      	add	r2, r0
 800858e:	4601      	mov	r1, r0
 8008590:	428a      	cmp	r2, r1
 8008592:	d100      	bne.n	8008596 <memmove+0x2a>
 8008594:	bd10      	pop	{r4, pc}
 8008596:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800859a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800859e:	e7f7      	b.n	8008590 <memmove+0x24>

080085a0 <_sbrk_r>:
 80085a0:	b538      	push	{r3, r4, r5, lr}
 80085a2:	4d06      	ldr	r5, [pc, #24]	; (80085bc <_sbrk_r+0x1c>)
 80085a4:	2300      	movs	r3, #0
 80085a6:	4604      	mov	r4, r0
 80085a8:	4608      	mov	r0, r1
 80085aa:	602b      	str	r3, [r5, #0]
 80085ac:	f7f8 fdf8 	bl	80011a0 <_sbrk>
 80085b0:	1c43      	adds	r3, r0, #1
 80085b2:	d102      	bne.n	80085ba <_sbrk_r+0x1a>
 80085b4:	682b      	ldr	r3, [r5, #0]
 80085b6:	b103      	cbz	r3, 80085ba <_sbrk_r+0x1a>
 80085b8:	6023      	str	r3, [r4, #0]
 80085ba:	bd38      	pop	{r3, r4, r5, pc}
 80085bc:	200130b4 	.word	0x200130b4

080085c0 <_realloc_r>:
 80085c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085c4:	4680      	mov	r8, r0
 80085c6:	4614      	mov	r4, r2
 80085c8:	460e      	mov	r6, r1
 80085ca:	b921      	cbnz	r1, 80085d6 <_realloc_r+0x16>
 80085cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085d0:	4611      	mov	r1, r2
 80085d2:	f7ff b9cf 	b.w	8007974 <_malloc_r>
 80085d6:	b92a      	cbnz	r2, 80085e4 <_realloc_r+0x24>
 80085d8:	f7ff f960 	bl	800789c <_free_r>
 80085dc:	4625      	mov	r5, r4
 80085de:	4628      	mov	r0, r5
 80085e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085e4:	f000 f8a0 	bl	8008728 <_malloc_usable_size_r>
 80085e8:	4284      	cmp	r4, r0
 80085ea:	4607      	mov	r7, r0
 80085ec:	d802      	bhi.n	80085f4 <_realloc_r+0x34>
 80085ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80085f2:	d812      	bhi.n	800861a <_realloc_r+0x5a>
 80085f4:	4621      	mov	r1, r4
 80085f6:	4640      	mov	r0, r8
 80085f8:	f7ff f9bc 	bl	8007974 <_malloc_r>
 80085fc:	4605      	mov	r5, r0
 80085fe:	2800      	cmp	r0, #0
 8008600:	d0ed      	beq.n	80085de <_realloc_r+0x1e>
 8008602:	42bc      	cmp	r4, r7
 8008604:	4622      	mov	r2, r4
 8008606:	4631      	mov	r1, r6
 8008608:	bf28      	it	cs
 800860a:	463a      	movcs	r2, r7
 800860c:	f7ff f937 	bl	800787e <memcpy>
 8008610:	4631      	mov	r1, r6
 8008612:	4640      	mov	r0, r8
 8008614:	f7ff f942 	bl	800789c <_free_r>
 8008618:	e7e1      	b.n	80085de <_realloc_r+0x1e>
 800861a:	4635      	mov	r5, r6
 800861c:	e7df      	b.n	80085de <_realloc_r+0x1e>

0800861e <__swhatbuf_r>:
 800861e:	b570      	push	{r4, r5, r6, lr}
 8008620:	460c      	mov	r4, r1
 8008622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008626:	2900      	cmp	r1, #0
 8008628:	b096      	sub	sp, #88	; 0x58
 800862a:	4615      	mov	r5, r2
 800862c:	461e      	mov	r6, r3
 800862e:	da0d      	bge.n	800864c <__swhatbuf_r+0x2e>
 8008630:	89a3      	ldrh	r3, [r4, #12]
 8008632:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008636:	f04f 0100 	mov.w	r1, #0
 800863a:	bf0c      	ite	eq
 800863c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008640:	2340      	movne	r3, #64	; 0x40
 8008642:	2000      	movs	r0, #0
 8008644:	6031      	str	r1, [r6, #0]
 8008646:	602b      	str	r3, [r5, #0]
 8008648:	b016      	add	sp, #88	; 0x58
 800864a:	bd70      	pop	{r4, r5, r6, pc}
 800864c:	466a      	mov	r2, sp
 800864e:	f000 f849 	bl	80086e4 <_fstat_r>
 8008652:	2800      	cmp	r0, #0
 8008654:	dbec      	blt.n	8008630 <__swhatbuf_r+0x12>
 8008656:	9901      	ldr	r1, [sp, #4]
 8008658:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800865c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008660:	4259      	negs	r1, r3
 8008662:	4159      	adcs	r1, r3
 8008664:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008668:	e7eb      	b.n	8008642 <__swhatbuf_r+0x24>

0800866a <__smakebuf_r>:
 800866a:	898b      	ldrh	r3, [r1, #12]
 800866c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800866e:	079d      	lsls	r5, r3, #30
 8008670:	4606      	mov	r6, r0
 8008672:	460c      	mov	r4, r1
 8008674:	d507      	bpl.n	8008686 <__smakebuf_r+0x1c>
 8008676:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800867a:	6023      	str	r3, [r4, #0]
 800867c:	6123      	str	r3, [r4, #16]
 800867e:	2301      	movs	r3, #1
 8008680:	6163      	str	r3, [r4, #20]
 8008682:	b002      	add	sp, #8
 8008684:	bd70      	pop	{r4, r5, r6, pc}
 8008686:	ab01      	add	r3, sp, #4
 8008688:	466a      	mov	r2, sp
 800868a:	f7ff ffc8 	bl	800861e <__swhatbuf_r>
 800868e:	9900      	ldr	r1, [sp, #0]
 8008690:	4605      	mov	r5, r0
 8008692:	4630      	mov	r0, r6
 8008694:	f7ff f96e 	bl	8007974 <_malloc_r>
 8008698:	b948      	cbnz	r0, 80086ae <__smakebuf_r+0x44>
 800869a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800869e:	059a      	lsls	r2, r3, #22
 80086a0:	d4ef      	bmi.n	8008682 <__smakebuf_r+0x18>
 80086a2:	f023 0303 	bic.w	r3, r3, #3
 80086a6:	f043 0302 	orr.w	r3, r3, #2
 80086aa:	81a3      	strh	r3, [r4, #12]
 80086ac:	e7e3      	b.n	8008676 <__smakebuf_r+0xc>
 80086ae:	89a3      	ldrh	r3, [r4, #12]
 80086b0:	6020      	str	r0, [r4, #0]
 80086b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086b6:	81a3      	strh	r3, [r4, #12]
 80086b8:	9b00      	ldr	r3, [sp, #0]
 80086ba:	6163      	str	r3, [r4, #20]
 80086bc:	9b01      	ldr	r3, [sp, #4]
 80086be:	6120      	str	r0, [r4, #16]
 80086c0:	b15b      	cbz	r3, 80086da <__smakebuf_r+0x70>
 80086c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086c6:	4630      	mov	r0, r6
 80086c8:	f000 f81e 	bl	8008708 <_isatty_r>
 80086cc:	b128      	cbz	r0, 80086da <__smakebuf_r+0x70>
 80086ce:	89a3      	ldrh	r3, [r4, #12]
 80086d0:	f023 0303 	bic.w	r3, r3, #3
 80086d4:	f043 0301 	orr.w	r3, r3, #1
 80086d8:	81a3      	strh	r3, [r4, #12]
 80086da:	89a3      	ldrh	r3, [r4, #12]
 80086dc:	431d      	orrs	r5, r3
 80086de:	81a5      	strh	r5, [r4, #12]
 80086e0:	e7cf      	b.n	8008682 <__smakebuf_r+0x18>
	...

080086e4 <_fstat_r>:
 80086e4:	b538      	push	{r3, r4, r5, lr}
 80086e6:	4d07      	ldr	r5, [pc, #28]	; (8008704 <_fstat_r+0x20>)
 80086e8:	2300      	movs	r3, #0
 80086ea:	4604      	mov	r4, r0
 80086ec:	4608      	mov	r0, r1
 80086ee:	4611      	mov	r1, r2
 80086f0:	602b      	str	r3, [r5, #0]
 80086f2:	f7f8 fd2c 	bl	800114e <_fstat>
 80086f6:	1c43      	adds	r3, r0, #1
 80086f8:	d102      	bne.n	8008700 <_fstat_r+0x1c>
 80086fa:	682b      	ldr	r3, [r5, #0]
 80086fc:	b103      	cbz	r3, 8008700 <_fstat_r+0x1c>
 80086fe:	6023      	str	r3, [r4, #0]
 8008700:	bd38      	pop	{r3, r4, r5, pc}
 8008702:	bf00      	nop
 8008704:	200130b4 	.word	0x200130b4

08008708 <_isatty_r>:
 8008708:	b538      	push	{r3, r4, r5, lr}
 800870a:	4d06      	ldr	r5, [pc, #24]	; (8008724 <_isatty_r+0x1c>)
 800870c:	2300      	movs	r3, #0
 800870e:	4604      	mov	r4, r0
 8008710:	4608      	mov	r0, r1
 8008712:	602b      	str	r3, [r5, #0]
 8008714:	f7f8 fd2b 	bl	800116e <_isatty>
 8008718:	1c43      	adds	r3, r0, #1
 800871a:	d102      	bne.n	8008722 <_isatty_r+0x1a>
 800871c:	682b      	ldr	r3, [r5, #0]
 800871e:	b103      	cbz	r3, 8008722 <_isatty_r+0x1a>
 8008720:	6023      	str	r3, [r4, #0]
 8008722:	bd38      	pop	{r3, r4, r5, pc}
 8008724:	200130b4 	.word	0x200130b4

08008728 <_malloc_usable_size_r>:
 8008728:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800872c:	1f18      	subs	r0, r3, #4
 800872e:	2b00      	cmp	r3, #0
 8008730:	bfbc      	itt	lt
 8008732:	580b      	ldrlt	r3, [r1, r0]
 8008734:	18c0      	addlt	r0, r0, r3
 8008736:	4770      	bx	lr

08008738 <_init>:
 8008738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800873a:	bf00      	nop
 800873c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800873e:	bc08      	pop	{r3}
 8008740:	469e      	mov	lr, r3
 8008742:	4770      	bx	lr

08008744 <_fini>:
 8008744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008746:	bf00      	nop
 8008748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800874a:	bc08      	pop	{r3}
 800874c:	469e      	mov	lr, r3
 800874e:	4770      	bx	lr
